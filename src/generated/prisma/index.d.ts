
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Term
 * 
 */
export type Term = $Result.DefaultSelection<Prisma.$TermPayload>
/**
 * Model Thread
 * 
 */
export type Thread = $Result.DefaultSelection<Prisma.$ThreadPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model Process
 * 
 */
export type Process = $Result.DefaultSelection<Prisma.$ProcessPayload>
/**
 * Model Problem
 * 
 */
export type Problem = $Result.DefaultSelection<Prisma.$ProblemPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model Attempt
 * 
 */
export type Attempt = $Result.DefaultSelection<Prisma.$AttemptPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Resource
 * 
 */
export type Resource = $Result.DefaultSelection<Prisma.$ResourcePayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamMember
 * 
 */
export type TeamMember = $Result.DefaultSelection<Prisma.$TeamMemberPayload>
/**
 * Model Path
 * 
 */
export type Path = $Result.DefaultSelection<Prisma.$PathPayload>
/**
 * Model Routine
 * 
 */
export type Routine = $Result.DefaultSelection<Prisma.$RoutinePayload>
/**
 * Model RoutineSlot
 * 
 */
export type RoutineSlot = $Result.DefaultSelection<Prisma.$RoutineSlotPayload>
/**
 * Model RoutineSlotThread
 * 
 */
export type RoutineSlotThread = $Result.DefaultSelection<Prisma.$RoutineSlotThreadPayload>
/**
 * Model RoutineSlotTask
 * 
 */
export type RoutineSlotTask = $Result.DefaultSelection<Prisma.$RoutineSlotTaskPayload>
/**
 * Model RoutineSlotActivity
 * 
 */
export type RoutineSlotActivity = $Result.DefaultSelection<Prisma.$RoutineSlotActivityPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TermKind: {
  GENUINE: 'GENUINE',
  PERSPECTIVE: 'PERSPECTIVE'
};

export type TermKind = (typeof TermKind)[keyof typeof TermKind]


export const GoalType: {
  NORMAL: 'NORMAL',
  LEARNING: 'LEARNING'
};

export type GoalType = (typeof GoalType)[keyof typeof GoalType]

}

export type TermKind = $Enums.TermKind

export const TermKind: typeof $Enums.TermKind

export type GoalType = $Enums.GoalType

export const GoalType: typeof $Enums.GoalType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.term.findMany()
    * ```
    */
  get term(): Prisma.TermDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thread`: Exposes CRUD operations for the **Thread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threads
    * const threads = await prisma.thread.findMany()
    * ```
    */
  get thread(): Prisma.ThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.process`: Exposes CRUD operations for the **Process** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Processes
    * const processes = await prisma.process.findMany()
    * ```
    */
  get process(): Prisma.ProcessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problem`: Exposes CRUD operations for the **Problem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problems
    * const problems = await prisma.problem.findMany()
    * ```
    */
  get problem(): Prisma.ProblemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attempt`: Exposes CRUD operations for the **Attempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attempts
    * const attempts = await prisma.attempt.findMany()
    * ```
    */
  get attempt(): Prisma.AttemptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resource`: Exposes CRUD operations for the **Resource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resources
    * const resources = await prisma.resource.findMany()
    * ```
    */
  get resource(): Prisma.ResourceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.path`: Exposes CRUD operations for the **Path** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paths
    * const paths = await prisma.path.findMany()
    * ```
    */
  get path(): Prisma.PathDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routine`: Exposes CRUD operations for the **Routine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routines
    * const routines = await prisma.routine.findMany()
    * ```
    */
  get routine(): Prisma.RoutineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routineSlot`: Exposes CRUD operations for the **RoutineSlot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoutineSlots
    * const routineSlots = await prisma.routineSlot.findMany()
    * ```
    */
  get routineSlot(): Prisma.RoutineSlotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routineSlotThread`: Exposes CRUD operations for the **RoutineSlotThread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoutineSlotThreads
    * const routineSlotThreads = await prisma.routineSlotThread.findMany()
    * ```
    */
  get routineSlotThread(): Prisma.RoutineSlotThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routineSlotTask`: Exposes CRUD operations for the **RoutineSlotTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoutineSlotTasks
    * const routineSlotTasks = await prisma.routineSlotTask.findMany()
    * ```
    */
  get routineSlotTask(): Prisma.RoutineSlotTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routineSlotActivity`: Exposes CRUD operations for the **RoutineSlotActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoutineSlotActivities
    * const routineSlotActivities = await prisma.routineSlotActivity.findMany()
    * ```
    */
  get routineSlotActivity(): Prisma.RoutineSlotActivityDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Term: 'Term',
    Thread: 'Thread',
    Project: 'Project',
    Goal: 'Goal',
    Process: 'Process',
    Problem: 'Problem',
    Task: 'Task',
    Activity: 'Activity',
    Attempt: 'Attempt',
    Comment: 'Comment',
    Resource: 'Resource',
    Review: 'Review',
    Team: 'Team',
    TeamMember: 'TeamMember',
    Path: 'Path',
    Routine: 'Routine',
    RoutineSlot: 'RoutineSlot',
    RoutineSlotThread: 'RoutineSlotThread',
    RoutineSlotTask: 'RoutineSlotTask',
    RoutineSlotActivity: 'RoutineSlotActivity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "term" | "thread" | "project" | "goal" | "process" | "problem" | "task" | "activity" | "attempt" | "comment" | "resource" | "review" | "team" | "teamMember" | "path" | "routine" | "routineSlot" | "routineSlotThread" | "routineSlotTask" | "routineSlotActivity"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Term: {
        payload: Prisma.$TermPayload<ExtArgs>
        fields: Prisma.TermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findFirst: {
            args: Prisma.TermFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findMany: {
            args: Prisma.TermFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>[]
          }
          create: {
            args: Prisma.TermCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          createMany: {
            args: Prisma.TermCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TermDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          update: {
            args: Prisma.TermUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          deleteMany: {
            args: Prisma.TermDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TermUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TermUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          aggregate: {
            args: Prisma.TermAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerm>
          }
          groupBy: {
            args: Prisma.TermGroupByArgs<ExtArgs>
            result: $Utils.Optional<TermGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TermFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TermAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TermCountArgs<ExtArgs>
            result: $Utils.Optional<TermCountAggregateOutputType> | number
          }
        }
      }
      Thread: {
        payload: Prisma.$ThreadPayload<ExtArgs>
        fields: Prisma.ThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          findFirst: {
            args: Prisma.ThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          findMany: {
            args: Prisma.ThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>[]
          }
          create: {
            args: Prisma.ThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          createMany: {
            args: Prisma.ThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          update: {
            args: Prisma.ThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          deleteMany: {
            args: Prisma.ThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          aggregate: {
            args: Prisma.ThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThread>
          }
          groupBy: {
            args: Prisma.ThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThreadGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ThreadFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ThreadAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ThreadCountArgs<ExtArgs>
            result: $Utils.Optional<ThreadCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProjectFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProjectAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.GoalFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.GoalAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      Process: {
        payload: Prisma.$ProcessPayload<ExtArgs>
        fields: Prisma.ProcessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findFirst: {
            args: Prisma.ProcessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findMany: {
            args: Prisma.ProcessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          create: {
            args: Prisma.ProcessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          createMany: {
            args: Prisma.ProcessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProcessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          update: {
            args: Prisma.ProcessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          deleteMany: {
            args: Prisma.ProcessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          aggregate: {
            args: Prisma.ProcessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcess>
          }
          groupBy: {
            args: Prisma.ProcessGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProcessFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProcessAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProcessCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessCountAggregateOutputType> | number
          }
        }
      }
      Problem: {
        payload: Prisma.$ProblemPayload<ExtArgs>
        fields: Prisma.ProblemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findFirst: {
            args: Prisma.ProblemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findMany: {
            args: Prisma.ProblemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          create: {
            args: Prisma.ProblemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          createMany: {
            args: Prisma.ProblemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProblemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          update: {
            args: Prisma.ProblemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          deleteMany: {
            args: Prisma.ProblemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProblemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          aggregate: {
            args: Prisma.ProblemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblem>
          }
          groupBy: {
            args: Prisma.ProblemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProblemFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProblemAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProblemCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TaskFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TaskAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ActivityFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ActivityAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      Attempt: {
        payload: Prisma.$AttemptPayload<ExtArgs>
        fields: Prisma.AttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>
          }
          findFirst: {
            args: Prisma.AttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>
          }
          findMany: {
            args: Prisma.AttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>[]
          }
          create: {
            args: Prisma.AttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>
          }
          createMany: {
            args: Prisma.AttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>
          }
          update: {
            args: Prisma.AttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>
          }
          deleteMany: {
            args: Prisma.AttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptPayload>
          }
          aggregate: {
            args: Prisma.AttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttempt>
          }
          groupBy: {
            args: Prisma.AttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttemptGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AttemptFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AttemptAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AttemptCountArgs<ExtArgs>
            result: $Utils.Optional<AttemptCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CommentFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CommentAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Resource: {
        payload: Prisma.$ResourcePayload<ExtArgs>
        fields: Prisma.ResourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          findFirst: {
            args: Prisma.ResourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          findMany: {
            args: Prisma.ResourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>[]
          }
          create: {
            args: Prisma.ResourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          createMany: {
            args: Prisma.ResourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ResourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          update: {
            args: Prisma.ResourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          deleteMany: {
            args: Prisma.ResourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          aggregate: {
            args: Prisma.ResourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResource>
          }
          groupBy: {
            args: Prisma.ResourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResourceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ResourceFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ResourceAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ResourceCountArgs<ExtArgs>
            result: $Utils.Optional<ResourceCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReviewFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReviewAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TeamFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TeamAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamMember: {
        payload: Prisma.$TeamMemberPayload<ExtArgs>
        fields: Prisma.TeamMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findFirst: {
            args: Prisma.TeamMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findMany: {
            args: Prisma.TeamMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          create: {
            args: Prisma.TeamMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          createMany: {
            args: Prisma.TeamMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          update: {
            args: Prisma.TeamMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          deleteMany: {
            args: Prisma.TeamMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          aggregate: {
            args: Prisma.TeamMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMember>
          }
          groupBy: {
            args: Prisma.TeamMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TeamMemberFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TeamMemberAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TeamMemberCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberCountAggregateOutputType> | number
          }
        }
      }
      Path: {
        payload: Prisma.$PathPayload<ExtArgs>
        fields: Prisma.PathFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PathFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PathFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          findFirst: {
            args: Prisma.PathFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PathFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          findMany: {
            args: Prisma.PathFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>[]
          }
          create: {
            args: Prisma.PathCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          createMany: {
            args: Prisma.PathCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PathDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          update: {
            args: Prisma.PathUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          deleteMany: {
            args: Prisma.PathDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PathUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PathUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          aggregate: {
            args: Prisma.PathAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePath>
          }
          groupBy: {
            args: Prisma.PathGroupByArgs<ExtArgs>
            result: $Utils.Optional<PathGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PathFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.PathAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.PathCountArgs<ExtArgs>
            result: $Utils.Optional<PathCountAggregateOutputType> | number
          }
        }
      }
      Routine: {
        payload: Prisma.$RoutinePayload<ExtArgs>
        fields: Prisma.RoutineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          findFirst: {
            args: Prisma.RoutineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          findMany: {
            args: Prisma.RoutineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>[]
          }
          create: {
            args: Prisma.RoutineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          createMany: {
            args: Prisma.RoutineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoutineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          update: {
            args: Prisma.RoutineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          deleteMany: {
            args: Prisma.RoutineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoutineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          aggregate: {
            args: Prisma.RoutineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutine>
          }
          groupBy: {
            args: Prisma.RoutineGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutineGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RoutineFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RoutineAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RoutineCountArgs<ExtArgs>
            result: $Utils.Optional<RoutineCountAggregateOutputType> | number
          }
        }
      }
      RoutineSlot: {
        payload: Prisma.$RoutineSlotPayload<ExtArgs>
        fields: Prisma.RoutineSlotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineSlotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineSlotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>
          }
          findFirst: {
            args: Prisma.RoutineSlotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineSlotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>
          }
          findMany: {
            args: Prisma.RoutineSlotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>[]
          }
          create: {
            args: Prisma.RoutineSlotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>
          }
          createMany: {
            args: Prisma.RoutineSlotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoutineSlotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>
          }
          update: {
            args: Prisma.RoutineSlotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>
          }
          deleteMany: {
            args: Prisma.RoutineSlotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineSlotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoutineSlotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotPayload>
          }
          aggregate: {
            args: Prisma.RoutineSlotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutineSlot>
          }
          groupBy: {
            args: Prisma.RoutineSlotGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RoutineSlotFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RoutineSlotAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RoutineSlotCountArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotCountAggregateOutputType> | number
          }
        }
      }
      RoutineSlotThread: {
        payload: Prisma.$RoutineSlotThreadPayload<ExtArgs>
        fields: Prisma.RoutineSlotThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineSlotThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineSlotThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>
          }
          findFirst: {
            args: Prisma.RoutineSlotThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineSlotThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>
          }
          findMany: {
            args: Prisma.RoutineSlotThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>[]
          }
          create: {
            args: Prisma.RoutineSlotThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>
          }
          createMany: {
            args: Prisma.RoutineSlotThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoutineSlotThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>
          }
          update: {
            args: Prisma.RoutineSlotThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>
          }
          deleteMany: {
            args: Prisma.RoutineSlotThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineSlotThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoutineSlotThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotThreadPayload>
          }
          aggregate: {
            args: Prisma.RoutineSlotThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutineSlotThread>
          }
          groupBy: {
            args: Prisma.RoutineSlotThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotThreadGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RoutineSlotThreadFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RoutineSlotThreadAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RoutineSlotThreadCountArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotThreadCountAggregateOutputType> | number
          }
        }
      }
      RoutineSlotTask: {
        payload: Prisma.$RoutineSlotTaskPayload<ExtArgs>
        fields: Prisma.RoutineSlotTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineSlotTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineSlotTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>
          }
          findFirst: {
            args: Prisma.RoutineSlotTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineSlotTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>
          }
          findMany: {
            args: Prisma.RoutineSlotTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>[]
          }
          create: {
            args: Prisma.RoutineSlotTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>
          }
          createMany: {
            args: Prisma.RoutineSlotTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoutineSlotTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>
          }
          update: {
            args: Prisma.RoutineSlotTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>
          }
          deleteMany: {
            args: Prisma.RoutineSlotTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineSlotTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoutineSlotTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotTaskPayload>
          }
          aggregate: {
            args: Prisma.RoutineSlotTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutineSlotTask>
          }
          groupBy: {
            args: Prisma.RoutineSlotTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotTaskGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RoutineSlotTaskFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RoutineSlotTaskAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RoutineSlotTaskCountArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotTaskCountAggregateOutputType> | number
          }
        }
      }
      RoutineSlotActivity: {
        payload: Prisma.$RoutineSlotActivityPayload<ExtArgs>
        fields: Prisma.RoutineSlotActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineSlotActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineSlotActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>
          }
          findFirst: {
            args: Prisma.RoutineSlotActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineSlotActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>
          }
          findMany: {
            args: Prisma.RoutineSlotActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>[]
          }
          create: {
            args: Prisma.RoutineSlotActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>
          }
          createMany: {
            args: Prisma.RoutineSlotActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoutineSlotActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>
          }
          update: {
            args: Prisma.RoutineSlotActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>
          }
          deleteMany: {
            args: Prisma.RoutineSlotActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineSlotActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoutineSlotActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutineSlotActivityPayload>
          }
          aggregate: {
            args: Prisma.RoutineSlotActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutineSlotActivity>
          }
          groupBy: {
            args: Prisma.RoutineSlotActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotActivityGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RoutineSlotActivityFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RoutineSlotActivityAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RoutineSlotActivityCountArgs<ExtArgs>
            result: $Utils.Optional<RoutineSlotActivityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    term?: TermOmit
    thread?: ThreadOmit
    project?: ProjectOmit
    goal?: GoalOmit
    process?: ProcessOmit
    problem?: ProblemOmit
    task?: TaskOmit
    activity?: ActivityOmit
    attempt?: AttemptOmit
    comment?: CommentOmit
    resource?: ResourceOmit
    review?: ReviewOmit
    team?: TeamOmit
    teamMember?: TeamMemberOmit
    path?: PathOmit
    routine?: RoutineOmit
    routineSlot?: RoutineSlotOmit
    routineSlotThread?: RoutineSlotThreadOmit
    routineSlotTask?: RoutineSlotTaskOmit
    routineSlotActivity?: RoutineSlotActivityOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Term: number
    Thread: number
    Project: number
    Goal: number
    Process: number
    Problem: number
    Task: number
    Activity: number
    Attempt: number
    Comment: number
    Resource: number
    Review: number
    Team: number
    TeamMember: number
    Path: number
    Routine: number
    RoutineSlot: number
    RoutineSlotThread: number
    RoutineSlotTask: number
    RoutineSlotActivity: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Term?: boolean | UserCountOutputTypeCountTermArgs
    Thread?: boolean | UserCountOutputTypeCountThreadArgs
    Project?: boolean | UserCountOutputTypeCountProjectArgs
    Goal?: boolean | UserCountOutputTypeCountGoalArgs
    Process?: boolean | UserCountOutputTypeCountProcessArgs
    Problem?: boolean | UserCountOutputTypeCountProblemArgs
    Task?: boolean | UserCountOutputTypeCountTaskArgs
    Activity?: boolean | UserCountOutputTypeCountActivityArgs
    Attempt?: boolean | UserCountOutputTypeCountAttemptArgs
    Comment?: boolean | UserCountOutputTypeCountCommentArgs
    Resource?: boolean | UserCountOutputTypeCountResourceArgs
    Review?: boolean | UserCountOutputTypeCountReviewArgs
    Team?: boolean | UserCountOutputTypeCountTeamArgs
    TeamMember?: boolean | UserCountOutputTypeCountTeamMemberArgs
    Path?: boolean | UserCountOutputTypeCountPathArgs
    Routine?: boolean | UserCountOutputTypeCountRoutineArgs
    RoutineSlot?: boolean | UserCountOutputTypeCountRoutineSlotArgs
    RoutineSlotThread?: boolean | UserCountOutputTypeCountRoutineSlotThreadArgs
    RoutineSlotTask?: boolean | UserCountOutputTypeCountRoutineSlotTaskArgs
    RoutineSlotActivity?: boolean | UserCountOutputTypeCountRoutineSlotActivityArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTermArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreadWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProcessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProblemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttemptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPathArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PathWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoutineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoutineSlotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoutineSlotThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotThreadWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoutineSlotTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotTaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoutineSlotActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotActivityWhereInput
  }


  /**
   * Count Type TermCountOutputType
   */

  export type TermCountOutputType = {
    derivedTerms: number
    threads: number
    paths: number
  }

  export type TermCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    derivedTerms?: boolean | TermCountOutputTypeCountDerivedTermsArgs
    threads?: boolean | TermCountOutputTypeCountThreadsArgs
    paths?: boolean | TermCountOutputTypeCountPathsArgs
  }

  // Custom InputTypes
  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermCountOutputType
     */
    select?: TermCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeCountDerivedTermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
  }

  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeCountThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreadWhereInput
  }

  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeCountPathsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PathWhereInput
  }


  /**
   * Count Type ThreadCountOutputType
   */

  export type ThreadCountOutputType = {
    projects: number
  }

  export type ThreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | ThreadCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * ThreadCountOutputType without action
   */
  export type ThreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThreadCountOutputType
     */
    select?: ThreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThreadCountOutputType without action
   */
  export type ThreadCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    goals: number
    teams: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | ProjectCountOutputTypeCountGoalsArgs
    teams?: boolean | ProjectCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }


  /**
   * Count Type GoalCountOutputType
   */

  export type GoalCountOutputType = {
    processes: number
    pathsFromTerm: number
  }

  export type GoalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processes?: boolean | GoalCountOutputTypeCountProcessesArgs
    pathsFromTerm?: boolean | GoalCountOutputTypeCountPathsFromTermArgs
  }

  // Custom InputTypes
  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalCountOutputType
     */
    select?: GoalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountPathsFromTermArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PathWhereInput
  }


  /**
   * Count Type ProcessCountOutputType
   */

  export type ProcessCountOutputType = {
    problems: number
  }

  export type ProcessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | ProcessCountOutputTypeCountProblemsArgs
  }

  // Custom InputTypes
  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessCountOutputType
     */
    select?: ProcessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
  }


  /**
   * Count Type ProblemCountOutputType
   */

  export type ProblemCountOutputType = {
    tasks: number
  }

  export type ProblemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | ProblemCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCountOutputType
     */
    select?: ProblemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    activities: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | TaskCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }


  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    attempts: number
    comments: number
    resources: number
    reviews: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | ActivityCountOutputTypeCountAttemptsArgs
    comments?: boolean | ActivityCountOutputTypeCountCommentsArgs
    resources?: boolean | ActivityCountOutputTypeCountResourcesArgs
    reviews?: boolean | ActivityCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttemptWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    members: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TeamCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }


  /**
   * Count Type RoutineCountOutputType
   */

  export type RoutineCountOutputType = {
    slots: number
  }

  export type RoutineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    slots?: boolean | RoutineCountOutputTypeCountSlotsArgs
  }

  // Custom InputTypes
  /**
   * RoutineCountOutputType without action
   */
  export type RoutineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineCountOutputType
     */
    select?: RoutineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoutineCountOutputType without action
   */
  export type RoutineCountOutputTypeCountSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotWhereInput
  }


  /**
   * Count Type RoutineSlotCountOutputType
   */

  export type RoutineSlotCountOutputType = {
    slotThreads: number
    slotTasks: number
    slotActivities: number
  }

  export type RoutineSlotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    slotThreads?: boolean | RoutineSlotCountOutputTypeCountSlotThreadsArgs
    slotTasks?: boolean | RoutineSlotCountOutputTypeCountSlotTasksArgs
    slotActivities?: boolean | RoutineSlotCountOutputTypeCountSlotActivitiesArgs
  }

  // Custom InputTypes
  /**
   * RoutineSlotCountOutputType without action
   */
  export type RoutineSlotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotCountOutputType
     */
    select?: RoutineSlotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoutineSlotCountOutputType without action
   */
  export type RoutineSlotCountOutputTypeCountSlotThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotThreadWhereInput
  }

  /**
   * RoutineSlotCountOutputType without action
   */
  export type RoutineSlotCountOutputTypeCountSlotTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotTaskWhereInput
  }

  /**
   * RoutineSlotCountOutputType without action
   */
  export type RoutineSlotCountOutputTypeCountSlotActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotActivityWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Term?: boolean | User$TermArgs<ExtArgs>
    Thread?: boolean | User$ThreadArgs<ExtArgs>
    Project?: boolean | User$ProjectArgs<ExtArgs>
    Goal?: boolean | User$GoalArgs<ExtArgs>
    Process?: boolean | User$ProcessArgs<ExtArgs>
    Problem?: boolean | User$ProblemArgs<ExtArgs>
    Task?: boolean | User$TaskArgs<ExtArgs>
    Activity?: boolean | User$ActivityArgs<ExtArgs>
    Attempt?: boolean | User$AttemptArgs<ExtArgs>
    Comment?: boolean | User$CommentArgs<ExtArgs>
    Resource?: boolean | User$ResourceArgs<ExtArgs>
    Review?: boolean | User$ReviewArgs<ExtArgs>
    Team?: boolean | User$TeamArgs<ExtArgs>
    TeamMember?: boolean | User$TeamMemberArgs<ExtArgs>
    Path?: boolean | User$PathArgs<ExtArgs>
    Routine?: boolean | User$RoutineArgs<ExtArgs>
    RoutineSlot?: boolean | User$RoutineSlotArgs<ExtArgs>
    RoutineSlotThread?: boolean | User$RoutineSlotThreadArgs<ExtArgs>
    RoutineSlotTask?: boolean | User$RoutineSlotTaskArgs<ExtArgs>
    RoutineSlotActivity?: boolean | User$RoutineSlotActivityArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Term?: boolean | User$TermArgs<ExtArgs>
    Thread?: boolean | User$ThreadArgs<ExtArgs>
    Project?: boolean | User$ProjectArgs<ExtArgs>
    Goal?: boolean | User$GoalArgs<ExtArgs>
    Process?: boolean | User$ProcessArgs<ExtArgs>
    Problem?: boolean | User$ProblemArgs<ExtArgs>
    Task?: boolean | User$TaskArgs<ExtArgs>
    Activity?: boolean | User$ActivityArgs<ExtArgs>
    Attempt?: boolean | User$AttemptArgs<ExtArgs>
    Comment?: boolean | User$CommentArgs<ExtArgs>
    Resource?: boolean | User$ResourceArgs<ExtArgs>
    Review?: boolean | User$ReviewArgs<ExtArgs>
    Team?: boolean | User$TeamArgs<ExtArgs>
    TeamMember?: boolean | User$TeamMemberArgs<ExtArgs>
    Path?: boolean | User$PathArgs<ExtArgs>
    Routine?: boolean | User$RoutineArgs<ExtArgs>
    RoutineSlot?: boolean | User$RoutineSlotArgs<ExtArgs>
    RoutineSlotThread?: boolean | User$RoutineSlotThreadArgs<ExtArgs>
    RoutineSlotTask?: boolean | User$RoutineSlotTaskArgs<ExtArgs>
    RoutineSlotActivity?: boolean | User$RoutineSlotActivityArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Term: Prisma.$TermPayload<ExtArgs>[]
      Thread: Prisma.$ThreadPayload<ExtArgs>[]
      Project: Prisma.$ProjectPayload<ExtArgs>[]
      Goal: Prisma.$GoalPayload<ExtArgs>[]
      Process: Prisma.$ProcessPayload<ExtArgs>[]
      Problem: Prisma.$ProblemPayload<ExtArgs>[]
      Task: Prisma.$TaskPayload<ExtArgs>[]
      Activity: Prisma.$ActivityPayload<ExtArgs>[]
      Attempt: Prisma.$AttemptPayload<ExtArgs>[]
      Comment: Prisma.$CommentPayload<ExtArgs>[]
      Resource: Prisma.$ResourcePayload<ExtArgs>[]
      Review: Prisma.$ReviewPayload<ExtArgs>[]
      Team: Prisma.$TeamPayload<ExtArgs>[]
      TeamMember: Prisma.$TeamMemberPayload<ExtArgs>[]
      Path: Prisma.$PathPayload<ExtArgs>[]
      Routine: Prisma.$RoutinePayload<ExtArgs>[]
      RoutineSlot: Prisma.$RoutineSlotPayload<ExtArgs>[]
      RoutineSlotThread: Prisma.$RoutineSlotThreadPayload<ExtArgs>[]
      RoutineSlotTask: Prisma.$RoutineSlotTaskPayload<ExtArgs>[]
      RoutineSlotActivity: Prisma.$RoutineSlotActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Term<T extends User$TermArgs<ExtArgs> = {}>(args?: Subset<T, User$TermArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Thread<T extends User$ThreadArgs<ExtArgs> = {}>(args?: Subset<T, User$ThreadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Project<T extends User$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, User$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Goal<T extends User$GoalArgs<ExtArgs> = {}>(args?: Subset<T, User$GoalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Process<T extends User$ProcessArgs<ExtArgs> = {}>(args?: Subset<T, User$ProcessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Problem<T extends User$ProblemArgs<ExtArgs> = {}>(args?: Subset<T, User$ProblemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Task<T extends User$TaskArgs<ExtArgs> = {}>(args?: Subset<T, User$TaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Activity<T extends User$ActivityArgs<ExtArgs> = {}>(args?: Subset<T, User$ActivityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Attempt<T extends User$AttemptArgs<ExtArgs> = {}>(args?: Subset<T, User$AttemptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Comment<T extends User$CommentArgs<ExtArgs> = {}>(args?: Subset<T, User$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Resource<T extends User$ResourceArgs<ExtArgs> = {}>(args?: Subset<T, User$ResourceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Review<T extends User$ReviewArgs<ExtArgs> = {}>(args?: Subset<T, User$ReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Team<T extends User$TeamArgs<ExtArgs> = {}>(args?: Subset<T, User$TeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeamMember<T extends User$TeamMemberArgs<ExtArgs> = {}>(args?: Subset<T, User$TeamMemberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Path<T extends User$PathArgs<ExtArgs> = {}>(args?: Subset<T, User$PathArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Routine<T extends User$RoutineArgs<ExtArgs> = {}>(args?: Subset<T, User$RoutineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RoutineSlot<T extends User$RoutineSlotArgs<ExtArgs> = {}>(args?: Subset<T, User$RoutineSlotArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RoutineSlotThread<T extends User$RoutineSlotThreadArgs<ExtArgs> = {}>(args?: Subset<T, User$RoutineSlotThreadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RoutineSlotTask<T extends User$RoutineSlotTaskArgs<ExtArgs> = {}>(args?: Subset<T, User$RoutineSlotTaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RoutineSlotActivity<T extends User$RoutineSlotActivityArgs<ExtArgs> = {}>(args?: Subset<T, User$RoutineSlotActivityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.Term
   */
  export type User$TermArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    where?: TermWhereInput
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    cursor?: TermWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * User.Thread
   */
  export type User$ThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    where?: ThreadWhereInput
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    cursor?: ThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * User.Project
   */
  export type User$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.Goal
   */
  export type User$GoalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * User.Process
   */
  export type User$ProcessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    cursor?: ProcessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * User.Problem
   */
  export type User$ProblemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    cursor?: ProblemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * User.Task
   */
  export type User$TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.Activity
   */
  export type User$ActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * User.Attempt
   */
  export type User$AttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    where?: AttemptWhereInput
    orderBy?: AttemptOrderByWithRelationInput | AttemptOrderByWithRelationInput[]
    cursor?: AttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttemptScalarFieldEnum | AttemptScalarFieldEnum[]
  }

  /**
   * User.Comment
   */
  export type User$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.Resource
   */
  export type User$ResourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    where?: ResourceWhereInput
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    cursor?: ResourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * User.Review
   */
  export type User$ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.Team
   */
  export type User$TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * User.TeamMember
   */
  export type User$TeamMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * User.Path
   */
  export type User$PathArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    where?: PathWhereInput
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    cursor?: PathWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }

  /**
   * User.Routine
   */
  export type User$RoutineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    cursor?: RoutineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }

  /**
   * User.RoutineSlot
   */
  export type User$RoutineSlotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    where?: RoutineSlotWhereInput
    orderBy?: RoutineSlotOrderByWithRelationInput | RoutineSlotOrderByWithRelationInput[]
    cursor?: RoutineSlotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotScalarFieldEnum | RoutineSlotScalarFieldEnum[]
  }

  /**
   * User.RoutineSlotThread
   */
  export type User$RoutineSlotThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    where?: RoutineSlotThreadWhereInput
    orderBy?: RoutineSlotThreadOrderByWithRelationInput | RoutineSlotThreadOrderByWithRelationInput[]
    cursor?: RoutineSlotThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotThreadScalarFieldEnum | RoutineSlotThreadScalarFieldEnum[]
  }

  /**
   * User.RoutineSlotTask
   */
  export type User$RoutineSlotTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    where?: RoutineSlotTaskWhereInput
    orderBy?: RoutineSlotTaskOrderByWithRelationInput | RoutineSlotTaskOrderByWithRelationInput[]
    cursor?: RoutineSlotTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotTaskScalarFieldEnum | RoutineSlotTaskScalarFieldEnum[]
  }

  /**
   * User.RoutineSlotActivity
   */
  export type User$RoutineSlotActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    where?: RoutineSlotActivityWhereInput
    orderBy?: RoutineSlotActivityOrderByWithRelationInput | RoutineSlotActivityOrderByWithRelationInput[]
    cursor?: RoutineSlotActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotActivityScalarFieldEnum | RoutineSlotActivityScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Term
   */

  export type AggregateTerm = {
    _count: TermCountAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  export type TermMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: $Enums.TermKind | null
    derivedFromId: string | null
    layer: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TermMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: $Enums.TermKind | null
    derivedFromId: string | null
    layer: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TermCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    derivedFromId: number
    layer: number
    meta: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TermMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    derivedFromId?: true
    layer?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TermMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    derivedFromId?: true
    layer?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TermCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    derivedFromId?: true
    layer?: true
    meta?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TermAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Term to aggregate.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermMaxAggregateInputType
  }

  export type GetTermAggregateType<T extends TermAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm[P]>
      : GetScalarType<T[P], AggregateTerm[P]>
  }




  export type TermGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
    orderBy?: TermOrderByWithAggregationInput | TermOrderByWithAggregationInput[]
    by: TermScalarFieldEnum[] | TermScalarFieldEnum
    having?: TermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermCountAggregateInputType | true
    _min?: TermMinAggregateInputType
    _max?: TermMaxAggregateInputType
  }

  export type TermGroupByOutputType = {
    id: string
    name: string
    description: string | null
    type: $Enums.TermKind
    derivedFromId: string | null
    layer: string | null
    meta: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TermCountAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  type GetTermGroupByPayload<T extends TermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermGroupByOutputType[P]>
            : GetScalarType<T[P], TermGroupByOutputType[P]>
        }
      >
    >


  export type TermSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    derivedFromId?: boolean
    layer?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Term$userArgs<ExtArgs>
    derivedFrom?: boolean | Term$derivedFromArgs<ExtArgs>
    derivedTerms?: boolean | Term$derivedTermsArgs<ExtArgs>
    threads?: boolean | Term$threadsArgs<ExtArgs>
    paths?: boolean | Term$pathsArgs<ExtArgs>
    _count?: boolean | TermCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["term"]>



  export type TermSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    derivedFromId?: boolean
    layer?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TermOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "type" | "derivedFromId" | "layer" | "meta" | "createdAt" | "updatedAt", ExtArgs["result"]["term"]>
  export type TermInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Term$userArgs<ExtArgs>
    derivedFrom?: boolean | Term$derivedFromArgs<ExtArgs>
    derivedTerms?: boolean | Term$derivedTermsArgs<ExtArgs>
    threads?: boolean | Term$threadsArgs<ExtArgs>
    paths?: boolean | Term$pathsArgs<ExtArgs>
    _count?: boolean | TermCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TermPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Term"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      derivedFrom: Prisma.$TermPayload<ExtArgs> | null
      derivedTerms: Prisma.$TermPayload<ExtArgs>[]
      threads: Prisma.$ThreadPayload<ExtArgs>[]
      paths: Prisma.$PathPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      type: $Enums.TermKind
      derivedFromId: string | null
      layer: string | null
      meta: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["term"]>
    composites: {}
  }

  type TermGetPayload<S extends boolean | null | undefined | TermDefaultArgs> = $Result.GetResult<Prisma.$TermPayload, S>

  type TermCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TermCountAggregateInputType | true
    }

  export interface TermDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term'], meta: { name: 'Term' } }
    /**
     * Find zero or one Term that matches the filter.
     * @param {TermFindUniqueArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TermFindUniqueArgs>(args: SelectSubset<T, TermFindUniqueArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Term that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TermFindUniqueOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TermFindUniqueOrThrowArgs>(args: SelectSubset<T, TermFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Term that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TermFindFirstArgs>(args?: SelectSubset<T, TermFindFirstArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Term that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TermFindFirstOrThrowArgs>(args?: SelectSubset<T, TermFindFirstOrThrowArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.term.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.term.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TermFindManyArgs>(args?: SelectSubset<T, TermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Term.
     * @param {TermCreateArgs} args - Arguments to create a Term.
     * @example
     * // Create one Term
     * const Term = await prisma.term.create({
     *   data: {
     *     // ... data to create a Term
     *   }
     * })
     * 
     */
    create<T extends TermCreateArgs>(args: SelectSubset<T, TermCreateArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Terms.
     * @param {TermCreateManyArgs} args - Arguments to create many Terms.
     * @example
     * // Create many Terms
     * const term = await prisma.term.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TermCreateManyArgs>(args?: SelectSubset<T, TermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Term.
     * @param {TermDeleteArgs} args - Arguments to delete one Term.
     * @example
     * // Delete one Term
     * const Term = await prisma.term.delete({
     *   where: {
     *     // ... filter to delete one Term
     *   }
     * })
     * 
     */
    delete<T extends TermDeleteArgs>(args: SelectSubset<T, TermDeleteArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Term.
     * @param {TermUpdateArgs} args - Arguments to update one Term.
     * @example
     * // Update one Term
     * const term = await prisma.term.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TermUpdateArgs>(args: SelectSubset<T, TermUpdateArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Terms.
     * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.term.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TermDeleteManyArgs>(args?: SelectSubset<T, TermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TermUpdateManyArgs>(args: SelectSubset<T, TermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Term.
     * @param {TermUpsertArgs} args - Arguments to update or create a Term.
     * @example
     * // Update or create a Term
     * const term = await prisma.term.upsert({
     *   create: {
     *     // ... data to create a Term
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term we want to update
     *   }
     * })
     */
    upsert<T extends TermUpsertArgs>(args: SelectSubset<T, TermUpsertArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Terms that matches the filter.
     * @param {TermFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const term = await prisma.term.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TermFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Term.
     * @param {TermAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const term = await prisma.term.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TermAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.term.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermCountArgs>(
      args?: Subset<T, TermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermAggregateArgs>(args: Subset<T, TermAggregateArgs>): Prisma.PrismaPromise<GetTermAggregateType<T>>

    /**
     * Group by Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermGroupByArgs['orderBy'] }
        : { orderBy?: TermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Term model
   */
  readonly fields: TermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Term$userArgs<ExtArgs> = {}>(args?: Subset<T, Term$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    derivedFrom<T extends Term$derivedFromArgs<ExtArgs> = {}>(args?: Subset<T, Term$derivedFromArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    derivedTerms<T extends Term$derivedTermsArgs<ExtArgs> = {}>(args?: Subset<T, Term$derivedTermsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    threads<T extends Term$threadsArgs<ExtArgs> = {}>(args?: Subset<T, Term$threadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paths<T extends Term$pathsArgs<ExtArgs> = {}>(args?: Subset<T, Term$pathsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Term model
   */
  interface TermFieldRefs {
    readonly id: FieldRef<"Term", 'String'>
    readonly name: FieldRef<"Term", 'String'>
    readonly description: FieldRef<"Term", 'String'>
    readonly type: FieldRef<"Term", 'TermKind'>
    readonly derivedFromId: FieldRef<"Term", 'String'>
    readonly layer: FieldRef<"Term", 'String'>
    readonly meta: FieldRef<"Term", 'Json'>
    readonly createdAt: FieldRef<"Term", 'DateTime'>
    readonly updatedAt: FieldRef<"Term", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Term findUnique
   */
  export type TermFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term findUniqueOrThrow
   */
  export type TermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term findFirst
   */
  export type TermFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term findFirstOrThrow
   */
  export type TermFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term findMany
   */
  export type TermFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Terms to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term create
   */
  export type TermCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The data needed to create a Term.
     */
    data: XOR<TermCreateInput, TermUncheckedCreateInput>
  }

  /**
   * Term createMany
   */
  export type TermCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Terms.
     */
    data: TermCreateManyInput | TermCreateManyInput[]
  }

  /**
   * Term update
   */
  export type TermUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The data needed to update a Term.
     */
    data: XOR<TermUpdateInput, TermUncheckedUpdateInput>
    /**
     * Choose, which Term to update.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term updateMany
   */
  export type TermUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Terms.
     */
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to update.
     */
    limit?: number
  }

  /**
   * Term upsert
   */
  export type TermUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The filter to search for the Term to update in case it exists.
     */
    where: TermWhereUniqueInput
    /**
     * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
     */
    create: XOR<TermCreateInput, TermUncheckedCreateInput>
    /**
     * In case the Term was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermUpdateInput, TermUncheckedUpdateInput>
  }

  /**
   * Term delete
   */
  export type TermDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter which Term to delete.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term deleteMany
   */
  export type TermDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Terms to delete
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to delete.
     */
    limit?: number
  }

  /**
   * Term findRaw
   */
  export type TermFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Term aggregateRaw
   */
  export type TermAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Term.user
   */
  export type Term$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Term.derivedFrom
   */
  export type Term$derivedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    where?: TermWhereInput
  }

  /**
   * Term.derivedTerms
   */
  export type Term$derivedTermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
    where?: TermWhereInput
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    cursor?: TermWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term.threads
   */
  export type Term$threadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    where?: ThreadWhereInput
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    cursor?: ThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Term.paths
   */
  export type Term$pathsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    where?: PathWhereInput
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    cursor?: PathWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }

  /**
   * Term without action
   */
  export type TermDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermInclude<ExtArgs> | null
  }


  /**
   * Model Thread
   */

  export type AggregateThread = {
    _count: ThreadCountAggregateOutputType | null
    _min: ThreadMinAggregateOutputType | null
    _max: ThreadMaxAggregateOutputType | null
  }

  export type ThreadMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    termId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThreadMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    termId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThreadCountAggregateOutputType = {
    id: number
    name: number
    description: number
    termId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ThreadMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    termId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThreadMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    termId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThreadCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    termId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Thread to aggregate.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Threads
    **/
    _count?: true | ThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreadMaxAggregateInputType
  }

  export type GetThreadAggregateType<T extends ThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThread[P]>
      : GetScalarType<T[P], AggregateThread[P]>
  }




  export type ThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreadWhereInput
    orderBy?: ThreadOrderByWithAggregationInput | ThreadOrderByWithAggregationInput[]
    by: ThreadScalarFieldEnum[] | ThreadScalarFieldEnum
    having?: ThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreadCountAggregateInputType | true
    _min?: ThreadMinAggregateInputType
    _max?: ThreadMaxAggregateInputType
  }

  export type ThreadGroupByOutputType = {
    id: string
    name: string
    description: string | null
    termId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ThreadCountAggregateOutputType | null
    _min: ThreadMinAggregateOutputType | null
    _max: ThreadMaxAggregateOutputType | null
  }

  type GetThreadGroupByPayload<T extends ThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreadGroupByOutputType[P]>
            : GetScalarType<T[P], ThreadGroupByOutputType[P]>
        }
      >
    >


  export type ThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    termId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Thread$userArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
    projects?: boolean | Thread$projectsArgs<ExtArgs>
    _count?: boolean | ThreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thread"]>



  export type ThreadSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    termId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "termId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["thread"]>
  export type ThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Thread$userArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
    projects?: boolean | Thread$projectsArgs<ExtArgs>
    _count?: boolean | ThreadCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Thread"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      term: Prisma.$TermPayload<ExtArgs>
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      termId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["thread"]>
    composites: {}
  }

  type ThreadGetPayload<S extends boolean | null | undefined | ThreadDefaultArgs> = $Result.GetResult<Prisma.$ThreadPayload, S>

  type ThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThreadCountAggregateInputType | true
    }

  export interface ThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Thread'], meta: { name: 'Thread' } }
    /**
     * Find zero or one Thread that matches the filter.
     * @param {ThreadFindUniqueArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThreadFindUniqueArgs>(args: SelectSubset<T, ThreadFindUniqueArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thread that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThreadFindUniqueOrThrowArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, ThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadFindFirstArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThreadFindFirstArgs>(args?: SelectSubset<T, ThreadFindFirstArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadFindFirstOrThrowArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, ThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Threads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threads
     * const threads = await prisma.thread.findMany()
     * 
     * // Get first 10 Threads
     * const threads = await prisma.thread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const threadWithIdOnly = await prisma.thread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThreadFindManyArgs>(args?: SelectSubset<T, ThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thread.
     * @param {ThreadCreateArgs} args - Arguments to create a Thread.
     * @example
     * // Create one Thread
     * const Thread = await prisma.thread.create({
     *   data: {
     *     // ... data to create a Thread
     *   }
     * })
     * 
     */
    create<T extends ThreadCreateArgs>(args: SelectSubset<T, ThreadCreateArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Threads.
     * @param {ThreadCreateManyArgs} args - Arguments to create many Threads.
     * @example
     * // Create many Threads
     * const thread = await prisma.thread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThreadCreateManyArgs>(args?: SelectSubset<T, ThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thread.
     * @param {ThreadDeleteArgs} args - Arguments to delete one Thread.
     * @example
     * // Delete one Thread
     * const Thread = await prisma.thread.delete({
     *   where: {
     *     // ... filter to delete one Thread
     *   }
     * })
     * 
     */
    delete<T extends ThreadDeleteArgs>(args: SelectSubset<T, ThreadDeleteArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thread.
     * @param {ThreadUpdateArgs} args - Arguments to update one Thread.
     * @example
     * // Update one Thread
     * const thread = await prisma.thread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThreadUpdateArgs>(args: SelectSubset<T, ThreadUpdateArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Threads.
     * @param {ThreadDeleteManyArgs} args - Arguments to filter Threads to delete.
     * @example
     * // Delete a few Threads
     * const { count } = await prisma.thread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThreadDeleteManyArgs>(args?: SelectSubset<T, ThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threads
     * const thread = await prisma.thread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThreadUpdateManyArgs>(args: SelectSubset<T, ThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thread.
     * @param {ThreadUpsertArgs} args - Arguments to update or create a Thread.
     * @example
     * // Update or create a Thread
     * const thread = await prisma.thread.upsert({
     *   create: {
     *     // ... data to create a Thread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thread we want to update
     *   }
     * })
     */
    upsert<T extends ThreadUpsertArgs>(args: SelectSubset<T, ThreadUpsertArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Threads that matches the filter.
     * @param {ThreadFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const thread = await prisma.thread.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ThreadFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Thread.
     * @param {ThreadAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const thread = await prisma.thread.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ThreadAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadCountArgs} args - Arguments to filter Threads to count.
     * @example
     * // Count the number of Threads
     * const count = await prisma.thread.count({
     *   where: {
     *     // ... the filter for the Threads we want to count
     *   }
     * })
    **/
    count<T extends ThreadCountArgs>(
      args?: Subset<T, ThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreadAggregateArgs>(args: Subset<T, ThreadAggregateArgs>): Prisma.PrismaPromise<GetThreadAggregateType<T>>

    /**
     * Group by Thread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThreadGroupByArgs['orderBy'] }
        : { orderBy?: ThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Thread model
   */
  readonly fields: ThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Thread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Thread$userArgs<ExtArgs> = {}>(args?: Subset<T, Thread$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    term<T extends TermDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TermDefaultArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    projects<T extends Thread$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Thread$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Thread model
   */
  interface ThreadFieldRefs {
    readonly id: FieldRef<"Thread", 'String'>
    readonly name: FieldRef<"Thread", 'String'>
    readonly description: FieldRef<"Thread", 'String'>
    readonly termId: FieldRef<"Thread", 'String'>
    readonly meta: FieldRef<"Thread", 'Json'>
    readonly lastWorkedAt: FieldRef<"Thread", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Thread", 'Json'>
    readonly threadRoutine: FieldRef<"Thread", 'Json'>
    readonly createdAt: FieldRef<"Thread", 'DateTime'>
    readonly updatedAt: FieldRef<"Thread", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Thread findUnique
   */
  export type ThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread findUniqueOrThrow
   */
  export type ThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread findFirst
   */
  export type ThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threads.
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threads.
     */
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Thread findFirstOrThrow
   */
  export type ThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threads.
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threads.
     */
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Thread findMany
   */
  export type ThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Threads.
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Thread create
   */
  export type ThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a Thread.
     */
    data: XOR<ThreadCreateInput, ThreadUncheckedCreateInput>
  }

  /**
   * Thread createMany
   */
  export type ThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Threads.
     */
    data: ThreadCreateManyInput | ThreadCreateManyInput[]
  }

  /**
   * Thread update
   */
  export type ThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a Thread.
     */
    data: XOR<ThreadUpdateInput, ThreadUncheckedUpdateInput>
    /**
     * Choose, which Thread to update.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread updateMany
   */
  export type ThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Threads.
     */
    data: XOR<ThreadUpdateManyMutationInput, ThreadUncheckedUpdateManyInput>
    /**
     * Filter which Threads to update
     */
    where?: ThreadWhereInput
    /**
     * Limit how many Threads to update.
     */
    limit?: number
  }

  /**
   * Thread upsert
   */
  export type ThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the Thread to update in case it exists.
     */
    where: ThreadWhereUniqueInput
    /**
     * In case the Thread found by the `where` argument doesn't exist, create a new Thread with this data.
     */
    create: XOR<ThreadCreateInput, ThreadUncheckedCreateInput>
    /**
     * In case the Thread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThreadUpdateInput, ThreadUncheckedUpdateInput>
  }

  /**
   * Thread delete
   */
  export type ThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter which Thread to delete.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread deleteMany
   */
  export type ThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threads to delete
     */
    where?: ThreadWhereInput
    /**
     * Limit how many Threads to delete.
     */
    limit?: number
  }

  /**
   * Thread findRaw
   */
  export type ThreadFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Thread aggregateRaw
   */
  export type ThreadAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Thread.user
   */
  export type Thread$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Thread.projects
   */
  export type Thread$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Thread without action
   */
  export type ThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    threadId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    threadId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    threadId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    threadId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    threadId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    threadId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    threadId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    threadId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Project$userArgs<ExtArgs>
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
    goals?: boolean | Project$goalsArgs<ExtArgs>
    teams?: boolean | Project$teamsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>



  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    threadId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "threadId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Project$userArgs<ExtArgs>
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
    goals?: boolean | Project$goalsArgs<ExtArgs>
    teams?: boolean | Project$teamsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      thread: Prisma.$ThreadPayload<ExtArgs>
      goals: Prisma.$GoalPayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      threadId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {ProjectFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const project = await prisma.project.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProjectFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Project.
     * @param {ProjectAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const project = await prisma.project.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProjectAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Project$userArgs<ExtArgs> = {}>(args?: Subset<T, Project$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    thread<T extends ThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThreadDefaultArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    goals<T extends Project$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Project$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends Project$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Project$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly threadId: FieldRef<"Project", 'String'>
    readonly meta: FieldRef<"Project", 'Json'>
    readonly lastWorkedAt: FieldRef<"Project", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Project", 'Json'>
    readonly threadRoutine: FieldRef<"Project", 'Json'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project findRaw
   */
  export type ProjectFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project aggregateRaw
   */
  export type ProjectAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project.user
   */
  export type Project$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Project.goals
   */
  export type Project$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Project.teams
   */
  export type Project$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: $Enums.GoalType | null
    projectId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: $Enums.GoalType | null
    projectId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    projectId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GoalMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    projectId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    projectId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    projectId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    name: string
    description: string | null
    type: $Enums.GoalType
    projectId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: GoalCountAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    projectId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Goal$userArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processes?: boolean | Goal$processesArgs<ExtArgs>
    pathsFromTerm?: boolean | Goal$pathsFromTermArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>



  export type GoalSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    projectId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GoalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "type" | "projectId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["goal"]>
  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Goal$userArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processes?: boolean | Goal$processesArgs<ExtArgs>
    pathsFromTerm?: boolean | Goal$pathsFromTermArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs>
      processes: Prisma.$ProcessPayload<ExtArgs>[]
      pathsFromTerm: Prisma.$PathPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      type: $Enums.GoalType
      projectId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goals that matches the filter.
     * @param {GoalFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const goal = await prisma.goal.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: GoalFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Goal.
     * @param {GoalAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const goal = await prisma.goal.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: GoalAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Goal$userArgs<ExtArgs> = {}>(args?: Subset<T, Goal$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    processes<T extends Goal$processesArgs<ExtArgs> = {}>(args?: Subset<T, Goal$processesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pathsFromTerm<T extends Goal$pathsFromTermArgs<ExtArgs> = {}>(args?: Subset<T, Goal$pathsFromTermArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly name: FieldRef<"Goal", 'String'>
    readonly description: FieldRef<"Goal", 'String'>
    readonly type: FieldRef<"Goal", 'GoalType'>
    readonly projectId: FieldRef<"Goal", 'String'>
    readonly meta: FieldRef<"Goal", 'Json'>
    readonly lastWorkedAt: FieldRef<"Goal", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Goal", 'Json'>
    readonly threadRoutine: FieldRef<"Goal", 'Json'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to delete.
     */
    limit?: number
  }

  /**
   * Goal findRaw
   */
  export type GoalFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Goal aggregateRaw
   */
  export type GoalAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Goal.user
   */
  export type Goal$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Goal.processes
   */
  export type Goal$processesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    cursor?: ProcessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Goal.pathsFromTerm
   */
  export type Goal$pathsFromTermArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    where?: PathWhereInput
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    cursor?: PathWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model Process
   */

  export type AggregateProcess = {
    _count: ProcessCountAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  export type ProcessMinAggregateOutputType = {
    id: string | null
    name: string | null
    goalId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProcessMaxAggregateOutputType = {
    id: string | null
    name: string | null
    goalId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProcessCountAggregateOutputType = {
    id: number
    name: number
    goalId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProcessMinAggregateInputType = {
    id?: true
    name?: true
    goalId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProcessMaxAggregateInputType = {
    id?: true
    name?: true
    goalId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProcessCountAggregateInputType = {
    id?: true
    name?: true
    goalId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProcessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Process to aggregate.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Processes
    **/
    _count?: true | ProcessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessMaxAggregateInputType
  }

  export type GetProcessAggregateType<T extends ProcessAggregateArgs> = {
        [P in keyof T & keyof AggregateProcess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcess[P]>
      : GetScalarType<T[P], AggregateProcess[P]>
  }




  export type ProcessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithAggregationInput | ProcessOrderByWithAggregationInput[]
    by: ProcessScalarFieldEnum[] | ProcessScalarFieldEnum
    having?: ProcessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessCountAggregateInputType | true
    _min?: ProcessMinAggregateInputType
    _max?: ProcessMaxAggregateInputType
  }

  export type ProcessGroupByOutputType = {
    id: string
    name: string
    goalId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProcessCountAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  type GetProcessGroupByPayload<T extends ProcessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessGroupByOutputType[P]>
        }
      >
    >


  export type ProcessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goalId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Process$userArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    problems?: boolean | Process$problemsArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>



  export type ProcessSelectScalar = {
    id?: boolean
    name?: boolean
    goalId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProcessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "goalId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["process"]>
  export type ProcessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Process$userArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    problems?: boolean | Process$problemsArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProcessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Process"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      goal: Prisma.$GoalPayload<ExtArgs>
      problems: Prisma.$ProblemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      goalId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["process"]>
    composites: {}
  }

  type ProcessGetPayload<S extends boolean | null | undefined | ProcessDefaultArgs> = $Result.GetResult<Prisma.$ProcessPayload, S>

  type ProcessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProcessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProcessCountAggregateInputType | true
    }

  export interface ProcessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Process'], meta: { name: 'Process' } }
    /**
     * Find zero or one Process that matches the filter.
     * @param {ProcessFindUniqueArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessFindUniqueArgs>(args: SelectSubset<T, ProcessFindUniqueArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Process that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProcessFindUniqueOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Process that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessFindFirstArgs>(args?: SelectSubset<T, ProcessFindFirstArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Process that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Processes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Processes
     * const processes = await prisma.process.findMany()
     * 
     * // Get first 10 Processes
     * const processes = await prisma.process.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processWithIdOnly = await prisma.process.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessFindManyArgs>(args?: SelectSubset<T, ProcessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Process.
     * @param {ProcessCreateArgs} args - Arguments to create a Process.
     * @example
     * // Create one Process
     * const Process = await prisma.process.create({
     *   data: {
     *     // ... data to create a Process
     *   }
     * })
     * 
     */
    create<T extends ProcessCreateArgs>(args: SelectSubset<T, ProcessCreateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Processes.
     * @param {ProcessCreateManyArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessCreateManyArgs>(args?: SelectSubset<T, ProcessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Process.
     * @param {ProcessDeleteArgs} args - Arguments to delete one Process.
     * @example
     * // Delete one Process
     * const Process = await prisma.process.delete({
     *   where: {
     *     // ... filter to delete one Process
     *   }
     * })
     * 
     */
    delete<T extends ProcessDeleteArgs>(args: SelectSubset<T, ProcessDeleteArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Process.
     * @param {ProcessUpdateArgs} args - Arguments to update one Process.
     * @example
     * // Update one Process
     * const process = await prisma.process.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessUpdateArgs>(args: SelectSubset<T, ProcessUpdateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Processes.
     * @param {ProcessDeleteManyArgs} args - Arguments to filter Processes to delete.
     * @example
     * // Delete a few Processes
     * const { count } = await prisma.process.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessDeleteManyArgs>(args?: SelectSubset<T, ProcessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Processes
     * const process = await prisma.process.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessUpdateManyArgs>(args: SelectSubset<T, ProcessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Process.
     * @param {ProcessUpsertArgs} args - Arguments to update or create a Process.
     * @example
     * // Update or create a Process
     * const process = await prisma.process.upsert({
     *   create: {
     *     // ... data to create a Process
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Process we want to update
     *   }
     * })
     */
    upsert<T extends ProcessUpsertArgs>(args: SelectSubset<T, ProcessUpsertArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Processes that matches the filter.
     * @param {ProcessFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const process = await prisma.process.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProcessFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Process.
     * @param {ProcessAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const process = await prisma.process.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProcessAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessCountArgs} args - Arguments to filter Processes to count.
     * @example
     * // Count the number of Processes
     * const count = await prisma.process.count({
     *   where: {
     *     // ... the filter for the Processes we want to count
     *   }
     * })
    **/
    count<T extends ProcessCountArgs>(
      args?: Subset<T, ProcessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessAggregateArgs>(args: Subset<T, ProcessAggregateArgs>): Prisma.PrismaPromise<GetProcessAggregateType<T>>

    /**
     * Group by Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessGroupByArgs['orderBy'] }
        : { orderBy?: ProcessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Process model
   */
  readonly fields: ProcessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Process.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Process$userArgs<ExtArgs> = {}>(args?: Subset<T, Process$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    problems<T extends Process$problemsArgs<ExtArgs> = {}>(args?: Subset<T, Process$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Process model
   */
  interface ProcessFieldRefs {
    readonly id: FieldRef<"Process", 'String'>
    readonly name: FieldRef<"Process", 'String'>
    readonly goalId: FieldRef<"Process", 'String'>
    readonly meta: FieldRef<"Process", 'Json'>
    readonly lastWorkedAt: FieldRef<"Process", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Process", 'Json'>
    readonly threadRoutine: FieldRef<"Process", 'Json'>
    readonly createdAt: FieldRef<"Process", 'DateTime'>
    readonly updatedAt: FieldRef<"Process", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Process findUnique
   */
  export type ProcessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findUniqueOrThrow
   */
  export type ProcessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findFirst
   */
  export type ProcessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findFirstOrThrow
   */
  export type ProcessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findMany
   */
  export type ProcessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Processes to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process create
   */
  export type ProcessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to create a Process.
     */
    data: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
  }

  /**
   * Process createMany
   */
  export type ProcessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
  }

  /**
   * Process update
   */
  export type ProcessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to update a Process.
     */
    data: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
    /**
     * Choose, which Process to update.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process updateMany
   */
  export type ProcessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Processes.
     */
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyInput>
    /**
     * Filter which Processes to update
     */
    where?: ProcessWhereInput
    /**
     * Limit how many Processes to update.
     */
    limit?: number
  }

  /**
   * Process upsert
   */
  export type ProcessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The filter to search for the Process to update in case it exists.
     */
    where: ProcessWhereUniqueInput
    /**
     * In case the Process found by the `where` argument doesn't exist, create a new Process with this data.
     */
    create: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
    /**
     * In case the Process was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
  }

  /**
   * Process delete
   */
  export type ProcessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter which Process to delete.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process deleteMany
   */
  export type ProcessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Processes to delete
     */
    where?: ProcessWhereInput
    /**
     * Limit how many Processes to delete.
     */
    limit?: number
  }

  /**
   * Process findRaw
   */
  export type ProcessFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Process aggregateRaw
   */
  export type ProcessAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Process.user
   */
  export type Process$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Process.problems
   */
  export type Process$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    cursor?: ProblemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Process without action
   */
  export type ProcessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
  }


  /**
   * Model Problem
   */

  export type AggregateProblem = {
    _count: ProblemCountAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  export type ProblemMinAggregateOutputType = {
    id: string | null
    name: string | null
    processId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    processId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemCountAggregateOutputType = {
    id: number
    name: number
    processId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemMinAggregateInputType = {
    id?: true
    name?: true
    processId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemMaxAggregateInputType = {
    id?: true
    name?: true
    processId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemCountAggregateInputType = {
    id?: true
    name?: true
    processId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problem to aggregate.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Problems
    **/
    _count?: true | ProblemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemMaxAggregateInputType
  }

  export type GetProblemAggregateType<T extends ProblemAggregateArgs> = {
        [P in keyof T & keyof AggregateProblem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblem[P]>
      : GetScalarType<T[P], AggregateProblem[P]>
  }




  export type ProblemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithAggregationInput | ProblemOrderByWithAggregationInput[]
    by: ProblemScalarFieldEnum[] | ProblemScalarFieldEnum
    having?: ProblemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemCountAggregateInputType | true
    _min?: ProblemMinAggregateInputType
    _max?: ProblemMaxAggregateInputType
  }

  export type ProblemGroupByOutputType = {
    id: string
    name: string
    processId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProblemCountAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  type GetProblemGroupByPayload<T extends ProblemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemGroupByOutputType[P]>
        }
      >
    >


  export type ProblemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    processId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Problem$userArgs<ExtArgs>
    process?: boolean | ProcessDefaultArgs<ExtArgs>
    tasks?: boolean | Problem$tasksArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>



  export type ProblemSelectScalar = {
    id?: boolean
    name?: boolean
    processId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "processId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["problem"]>
  export type ProblemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Problem$userArgs<ExtArgs>
    process?: boolean | ProcessDefaultArgs<ExtArgs>
    tasks?: boolean | Problem$tasksArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProblemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Problem"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      process: Prisma.$ProcessPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      processId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problem"]>
    composites: {}
  }

  type ProblemGetPayload<S extends boolean | null | undefined | ProblemDefaultArgs> = $Result.GetResult<Prisma.$ProblemPayload, S>

  type ProblemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemCountAggregateInputType | true
    }

  export interface ProblemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Problem'], meta: { name: 'Problem' } }
    /**
     * Find zero or one Problem that matches the filter.
     * @param {ProblemFindUniqueArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemFindUniqueArgs>(args: SelectSubset<T, ProblemFindUniqueArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Problem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemFindUniqueOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemFindFirstArgs>(args?: SelectSubset<T, ProblemFindFirstArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problems
     * const problems = await prisma.problem.findMany()
     * 
     * // Get first 10 Problems
     * const problems = await prisma.problem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemWithIdOnly = await prisma.problem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemFindManyArgs>(args?: SelectSubset<T, ProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Problem.
     * @param {ProblemCreateArgs} args - Arguments to create a Problem.
     * @example
     * // Create one Problem
     * const Problem = await prisma.problem.create({
     *   data: {
     *     // ... data to create a Problem
     *   }
     * })
     * 
     */
    create<T extends ProblemCreateArgs>(args: SelectSubset<T, ProblemCreateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Problems.
     * @param {ProblemCreateManyArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemCreateManyArgs>(args?: SelectSubset<T, ProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Problem.
     * @param {ProblemDeleteArgs} args - Arguments to delete one Problem.
     * @example
     * // Delete one Problem
     * const Problem = await prisma.problem.delete({
     *   where: {
     *     // ... filter to delete one Problem
     *   }
     * })
     * 
     */
    delete<T extends ProblemDeleteArgs>(args: SelectSubset<T, ProblemDeleteArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Problem.
     * @param {ProblemUpdateArgs} args - Arguments to update one Problem.
     * @example
     * // Update one Problem
     * const problem = await prisma.problem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemUpdateArgs>(args: SelectSubset<T, ProblemUpdateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Problems.
     * @param {ProblemDeleteManyArgs} args - Arguments to filter Problems to delete.
     * @example
     * // Delete a few Problems
     * const { count } = await prisma.problem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemDeleteManyArgs>(args?: SelectSubset<T, ProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemUpdateManyArgs>(args: SelectSubset<T, ProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Problem.
     * @param {ProblemUpsertArgs} args - Arguments to update or create a Problem.
     * @example
     * // Update or create a Problem
     * const problem = await prisma.problem.upsert({
     *   create: {
     *     // ... data to create a Problem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problem we want to update
     *   }
     * })
     */
    upsert<T extends ProblemUpsertArgs>(args: SelectSubset<T, ProblemUpsertArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Problems that matches the filter.
     * @param {ProblemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const problem = await prisma.problem.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProblemFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Problem.
     * @param {ProblemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const problem = await prisma.problem.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProblemAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCountArgs} args - Arguments to filter Problems to count.
     * @example
     * // Count the number of Problems
     * const count = await prisma.problem.count({
     *   where: {
     *     // ... the filter for the Problems we want to count
     *   }
     * })
    **/
    count<T extends ProblemCountArgs>(
      args?: Subset<T, ProblemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemAggregateArgs>(args: Subset<T, ProblemAggregateArgs>): Prisma.PrismaPromise<GetProblemAggregateType<T>>

    /**
     * Group by Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemGroupByArgs['orderBy'] }
        : { orderBy?: ProblemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Problem model
   */
  readonly fields: ProblemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Problem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Problem$userArgs<ExtArgs> = {}>(args?: Subset<T, Problem$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    process<T extends ProcessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcessDefaultArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends Problem$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Problem$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Problem model
   */
  interface ProblemFieldRefs {
    readonly id: FieldRef<"Problem", 'String'>
    readonly name: FieldRef<"Problem", 'String'>
    readonly processId: FieldRef<"Problem", 'String'>
    readonly meta: FieldRef<"Problem", 'Json'>
    readonly lastWorkedAt: FieldRef<"Problem", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Problem", 'Json'>
    readonly threadRoutine: FieldRef<"Problem", 'Json'>
    readonly createdAt: FieldRef<"Problem", 'DateTime'>
    readonly updatedAt: FieldRef<"Problem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Problem findUnique
   */
  export type ProblemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findUniqueOrThrow
   */
  export type ProblemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findFirst
   */
  export type ProblemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findFirstOrThrow
   */
  export type ProblemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findMany
   */
  export type ProblemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem create
   */
  export type ProblemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to create a Problem.
     */
    data: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
  }

  /**
   * Problem createMany
   */
  export type ProblemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
  }

  /**
   * Problem update
   */
  export type ProblemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to update a Problem.
     */
    data: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
    /**
     * Choose, which Problem to update.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem updateMany
   */
  export type ProblemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
  }

  /**
   * Problem upsert
   */
  export type ProblemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The filter to search for the Problem to update in case it exists.
     */
    where: ProblemWhereUniqueInput
    /**
     * In case the Problem found by the `where` argument doesn't exist, create a new Problem with this data.
     */
    create: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
    /**
     * In case the Problem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
  }

  /**
   * Problem delete
   */
  export type ProblemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter which Problem to delete.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem deleteMany
   */
  export type ProblemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problems to delete
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to delete.
     */
    limit?: number
  }

  /**
   * Problem findRaw
   */
  export type ProblemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Problem aggregateRaw
   */
  export type ProblemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Problem.user
   */
  export type Problem$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Problem.tasks
   */
  export type Problem$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Problem without action
   */
  export type ProblemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    name: string | null
    problemId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    name: string | null
    problemId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    name: number
    problemId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    name?: true
    problemId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    name?: true
    problemId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    name?: true
    problemId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    name: string
    problemId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    problemId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Task$userArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    activities?: boolean | Task$activitiesArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>



  export type TaskSelectScalar = {
    id?: boolean
    name?: boolean
    problemId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "problemId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Task$userArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    activities?: boolean | Task$activitiesArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      problem: Prisma.$ProblemPayload<ExtArgs>
      activities: Prisma.$ActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      problemId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * @param {TaskFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const task = await prisma.task.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TaskFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Task.
     * @param {TaskAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const task = await prisma.task.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TaskAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Task$userArgs<ExtArgs> = {}>(args?: Subset<T, Task$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    activities<T extends Task$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Task$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly name: FieldRef<"Task", 'String'>
    readonly problemId: FieldRef<"Task", 'String'>
    readonly meta: FieldRef<"Task", 'Json'>
    readonly lastWorkedAt: FieldRef<"Task", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Task", 'Json'>
    readonly threadRoutine: FieldRef<"Task", 'Json'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task findRaw
   */
  export type TaskFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Task aggregateRaw
   */
  export type TaskAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Task.user
   */
  export type Task$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task.activities
   */
  export type Task$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityMinAggregateOutputType = {
    id: string | null
    name: string | null
    taskId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    taskId: string | null
    lastWorkedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    name: number
    taskId: number
    meta: number
    lastWorkedAt: number
    daytimeRoutine: number
    threadRoutine: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ActivityMinAggregateInputType = {
    id?: true
    name?: true
    taskId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    name?: true
    taskId?: true
    lastWorkedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    name?: true
    taskId?: true
    meta?: true
    lastWorkedAt?: true
    daytimeRoutine?: true
    threadRoutine?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: string
    name: string
    taskId: string
    meta: JsonValue | null
    lastWorkedAt: Date | null
    daytimeRoutine: JsonValue | null
    threadRoutine: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    taskId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Activity$userArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    attempts?: boolean | Activity$attemptsArgs<ExtArgs>
    comments?: boolean | Activity$commentsArgs<ExtArgs>
    resources?: boolean | Activity$resourcesArgs<ExtArgs>
    reviews?: boolean | Activity$reviewsArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>



  export type ActivitySelectScalar = {
    id?: boolean
    name?: boolean
    taskId?: boolean
    meta?: boolean
    lastWorkedAt?: boolean
    daytimeRoutine?: boolean
    threadRoutine?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "taskId" | "meta" | "lastWorkedAt" | "daytimeRoutine" | "threadRoutine" | "createdAt" | "updatedAt", ExtArgs["result"]["activity"]>
  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Activity$userArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    attempts?: boolean | Activity$attemptsArgs<ExtArgs>
    comments?: boolean | Activity$commentsArgs<ExtArgs>
    resources?: boolean | Activity$resourcesArgs<ExtArgs>
    reviews?: boolean | Activity$reviewsArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs>
      attempts: Prisma.$AttemptPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      resources: Prisma.$ResourcePayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      taskId: string
      meta: Prisma.JsonValue | null
      lastWorkedAt: Date | null
      daytimeRoutine: Prisma.JsonValue | null
      threadRoutine: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * @param {ActivityFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const activity = await prisma.activity.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ActivityFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Activity.
     * @param {ActivityAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const activity = await prisma.activity.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ActivityAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Activity$userArgs<ExtArgs> = {}>(args?: Subset<T, Activity$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attempts<T extends Activity$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Activity$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resources<T extends Activity$resourcesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$resourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Activity$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'String'>
    readonly name: FieldRef<"Activity", 'String'>
    readonly taskId: FieldRef<"Activity", 'String'>
    readonly meta: FieldRef<"Activity", 'Json'>
    readonly lastWorkedAt: FieldRef<"Activity", 'DateTime'>
    readonly daytimeRoutine: FieldRef<"Activity", 'Json'>
    readonly threadRoutine: FieldRef<"Activity", 'Json'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly updatedAt: FieldRef<"Activity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to delete.
     */
    limit?: number
  }

  /**
   * Activity findRaw
   */
  export type ActivityFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Activity aggregateRaw
   */
  export type ActivityAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Activity.user
   */
  export type Activity$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Activity.attempts
   */
  export type Activity$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    where?: AttemptWhereInput
    orderBy?: AttemptOrderByWithRelationInput | AttemptOrderByWithRelationInput[]
    cursor?: AttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttemptScalarFieldEnum | AttemptScalarFieldEnum[]
  }

  /**
   * Activity.comments
   */
  export type Activity$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Activity.resources
   */
  export type Activity$resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    where?: ResourceWhereInput
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    cursor?: ResourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Activity.reviews
   */
  export type Activity$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Model Attempt
   */

  export type AggregateAttempt = {
    _count: AttemptCountAggregateOutputType | null
    _min: AttemptMinAggregateOutputType | null
    _max: AttemptMaxAggregateOutputType | null
  }

  export type AttemptMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    result: string | null
    createdAt: Date | null
  }

  export type AttemptMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    result: string | null
    createdAt: Date | null
  }

  export type AttemptCountAggregateOutputType = {
    id: number
    activityId: number
    result: number
    createdAt: number
    _all: number
  }


  export type AttemptMinAggregateInputType = {
    id?: true
    activityId?: true
    result?: true
    createdAt?: true
  }

  export type AttemptMaxAggregateInputType = {
    id?: true
    activityId?: true
    result?: true
    createdAt?: true
  }

  export type AttemptCountAggregateInputType = {
    id?: true
    activityId?: true
    result?: true
    createdAt?: true
    _all?: true
  }

  export type AttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attempt to aggregate.
     */
    where?: AttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attempts to fetch.
     */
    orderBy?: AttemptOrderByWithRelationInput | AttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attempts
    **/
    _count?: true | AttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttemptMaxAggregateInputType
  }

  export type GetAttemptAggregateType<T extends AttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttempt[P]>
      : GetScalarType<T[P], AggregateAttempt[P]>
  }




  export type AttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttemptWhereInput
    orderBy?: AttemptOrderByWithAggregationInput | AttemptOrderByWithAggregationInput[]
    by: AttemptScalarFieldEnum[] | AttemptScalarFieldEnum
    having?: AttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttemptCountAggregateInputType | true
    _min?: AttemptMinAggregateInputType
    _max?: AttemptMaxAggregateInputType
  }

  export type AttemptGroupByOutputType = {
    id: string
    activityId: string
    result: string | null
    createdAt: Date
    _count: AttemptCountAggregateOutputType | null
    _min: AttemptMinAggregateOutputType | null
    _max: AttemptMaxAggregateOutputType | null
  }

  type GetAttemptGroupByPayload<T extends AttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttemptGroupByOutputType[P]>
            : GetScalarType<T[P], AttemptGroupByOutputType[P]>
        }
      >
    >


  export type AttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    result?: boolean
    createdAt?: boolean
    user?: boolean | Attempt$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attempt"]>



  export type AttemptSelectScalar = {
    id?: boolean
    activityId?: boolean
    result?: boolean
    createdAt?: boolean
  }

  export type AttemptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "result" | "createdAt", ExtArgs["result"]["attempt"]>
  export type AttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Attempt$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $AttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attempt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      result: string | null
      createdAt: Date
    }, ExtArgs["result"]["attempt"]>
    composites: {}
  }

  type AttemptGetPayload<S extends boolean | null | undefined | AttemptDefaultArgs> = $Result.GetResult<Prisma.$AttemptPayload, S>

  type AttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttemptCountAggregateInputType | true
    }

  export interface AttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attempt'], meta: { name: 'Attempt' } }
    /**
     * Find zero or one Attempt that matches the filter.
     * @param {AttemptFindUniqueArgs} args - Arguments to find a Attempt
     * @example
     * // Get one Attempt
     * const attempt = await prisma.attempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttemptFindUniqueArgs>(args: SelectSubset<T, AttemptFindUniqueArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attempt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttemptFindUniqueOrThrowArgs} args - Arguments to find a Attempt
     * @example
     * // Get one Attempt
     * const attempt = await prisma.attempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, AttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptFindFirstArgs} args - Arguments to find a Attempt
     * @example
     * // Get one Attempt
     * const attempt = await prisma.attempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttemptFindFirstArgs>(args?: SelectSubset<T, AttemptFindFirstArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptFindFirstOrThrowArgs} args - Arguments to find a Attempt
     * @example
     * // Get one Attempt
     * const attempt = await prisma.attempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, AttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attempts
     * const attempts = await prisma.attempt.findMany()
     * 
     * // Get first 10 Attempts
     * const attempts = await prisma.attempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attemptWithIdOnly = await prisma.attempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttemptFindManyArgs>(args?: SelectSubset<T, AttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attempt.
     * @param {AttemptCreateArgs} args - Arguments to create a Attempt.
     * @example
     * // Create one Attempt
     * const Attempt = await prisma.attempt.create({
     *   data: {
     *     // ... data to create a Attempt
     *   }
     * })
     * 
     */
    create<T extends AttemptCreateArgs>(args: SelectSubset<T, AttemptCreateArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attempts.
     * @param {AttemptCreateManyArgs} args - Arguments to create many Attempts.
     * @example
     * // Create many Attempts
     * const attempt = await prisma.attempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttemptCreateManyArgs>(args?: SelectSubset<T, AttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attempt.
     * @param {AttemptDeleteArgs} args - Arguments to delete one Attempt.
     * @example
     * // Delete one Attempt
     * const Attempt = await prisma.attempt.delete({
     *   where: {
     *     // ... filter to delete one Attempt
     *   }
     * })
     * 
     */
    delete<T extends AttemptDeleteArgs>(args: SelectSubset<T, AttemptDeleteArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attempt.
     * @param {AttemptUpdateArgs} args - Arguments to update one Attempt.
     * @example
     * // Update one Attempt
     * const attempt = await prisma.attempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttemptUpdateArgs>(args: SelectSubset<T, AttemptUpdateArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attempts.
     * @param {AttemptDeleteManyArgs} args - Arguments to filter Attempts to delete.
     * @example
     * // Delete a few Attempts
     * const { count } = await prisma.attempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttemptDeleteManyArgs>(args?: SelectSubset<T, AttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attempts
     * const attempt = await prisma.attempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttemptUpdateManyArgs>(args: SelectSubset<T, AttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attempt.
     * @param {AttemptUpsertArgs} args - Arguments to update or create a Attempt.
     * @example
     * // Update or create a Attempt
     * const attempt = await prisma.attempt.upsert({
     *   create: {
     *     // ... data to create a Attempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attempt we want to update
     *   }
     * })
     */
    upsert<T extends AttemptUpsertArgs>(args: SelectSubset<T, AttemptUpsertArgs<ExtArgs>>): Prisma__AttemptClient<$Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attempts that matches the filter.
     * @param {AttemptFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const attempt = await prisma.attempt.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AttemptFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Attempt.
     * @param {AttemptAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const attempt = await prisma.attempt.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AttemptAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Attempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptCountArgs} args - Arguments to filter Attempts to count.
     * @example
     * // Count the number of Attempts
     * const count = await prisma.attempt.count({
     *   where: {
     *     // ... the filter for the Attempts we want to count
     *   }
     * })
    **/
    count<T extends AttemptCountArgs>(
      args?: Subset<T, AttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttemptAggregateArgs>(args: Subset<T, AttemptAggregateArgs>): Prisma.PrismaPromise<GetAttemptAggregateType<T>>

    /**
     * Group by Attempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttemptGroupByArgs['orderBy'] }
        : { orderBy?: AttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attempt model
   */
  readonly fields: AttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Attempt$userArgs<ExtArgs> = {}>(args?: Subset<T, Attempt$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attempt model
   */
  interface AttemptFieldRefs {
    readonly id: FieldRef<"Attempt", 'String'>
    readonly activityId: FieldRef<"Attempt", 'String'>
    readonly result: FieldRef<"Attempt", 'String'>
    readonly createdAt: FieldRef<"Attempt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attempt findUnique
   */
  export type AttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * Filter, which Attempt to fetch.
     */
    where: AttemptWhereUniqueInput
  }

  /**
   * Attempt findUniqueOrThrow
   */
  export type AttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * Filter, which Attempt to fetch.
     */
    where: AttemptWhereUniqueInput
  }

  /**
   * Attempt findFirst
   */
  export type AttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * Filter, which Attempt to fetch.
     */
    where?: AttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attempts to fetch.
     */
    orderBy?: AttemptOrderByWithRelationInput | AttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attempts.
     */
    cursor?: AttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attempts.
     */
    distinct?: AttemptScalarFieldEnum | AttemptScalarFieldEnum[]
  }

  /**
   * Attempt findFirstOrThrow
   */
  export type AttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * Filter, which Attempt to fetch.
     */
    where?: AttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attempts to fetch.
     */
    orderBy?: AttemptOrderByWithRelationInput | AttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attempts.
     */
    cursor?: AttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attempts.
     */
    distinct?: AttemptScalarFieldEnum | AttemptScalarFieldEnum[]
  }

  /**
   * Attempt findMany
   */
  export type AttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * Filter, which Attempts to fetch.
     */
    where?: AttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attempts to fetch.
     */
    orderBy?: AttemptOrderByWithRelationInput | AttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attempts.
     */
    cursor?: AttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attempts.
     */
    skip?: number
    distinct?: AttemptScalarFieldEnum | AttemptScalarFieldEnum[]
  }

  /**
   * Attempt create
   */
  export type AttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a Attempt.
     */
    data: XOR<AttemptCreateInput, AttemptUncheckedCreateInput>
  }

  /**
   * Attempt createMany
   */
  export type AttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attempts.
     */
    data: AttemptCreateManyInput | AttemptCreateManyInput[]
  }

  /**
   * Attempt update
   */
  export type AttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a Attempt.
     */
    data: XOR<AttemptUpdateInput, AttemptUncheckedUpdateInput>
    /**
     * Choose, which Attempt to update.
     */
    where: AttemptWhereUniqueInput
  }

  /**
   * Attempt updateMany
   */
  export type AttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attempts.
     */
    data: XOR<AttemptUpdateManyMutationInput, AttemptUncheckedUpdateManyInput>
    /**
     * Filter which Attempts to update
     */
    where?: AttemptWhereInput
    /**
     * Limit how many Attempts to update.
     */
    limit?: number
  }

  /**
   * Attempt upsert
   */
  export type AttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the Attempt to update in case it exists.
     */
    where: AttemptWhereUniqueInput
    /**
     * In case the Attempt found by the `where` argument doesn't exist, create a new Attempt with this data.
     */
    create: XOR<AttemptCreateInput, AttemptUncheckedCreateInput>
    /**
     * In case the Attempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttemptUpdateInput, AttemptUncheckedUpdateInput>
  }

  /**
   * Attempt delete
   */
  export type AttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
    /**
     * Filter which Attempt to delete.
     */
    where: AttemptWhereUniqueInput
  }

  /**
   * Attempt deleteMany
   */
  export type AttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attempts to delete
     */
    where?: AttemptWhereInput
    /**
     * Limit how many Attempts to delete.
     */
    limit?: number
  }

  /**
   * Attempt findRaw
   */
  export type AttemptFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Attempt aggregateRaw
   */
  export type AttemptAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Attempt.user
   */
  export type Attempt$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Attempt without action
   */
  export type AttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attempt
     */
    select?: AttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attempt
     */
    omit?: AttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    activityId: number
    content: number
    createdAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    activityId?: true
    content?: true
    createdAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    activityId?: true
    content?: true
    createdAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    activityId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    activityId: string
    content: string
    createdAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | Comment$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>



  export type CommentSelectScalar = {
    id?: boolean
    activityId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "content" | "createdAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Comment$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * @param {CommentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const comment = await prisma.comment.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: CommentFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Comment.
     * @param {CommentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const comment = await prisma.comment.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CommentAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Comment$userArgs<ExtArgs> = {}>(args?: Subset<T, Comment$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly activityId: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment findRaw
   */
  export type CommentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Comment aggregateRaw
   */
  export type CommentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Comment.user
   */
  export type Comment$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Resource
   */

  export type AggregateResource = {
    _count: ResourceCountAggregateOutputType | null
    _min: ResourceMinAggregateOutputType | null
    _max: ResourceMaxAggregateOutputType | null
  }

  export type ResourceMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    url: string | null
    title: string | null
  }

  export type ResourceMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    url: string | null
    title: string | null
  }

  export type ResourceCountAggregateOutputType = {
    id: number
    activityId: number
    url: number
    title: number
    _all: number
  }


  export type ResourceMinAggregateInputType = {
    id?: true
    activityId?: true
    url?: true
    title?: true
  }

  export type ResourceMaxAggregateInputType = {
    id?: true
    activityId?: true
    url?: true
    title?: true
  }

  export type ResourceCountAggregateInputType = {
    id?: true
    activityId?: true
    url?: true
    title?: true
    _all?: true
  }

  export type ResourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resource to aggregate.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resources
    **/
    _count?: true | ResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourceMaxAggregateInputType
  }

  export type GetResourceAggregateType<T extends ResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateResource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResource[P]>
      : GetScalarType<T[P], AggregateResource[P]>
  }




  export type ResourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceWhereInput
    orderBy?: ResourceOrderByWithAggregationInput | ResourceOrderByWithAggregationInput[]
    by: ResourceScalarFieldEnum[] | ResourceScalarFieldEnum
    having?: ResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourceCountAggregateInputType | true
    _min?: ResourceMinAggregateInputType
    _max?: ResourceMaxAggregateInputType
  }

  export type ResourceGroupByOutputType = {
    id: string
    activityId: string
    url: string
    title: string | null
    _count: ResourceCountAggregateOutputType | null
    _min: ResourceMinAggregateOutputType | null
    _max: ResourceMaxAggregateOutputType | null
  }

  type GetResourceGroupByPayload<T extends ResourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourceGroupByOutputType[P]>
            : GetScalarType<T[P], ResourceGroupByOutputType[P]>
        }
      >
    >


  export type ResourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    url?: boolean
    title?: boolean
    user?: boolean | Resource$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resource"]>



  export type ResourceSelectScalar = {
    id?: boolean
    activityId?: boolean
    url?: boolean
    title?: boolean
  }

  export type ResourceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "url" | "title", ExtArgs["result"]["resource"]>
  export type ResourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Resource$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ResourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resource"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      url: string
      title: string | null
    }, ExtArgs["result"]["resource"]>
    composites: {}
  }

  type ResourceGetPayload<S extends boolean | null | undefined | ResourceDefaultArgs> = $Result.GetResult<Prisma.$ResourcePayload, S>

  type ResourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResourceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResourceCountAggregateInputType | true
    }

  export interface ResourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resource'], meta: { name: 'Resource' } }
    /**
     * Find zero or one Resource that matches the filter.
     * @param {ResourceFindUniqueArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResourceFindUniqueArgs>(args: SelectSubset<T, ResourceFindUniqueArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Resource that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResourceFindUniqueOrThrowArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResourceFindUniqueOrThrowArgs>(args: SelectSubset<T, ResourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindFirstArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResourceFindFirstArgs>(args?: SelectSubset<T, ResourceFindFirstArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindFirstOrThrowArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResourceFindFirstOrThrowArgs>(args?: SelectSubset<T, ResourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resources
     * const resources = await prisma.resource.findMany()
     * 
     * // Get first 10 Resources
     * const resources = await prisma.resource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resourceWithIdOnly = await prisma.resource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResourceFindManyArgs>(args?: SelectSubset<T, ResourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Resource.
     * @param {ResourceCreateArgs} args - Arguments to create a Resource.
     * @example
     * // Create one Resource
     * const Resource = await prisma.resource.create({
     *   data: {
     *     // ... data to create a Resource
     *   }
     * })
     * 
     */
    create<T extends ResourceCreateArgs>(args: SelectSubset<T, ResourceCreateArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Resources.
     * @param {ResourceCreateManyArgs} args - Arguments to create many Resources.
     * @example
     * // Create many Resources
     * const resource = await prisma.resource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResourceCreateManyArgs>(args?: SelectSubset<T, ResourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Resource.
     * @param {ResourceDeleteArgs} args - Arguments to delete one Resource.
     * @example
     * // Delete one Resource
     * const Resource = await prisma.resource.delete({
     *   where: {
     *     // ... filter to delete one Resource
     *   }
     * })
     * 
     */
    delete<T extends ResourceDeleteArgs>(args: SelectSubset<T, ResourceDeleteArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Resource.
     * @param {ResourceUpdateArgs} args - Arguments to update one Resource.
     * @example
     * // Update one Resource
     * const resource = await prisma.resource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResourceUpdateArgs>(args: SelectSubset<T, ResourceUpdateArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Resources.
     * @param {ResourceDeleteManyArgs} args - Arguments to filter Resources to delete.
     * @example
     * // Delete a few Resources
     * const { count } = await prisma.resource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResourceDeleteManyArgs>(args?: SelectSubset<T, ResourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resources
     * const resource = await prisma.resource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResourceUpdateManyArgs>(args: SelectSubset<T, ResourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resource.
     * @param {ResourceUpsertArgs} args - Arguments to update or create a Resource.
     * @example
     * // Update or create a Resource
     * const resource = await prisma.resource.upsert({
     *   create: {
     *     // ... data to create a Resource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resource we want to update
     *   }
     * })
     */
    upsert<T extends ResourceUpsertArgs>(args: SelectSubset<T, ResourceUpsertArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Resources that matches the filter.
     * @param {ResourceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const resource = await prisma.resource.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ResourceFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Resource.
     * @param {ResourceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const resource = await prisma.resource.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ResourceAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceCountArgs} args - Arguments to filter Resources to count.
     * @example
     * // Count the number of Resources
     * const count = await prisma.resource.count({
     *   where: {
     *     // ... the filter for the Resources we want to count
     *   }
     * })
    **/
    count<T extends ResourceCountArgs>(
      args?: Subset<T, ResourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourceAggregateArgs>(args: Subset<T, ResourceAggregateArgs>): Prisma.PrismaPromise<GetResourceAggregateType<T>>

    /**
     * Group by Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResourceGroupByArgs['orderBy'] }
        : { orderBy?: ResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resource model
   */
  readonly fields: ResourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Resource$userArgs<ExtArgs> = {}>(args?: Subset<T, Resource$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Resource model
   */
  interface ResourceFieldRefs {
    readonly id: FieldRef<"Resource", 'String'>
    readonly activityId: FieldRef<"Resource", 'String'>
    readonly url: FieldRef<"Resource", 'String'>
    readonly title: FieldRef<"Resource", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Resource findUnique
   */
  export type ResourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource findUniqueOrThrow
   */
  export type ResourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource findFirst
   */
  export type ResourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resources.
     */
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource findFirstOrThrow
   */
  export type ResourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resources.
     */
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource findMany
   */
  export type ResourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resources to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource create
   */
  export type ResourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The data needed to create a Resource.
     */
    data: XOR<ResourceCreateInput, ResourceUncheckedCreateInput>
  }

  /**
   * Resource createMany
   */
  export type ResourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resources.
     */
    data: ResourceCreateManyInput | ResourceCreateManyInput[]
  }

  /**
   * Resource update
   */
  export type ResourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The data needed to update a Resource.
     */
    data: XOR<ResourceUpdateInput, ResourceUncheckedUpdateInput>
    /**
     * Choose, which Resource to update.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource updateMany
   */
  export type ResourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resources.
     */
    data: XOR<ResourceUpdateManyMutationInput, ResourceUncheckedUpdateManyInput>
    /**
     * Filter which Resources to update
     */
    where?: ResourceWhereInput
    /**
     * Limit how many Resources to update.
     */
    limit?: number
  }

  /**
   * Resource upsert
   */
  export type ResourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The filter to search for the Resource to update in case it exists.
     */
    where: ResourceWhereUniqueInput
    /**
     * In case the Resource found by the `where` argument doesn't exist, create a new Resource with this data.
     */
    create: XOR<ResourceCreateInput, ResourceUncheckedCreateInput>
    /**
     * In case the Resource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResourceUpdateInput, ResourceUncheckedUpdateInput>
  }

  /**
   * Resource delete
   */
  export type ResourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter which Resource to delete.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource deleteMany
   */
  export type ResourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resources to delete
     */
    where?: ResourceWhereInput
    /**
     * Limit how many Resources to delete.
     */
    limit?: number
  }

  /**
   * Resource findRaw
   */
  export type ResourceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Resource aggregateRaw
   */
  export type ResourceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Resource.user
   */
  export type Resource$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Resource without action
   */
  export type ResourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resource
     */
    omit?: ResourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    activityId: number
    content: number
    createdAt: number
    _all: number
  }


  export type ReviewMinAggregateInputType = {
    id?: true
    activityId?: true
    content?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    activityId?: true
    content?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    activityId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    activityId: string
    content: string
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | Review$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>



  export type ReviewSelectScalar = {
    id?: boolean
    activityId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "content" | "createdAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Review$userArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * @param {ReviewFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const review = await prisma.review.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ReviewFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Review.
     * @param {ReviewAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const review = await prisma.review.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ReviewAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Review$userArgs<ExtArgs> = {}>(args?: Subset<T, Review$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly activityId: FieldRef<"Review", 'String'>
    readonly content: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review findRaw
   */
  export type ReviewFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Review aggregateRaw
   */
  export type ReviewAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Review.user
   */
  export type Review$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    name: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    name: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    projectId: number
    name: number
    details: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    details?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    projectId: string
    name: string
    details: JsonValue | null
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    details?: boolean
    user?: boolean | Team$userArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    members?: boolean | Team$membersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>



  export type TeamSelectScalar = {
    id?: boolean
    projectId?: boolean
    name?: boolean
    details?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "name" | "details", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Team$userArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    members?: boolean | Team$membersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs>
      members: Prisma.$TeamMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      name: string
      details: Prisma.JsonValue | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * @param {TeamFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const team = await prisma.team.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TeamFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Team.
     * @param {TeamAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const team = await prisma.team.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TeamAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Team$userArgs<ExtArgs> = {}>(args?: Subset<T, Team$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Team$membersArgs<ExtArgs> = {}>(args?: Subset<T, Team$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly projectId: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly details: FieldRef<"Team", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team findRaw
   */
  export type TeamFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Team aggregateRaw
   */
  export type TeamAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Team.user
   */
  export type Team$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Team.members
   */
  export type Team$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamMember
   */

  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    userId: string | null
    role: string | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    userId: string | null
    role: string | null
  }

  export type TeamMemberCountAggregateOutputType = {
    id: number
    teamId: number
    userId: number
    role: number
    _all: number
  }


  export type TeamMemberMinAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    role?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    role?: true
  }

  export type TeamMemberCountAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    role?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMember to aggregate.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithAggregationInput | TeamMemberOrderByWithAggregationInput[]
    by: TeamMemberScalarFieldEnum[] | TeamMemberScalarFieldEnum
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }

  export type TeamMemberGroupByOutputType = {
    id: string
    teamId: string
    userId: string
    role: string | null
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    role?: boolean
    user?: boolean | TeamMember$userArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>



  export type TeamMemberSelectScalar = {
    id?: boolean
    teamId?: boolean
    userId?: boolean
    role?: boolean
  }

  export type TeamMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "userId" | "role", ExtArgs["result"]["teamMember"]>
  export type TeamMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamMember$userArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TeamMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      userId: string
      role: string | null
    }, ExtArgs["result"]["teamMember"]>
    composites: {}
  }

  type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = $Result.GetResult<Prisma.$TeamMemberPayload, S>

  type TeamMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMemberCountAggregateInputType | true
    }

  export interface TeamMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMemberFindUniqueArgs>(args: SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMemberFindFirstArgs>(args?: SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMemberFindManyArgs>(args?: SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
     */
    create<T extends TeamMemberCreateArgs>(args: SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMemberCreateManyArgs>(args?: SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
     */
    delete<T extends TeamMemberDeleteArgs>(args: SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMemberUpdateArgs>(args: SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMemberDeleteManyArgs>(args?: SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMemberUpdateManyArgs>(args: SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
     */
    upsert<T extends TeamMemberUpsertArgs>(args: SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * @param {TeamMemberFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const teamMember = await prisma.teamMember.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TeamMemberFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TeamMember.
     * @param {TeamMemberAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const teamMember = await prisma.teamMember.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TeamMemberAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMember model
   */
  readonly fields: TeamMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TeamMember$userArgs<ExtArgs> = {}>(args?: Subset<T, TeamMember$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMember model
   */
  interface TeamMemberFieldRefs {
    readonly id: FieldRef<"TeamMember", 'String'>
    readonly teamId: FieldRef<"TeamMember", 'String'>
    readonly userId: FieldRef<"TeamMember", 'String'>
    readonly role: FieldRef<"TeamMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findUniqueOrThrow
   */
  export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findFirstOrThrow
   */
  export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMember.
     */
    data: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }

  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
  }

  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMember.
     */
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     */
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     */
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }

  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter which TeamMember to delete.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMember findRaw
   */
  export type TeamMemberFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TeamMember aggregateRaw
   */
  export type TeamMemberAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TeamMember.user
   */
  export type TeamMember$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TeamMember without action
   */
  export type TeamMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
  }


  /**
   * Model Path
   */

  export type AggregatePath = {
    _count: PathCountAggregateOutputType | null
    _min: PathMinAggregateOutputType | null
    _max: PathMaxAggregateOutputType | null
  }

  export type PathMinAggregateOutputType = {
    id: string | null
    termId: string | null
    learningGoalId: string | null
    createdAt: Date | null
  }

  export type PathMaxAggregateOutputType = {
    id: string | null
    termId: string | null
    learningGoalId: string | null
    createdAt: Date | null
  }

  export type PathCountAggregateOutputType = {
    id: number
    termId: number
    learningGoalId: number
    steps: number
    createdAt: number
    _all: number
  }


  export type PathMinAggregateInputType = {
    id?: true
    termId?: true
    learningGoalId?: true
    createdAt?: true
  }

  export type PathMaxAggregateInputType = {
    id?: true
    termId?: true
    learningGoalId?: true
    createdAt?: true
  }

  export type PathCountAggregateInputType = {
    id?: true
    termId?: true
    learningGoalId?: true
    steps?: true
    createdAt?: true
    _all?: true
  }

  export type PathAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Path to aggregate.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paths
    **/
    _count?: true | PathCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PathMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PathMaxAggregateInputType
  }

  export type GetPathAggregateType<T extends PathAggregateArgs> = {
        [P in keyof T & keyof AggregatePath]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePath[P]>
      : GetScalarType<T[P], AggregatePath[P]>
  }




  export type PathGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PathWhereInput
    orderBy?: PathOrderByWithAggregationInput | PathOrderByWithAggregationInput[]
    by: PathScalarFieldEnum[] | PathScalarFieldEnum
    having?: PathScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PathCountAggregateInputType | true
    _min?: PathMinAggregateInputType
    _max?: PathMaxAggregateInputType
  }

  export type PathGroupByOutputType = {
    id: string
    termId: string
    learningGoalId: string
    steps: JsonValue | null
    createdAt: Date
    _count: PathCountAggregateOutputType | null
    _min: PathMinAggregateOutputType | null
    _max: PathMaxAggregateOutputType | null
  }

  type GetPathGroupByPayload<T extends PathGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PathGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PathGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PathGroupByOutputType[P]>
            : GetScalarType<T[P], PathGroupByOutputType[P]>
        }
      >
    >


  export type PathSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    termId?: boolean
    learningGoalId?: boolean
    steps?: boolean
    createdAt?: boolean
    user?: boolean | Path$userArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
    learningGoal?: boolean | GoalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["path"]>



  export type PathSelectScalar = {
    id?: boolean
    termId?: boolean
    learningGoalId?: boolean
    steps?: boolean
    createdAt?: boolean
  }

  export type PathOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "termId" | "learningGoalId" | "steps" | "createdAt", ExtArgs["result"]["path"]>
  export type PathInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Path$userArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
    learningGoal?: boolean | GoalDefaultArgs<ExtArgs>
  }

  export type $PathPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Path"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      term: Prisma.$TermPayload<ExtArgs>
      learningGoal: Prisma.$GoalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      termId: string
      learningGoalId: string
      steps: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["path"]>
    composites: {}
  }

  type PathGetPayload<S extends boolean | null | undefined | PathDefaultArgs> = $Result.GetResult<Prisma.$PathPayload, S>

  type PathCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PathFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PathCountAggregateInputType | true
    }

  export interface PathDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Path'], meta: { name: 'Path' } }
    /**
     * Find zero or one Path that matches the filter.
     * @param {PathFindUniqueArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PathFindUniqueArgs>(args: SelectSubset<T, PathFindUniqueArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Path that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PathFindUniqueOrThrowArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PathFindUniqueOrThrowArgs>(args: SelectSubset<T, PathFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Path that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathFindFirstArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PathFindFirstArgs>(args?: SelectSubset<T, PathFindFirstArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Path that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathFindFirstOrThrowArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PathFindFirstOrThrowArgs>(args?: SelectSubset<T, PathFindFirstOrThrowArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Paths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paths
     * const paths = await prisma.path.findMany()
     * 
     * // Get first 10 Paths
     * const paths = await prisma.path.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pathWithIdOnly = await prisma.path.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PathFindManyArgs>(args?: SelectSubset<T, PathFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Path.
     * @param {PathCreateArgs} args - Arguments to create a Path.
     * @example
     * // Create one Path
     * const Path = await prisma.path.create({
     *   data: {
     *     // ... data to create a Path
     *   }
     * })
     * 
     */
    create<T extends PathCreateArgs>(args: SelectSubset<T, PathCreateArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Paths.
     * @param {PathCreateManyArgs} args - Arguments to create many Paths.
     * @example
     * // Create many Paths
     * const path = await prisma.path.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PathCreateManyArgs>(args?: SelectSubset<T, PathCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Path.
     * @param {PathDeleteArgs} args - Arguments to delete one Path.
     * @example
     * // Delete one Path
     * const Path = await prisma.path.delete({
     *   where: {
     *     // ... filter to delete one Path
     *   }
     * })
     * 
     */
    delete<T extends PathDeleteArgs>(args: SelectSubset<T, PathDeleteArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Path.
     * @param {PathUpdateArgs} args - Arguments to update one Path.
     * @example
     * // Update one Path
     * const path = await prisma.path.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PathUpdateArgs>(args: SelectSubset<T, PathUpdateArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Paths.
     * @param {PathDeleteManyArgs} args - Arguments to filter Paths to delete.
     * @example
     * // Delete a few Paths
     * const { count } = await prisma.path.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PathDeleteManyArgs>(args?: SelectSubset<T, PathDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paths
     * const path = await prisma.path.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PathUpdateManyArgs>(args: SelectSubset<T, PathUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Path.
     * @param {PathUpsertArgs} args - Arguments to update or create a Path.
     * @example
     * // Update or create a Path
     * const path = await prisma.path.upsert({
     *   create: {
     *     // ... data to create a Path
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Path we want to update
     *   }
     * })
     */
    upsert<T extends PathUpsertArgs>(args: SelectSubset<T, PathUpsertArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Paths that matches the filter.
     * @param {PathFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const path = await prisma.path.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: PathFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Path.
     * @param {PathAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const path = await prisma.path.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: PathAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Paths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathCountArgs} args - Arguments to filter Paths to count.
     * @example
     * // Count the number of Paths
     * const count = await prisma.path.count({
     *   where: {
     *     // ... the filter for the Paths we want to count
     *   }
     * })
    **/
    count<T extends PathCountArgs>(
      args?: Subset<T, PathCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PathCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Path.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PathAggregateArgs>(args: Subset<T, PathAggregateArgs>): Prisma.PrismaPromise<GetPathAggregateType<T>>

    /**
     * Group by Path.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PathGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PathGroupByArgs['orderBy'] }
        : { orderBy?: PathGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PathGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPathGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Path model
   */
  readonly fields: PathFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Path.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PathClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Path$userArgs<ExtArgs> = {}>(args?: Subset<T, Path$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    term<T extends TermDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TermDefaultArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    learningGoal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Path model
   */
  interface PathFieldRefs {
    readonly id: FieldRef<"Path", 'String'>
    readonly termId: FieldRef<"Path", 'String'>
    readonly learningGoalId: FieldRef<"Path", 'String'>
    readonly steps: FieldRef<"Path", 'Json'>
    readonly createdAt: FieldRef<"Path", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Path findUnique
   */
  export type PathFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where: PathWhereUniqueInput
  }

  /**
   * Path findUniqueOrThrow
   */
  export type PathFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where: PathWhereUniqueInput
  }

  /**
   * Path findFirst
   */
  export type PathFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paths.
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paths.
     */
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }

  /**
   * Path findFirstOrThrow
   */
  export type PathFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paths.
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paths.
     */
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }

  /**
   * Path findMany
   */
  export type PathFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Paths to fetch.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paths.
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }

  /**
   * Path create
   */
  export type PathCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * The data needed to create a Path.
     */
    data: XOR<PathCreateInput, PathUncheckedCreateInput>
  }

  /**
   * Path createMany
   */
  export type PathCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paths.
     */
    data: PathCreateManyInput | PathCreateManyInput[]
  }

  /**
   * Path update
   */
  export type PathUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * The data needed to update a Path.
     */
    data: XOR<PathUpdateInput, PathUncheckedUpdateInput>
    /**
     * Choose, which Path to update.
     */
    where: PathWhereUniqueInput
  }

  /**
   * Path updateMany
   */
  export type PathUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paths.
     */
    data: XOR<PathUpdateManyMutationInput, PathUncheckedUpdateManyInput>
    /**
     * Filter which Paths to update
     */
    where?: PathWhereInput
    /**
     * Limit how many Paths to update.
     */
    limit?: number
  }

  /**
   * Path upsert
   */
  export type PathUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * The filter to search for the Path to update in case it exists.
     */
    where: PathWhereUniqueInput
    /**
     * In case the Path found by the `where` argument doesn't exist, create a new Path with this data.
     */
    create: XOR<PathCreateInput, PathUncheckedCreateInput>
    /**
     * In case the Path was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PathUpdateInput, PathUncheckedUpdateInput>
  }

  /**
   * Path delete
   */
  export type PathDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter which Path to delete.
     */
    where: PathWhereUniqueInput
  }

  /**
   * Path deleteMany
   */
  export type PathDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paths to delete
     */
    where?: PathWhereInput
    /**
     * Limit how many Paths to delete.
     */
    limit?: number
  }

  /**
   * Path findRaw
   */
  export type PathFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Path aggregateRaw
   */
  export type PathAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Path.user
   */
  export type Path$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Path without action
   */
  export type PathDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Path
     */
    omit?: PathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PathInclude<ExtArgs> | null
  }


  /**
   * Model Routine
   */

  export type AggregateRoutine = {
    _count: RoutineCountAggregateOutputType | null
    _min: RoutineMinAggregateOutputType | null
    _max: RoutineMaxAggregateOutputType | null
  }

  export type RoutineMinAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoutineMaxAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoutineCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoutineMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoutineMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoutineCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoutineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routine to aggregate.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Routines
    **/
    _count?: true | RoutineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineMaxAggregateInputType
  }

  export type GetRoutineAggregateType<T extends RoutineAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutine[P]>
      : GetScalarType<T[P], AggregateRoutine[P]>
  }




  export type RoutineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithAggregationInput | RoutineOrderByWithAggregationInput[]
    by: RoutineScalarFieldEnum[] | RoutineScalarFieldEnum
    having?: RoutineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineCountAggregateInputType | true
    _min?: RoutineMinAggregateInputType
    _max?: RoutineMaxAggregateInputType
  }

  export type RoutineGroupByOutputType = {
    id: string
    name: string
    ownerId: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoutineCountAggregateOutputType | null
    _min: RoutineMinAggregateOutputType | null
    _max: RoutineMaxAggregateOutputType | null
  }

  type GetRoutineGroupByPayload<T extends RoutineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Routine$userArgs<ExtArgs>
    slots?: boolean | Routine$slotsArgs<ExtArgs>
    _count?: boolean | RoutineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routine"]>



  export type RoutineSelectScalar = {
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoutineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["routine"]>
  export type RoutineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Routine$userArgs<ExtArgs>
    slots?: boolean | Routine$slotsArgs<ExtArgs>
    _count?: boolean | RoutineCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RoutinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Routine"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      slots: Prisma.$RoutineSlotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      ownerId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["routine"]>
    composites: {}
  }

  type RoutineGetPayload<S extends boolean | null | undefined | RoutineDefaultArgs> = $Result.GetResult<Prisma.$RoutinePayload, S>

  type RoutineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoutineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoutineCountAggregateInputType | true
    }

  export interface RoutineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Routine'], meta: { name: 'Routine' } }
    /**
     * Find zero or one Routine that matches the filter.
     * @param {RoutineFindUniqueArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoutineFindUniqueArgs>(args: SelectSubset<T, RoutineFindUniqueArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Routine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoutineFindUniqueOrThrowArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoutineFindUniqueOrThrowArgs>(args: SelectSubset<T, RoutineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Routine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineFindFirstArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoutineFindFirstArgs>(args?: SelectSubset<T, RoutineFindFirstArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Routine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineFindFirstOrThrowArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoutineFindFirstOrThrowArgs>(args?: SelectSubset<T, RoutineFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Routines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Routines
     * const routines = await prisma.routine.findMany()
     * 
     * // Get first 10 Routines
     * const routines = await prisma.routine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineWithIdOnly = await prisma.routine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoutineFindManyArgs>(args?: SelectSubset<T, RoutineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Routine.
     * @param {RoutineCreateArgs} args - Arguments to create a Routine.
     * @example
     * // Create one Routine
     * const Routine = await prisma.routine.create({
     *   data: {
     *     // ... data to create a Routine
     *   }
     * })
     * 
     */
    create<T extends RoutineCreateArgs>(args: SelectSubset<T, RoutineCreateArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Routines.
     * @param {RoutineCreateManyArgs} args - Arguments to create many Routines.
     * @example
     * // Create many Routines
     * const routine = await prisma.routine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoutineCreateManyArgs>(args?: SelectSubset<T, RoutineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Routine.
     * @param {RoutineDeleteArgs} args - Arguments to delete one Routine.
     * @example
     * // Delete one Routine
     * const Routine = await prisma.routine.delete({
     *   where: {
     *     // ... filter to delete one Routine
     *   }
     * })
     * 
     */
    delete<T extends RoutineDeleteArgs>(args: SelectSubset<T, RoutineDeleteArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Routine.
     * @param {RoutineUpdateArgs} args - Arguments to update one Routine.
     * @example
     * // Update one Routine
     * const routine = await prisma.routine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoutineUpdateArgs>(args: SelectSubset<T, RoutineUpdateArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Routines.
     * @param {RoutineDeleteManyArgs} args - Arguments to filter Routines to delete.
     * @example
     * // Delete a few Routines
     * const { count } = await prisma.routine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoutineDeleteManyArgs>(args?: SelectSubset<T, RoutineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Routines
     * const routine = await prisma.routine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoutineUpdateManyArgs>(args: SelectSubset<T, RoutineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Routine.
     * @param {RoutineUpsertArgs} args - Arguments to update or create a Routine.
     * @example
     * // Update or create a Routine
     * const routine = await prisma.routine.upsert({
     *   create: {
     *     // ... data to create a Routine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Routine we want to update
     *   }
     * })
     */
    upsert<T extends RoutineUpsertArgs>(args: SelectSubset<T, RoutineUpsertArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Routines that matches the filter.
     * @param {RoutineFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const routine = await prisma.routine.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: RoutineFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Routine.
     * @param {RoutineAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const routine = await prisma.routine.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RoutineAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Routines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineCountArgs} args - Arguments to filter Routines to count.
     * @example
     * // Count the number of Routines
     * const count = await prisma.routine.count({
     *   where: {
     *     // ... the filter for the Routines we want to count
     *   }
     * })
    **/
    count<T extends RoutineCountArgs>(
      args?: Subset<T, RoutineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Routine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineAggregateArgs>(args: Subset<T, RoutineAggregateArgs>): Prisma.PrismaPromise<GetRoutineAggregateType<T>>

    /**
     * Group by Routine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineGroupByArgs['orderBy'] }
        : { orderBy?: RoutineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Routine model
   */
  readonly fields: RoutineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Routine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Routine$userArgs<ExtArgs> = {}>(args?: Subset<T, Routine$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    slots<T extends Routine$slotsArgs<ExtArgs> = {}>(args?: Subset<T, Routine$slotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Routine model
   */
  interface RoutineFieldRefs {
    readonly id: FieldRef<"Routine", 'String'>
    readonly name: FieldRef<"Routine", 'String'>
    readonly ownerId: FieldRef<"Routine", 'String'>
    readonly createdAt: FieldRef<"Routine", 'DateTime'>
    readonly updatedAt: FieldRef<"Routine", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Routine findUnique
   */
  export type RoutineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where: RoutineWhereUniqueInput
  }

  /**
   * Routine findUniqueOrThrow
   */
  export type RoutineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where: RoutineWhereUniqueInput
  }

  /**
   * Routine findFirst
   */
  export type RoutineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routines.
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routines.
     */
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }

  /**
   * Routine findFirstOrThrow
   */
  export type RoutineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routines.
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routines.
     */
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }

  /**
   * Routine findMany
   */
  export type RoutineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routines to fetch.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Routines.
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }

  /**
   * Routine create
   */
  export type RoutineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * The data needed to create a Routine.
     */
    data: XOR<RoutineCreateInput, RoutineUncheckedCreateInput>
  }

  /**
   * Routine createMany
   */
  export type RoutineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Routines.
     */
    data: RoutineCreateManyInput | RoutineCreateManyInput[]
  }

  /**
   * Routine update
   */
  export type RoutineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * The data needed to update a Routine.
     */
    data: XOR<RoutineUpdateInput, RoutineUncheckedUpdateInput>
    /**
     * Choose, which Routine to update.
     */
    where: RoutineWhereUniqueInput
  }

  /**
   * Routine updateMany
   */
  export type RoutineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Routines.
     */
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyInput>
    /**
     * Filter which Routines to update
     */
    where?: RoutineWhereInput
    /**
     * Limit how many Routines to update.
     */
    limit?: number
  }

  /**
   * Routine upsert
   */
  export type RoutineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * The filter to search for the Routine to update in case it exists.
     */
    where: RoutineWhereUniqueInput
    /**
     * In case the Routine found by the `where` argument doesn't exist, create a new Routine with this data.
     */
    create: XOR<RoutineCreateInput, RoutineUncheckedCreateInput>
    /**
     * In case the Routine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineUpdateInput, RoutineUncheckedUpdateInput>
  }

  /**
   * Routine delete
   */
  export type RoutineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter which Routine to delete.
     */
    where: RoutineWhereUniqueInput
  }

  /**
   * Routine deleteMany
   */
  export type RoutineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routines to delete
     */
    where?: RoutineWhereInput
    /**
     * Limit how many Routines to delete.
     */
    limit?: number
  }

  /**
   * Routine findRaw
   */
  export type RoutineFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Routine aggregateRaw
   */
  export type RoutineAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Routine.user
   */
  export type Routine$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Routine.slots
   */
  export type Routine$slotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    where?: RoutineSlotWhereInput
    orderBy?: RoutineSlotOrderByWithRelationInput | RoutineSlotOrderByWithRelationInput[]
    cursor?: RoutineSlotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotScalarFieldEnum | RoutineSlotScalarFieldEnum[]
  }

  /**
   * Routine without action
   */
  export type RoutineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Routine
     */
    omit?: RoutineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineInclude<ExtArgs> | null
  }


  /**
   * Model RoutineSlot
   */

  export type AggregateRoutineSlot = {
    _count: RoutineSlotCountAggregateOutputType | null
    _min: RoutineSlotMinAggregateOutputType | null
    _max: RoutineSlotMaxAggregateOutputType | null
  }

  export type RoutineSlotMinAggregateOutputType = {
    id: string | null
    routineId: string | null
    label: string | null
    startTime: string | null
    endTime: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoutineSlotMaxAggregateOutputType = {
    id: string | null
    routineId: string | null
    label: string | null
    startTime: string | null
    endTime: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoutineSlotCountAggregateOutputType = {
    id: number
    routineId: number
    label: number
    startTime: number
    endTime: number
    todos: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoutineSlotMinAggregateInputType = {
    id?: true
    routineId?: true
    label?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoutineSlotMaxAggregateInputType = {
    id?: true
    routineId?: true
    label?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoutineSlotCountAggregateInputType = {
    id?: true
    routineId?: true
    label?: true
    startTime?: true
    endTime?: true
    todos?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoutineSlotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlot to aggregate.
     */
    where?: RoutineSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlots to fetch.
     */
    orderBy?: RoutineSlotOrderByWithRelationInput | RoutineSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoutineSlots
    **/
    _count?: true | RoutineSlotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineSlotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineSlotMaxAggregateInputType
  }

  export type GetRoutineSlotAggregateType<T extends RoutineSlotAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutineSlot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutineSlot[P]>
      : GetScalarType<T[P], AggregateRoutineSlot[P]>
  }




  export type RoutineSlotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotWhereInput
    orderBy?: RoutineSlotOrderByWithAggregationInput | RoutineSlotOrderByWithAggregationInput[]
    by: RoutineSlotScalarFieldEnum[] | RoutineSlotScalarFieldEnum
    having?: RoutineSlotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineSlotCountAggregateInputType | true
    _min?: RoutineSlotMinAggregateInputType
    _max?: RoutineSlotMaxAggregateInputType
  }

  export type RoutineSlotGroupByOutputType = {
    id: string
    routineId: string
    label: string
    startTime: string | null
    endTime: string | null
    todos: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: RoutineSlotCountAggregateOutputType | null
    _min: RoutineSlotMinAggregateOutputType | null
    _max: RoutineSlotMaxAggregateOutputType | null
  }

  type GetRoutineSlotGroupByPayload<T extends RoutineSlotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineSlotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineSlotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineSlotGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineSlotGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSlotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    routineId?: boolean
    label?: boolean
    startTime?: boolean
    endTime?: boolean
    todos?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | RoutineSlot$userArgs<ExtArgs>
    routine?: boolean | RoutineDefaultArgs<ExtArgs>
    slotThreads?: boolean | RoutineSlot$slotThreadsArgs<ExtArgs>
    slotTasks?: boolean | RoutineSlot$slotTasksArgs<ExtArgs>
    slotActivities?: boolean | RoutineSlot$slotActivitiesArgs<ExtArgs>
    _count?: boolean | RoutineSlotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routineSlot"]>



  export type RoutineSlotSelectScalar = {
    id?: boolean
    routineId?: boolean
    label?: boolean
    startTime?: boolean
    endTime?: boolean
    todos?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoutineSlotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "routineId" | "label" | "startTime" | "endTime" | "todos" | "createdAt" | "updatedAt", ExtArgs["result"]["routineSlot"]>
  export type RoutineSlotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RoutineSlot$userArgs<ExtArgs>
    routine?: boolean | RoutineDefaultArgs<ExtArgs>
    slotThreads?: boolean | RoutineSlot$slotThreadsArgs<ExtArgs>
    slotTasks?: boolean | RoutineSlot$slotTasksArgs<ExtArgs>
    slotActivities?: boolean | RoutineSlot$slotActivitiesArgs<ExtArgs>
    _count?: boolean | RoutineSlotCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RoutineSlotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoutineSlot"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      routine: Prisma.$RoutinePayload<ExtArgs>
      slotThreads: Prisma.$RoutineSlotThreadPayload<ExtArgs>[]
      slotTasks: Prisma.$RoutineSlotTaskPayload<ExtArgs>[]
      slotActivities: Prisma.$RoutineSlotActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      routineId: string
      label: string
      startTime: string | null
      endTime: string | null
      todos: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["routineSlot"]>
    composites: {}
  }

  type RoutineSlotGetPayload<S extends boolean | null | undefined | RoutineSlotDefaultArgs> = $Result.GetResult<Prisma.$RoutineSlotPayload, S>

  type RoutineSlotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoutineSlotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoutineSlotCountAggregateInputType | true
    }

  export interface RoutineSlotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoutineSlot'], meta: { name: 'RoutineSlot' } }
    /**
     * Find zero or one RoutineSlot that matches the filter.
     * @param {RoutineSlotFindUniqueArgs} args - Arguments to find a RoutineSlot
     * @example
     * // Get one RoutineSlot
     * const routineSlot = await prisma.routineSlot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoutineSlotFindUniqueArgs>(args: SelectSubset<T, RoutineSlotFindUniqueArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoutineSlot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoutineSlotFindUniqueOrThrowArgs} args - Arguments to find a RoutineSlot
     * @example
     * // Get one RoutineSlot
     * const routineSlot = await prisma.routineSlot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoutineSlotFindUniqueOrThrowArgs>(args: SelectSubset<T, RoutineSlotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotFindFirstArgs} args - Arguments to find a RoutineSlot
     * @example
     * // Get one RoutineSlot
     * const routineSlot = await prisma.routineSlot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoutineSlotFindFirstArgs>(args?: SelectSubset<T, RoutineSlotFindFirstArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotFindFirstOrThrowArgs} args - Arguments to find a RoutineSlot
     * @example
     * // Get one RoutineSlot
     * const routineSlot = await prisma.routineSlot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoutineSlotFindFirstOrThrowArgs>(args?: SelectSubset<T, RoutineSlotFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoutineSlots
     * const routineSlots = await prisma.routineSlot.findMany()
     * 
     * // Get first 10 RoutineSlots
     * const routineSlots = await prisma.routineSlot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineSlotWithIdOnly = await prisma.routineSlot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoutineSlotFindManyArgs>(args?: SelectSubset<T, RoutineSlotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoutineSlot.
     * @param {RoutineSlotCreateArgs} args - Arguments to create a RoutineSlot.
     * @example
     * // Create one RoutineSlot
     * const RoutineSlot = await prisma.routineSlot.create({
     *   data: {
     *     // ... data to create a RoutineSlot
     *   }
     * })
     * 
     */
    create<T extends RoutineSlotCreateArgs>(args: SelectSubset<T, RoutineSlotCreateArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoutineSlots.
     * @param {RoutineSlotCreateManyArgs} args - Arguments to create many RoutineSlots.
     * @example
     * // Create many RoutineSlots
     * const routineSlot = await prisma.routineSlot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoutineSlotCreateManyArgs>(args?: SelectSubset<T, RoutineSlotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoutineSlot.
     * @param {RoutineSlotDeleteArgs} args - Arguments to delete one RoutineSlot.
     * @example
     * // Delete one RoutineSlot
     * const RoutineSlot = await prisma.routineSlot.delete({
     *   where: {
     *     // ... filter to delete one RoutineSlot
     *   }
     * })
     * 
     */
    delete<T extends RoutineSlotDeleteArgs>(args: SelectSubset<T, RoutineSlotDeleteArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoutineSlot.
     * @param {RoutineSlotUpdateArgs} args - Arguments to update one RoutineSlot.
     * @example
     * // Update one RoutineSlot
     * const routineSlot = await prisma.routineSlot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoutineSlotUpdateArgs>(args: SelectSubset<T, RoutineSlotUpdateArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoutineSlots.
     * @param {RoutineSlotDeleteManyArgs} args - Arguments to filter RoutineSlots to delete.
     * @example
     * // Delete a few RoutineSlots
     * const { count } = await prisma.routineSlot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoutineSlotDeleteManyArgs>(args?: SelectSubset<T, RoutineSlotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoutineSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoutineSlots
     * const routineSlot = await prisma.routineSlot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoutineSlotUpdateManyArgs>(args: SelectSubset<T, RoutineSlotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoutineSlot.
     * @param {RoutineSlotUpsertArgs} args - Arguments to update or create a RoutineSlot.
     * @example
     * // Update or create a RoutineSlot
     * const routineSlot = await prisma.routineSlot.upsert({
     *   create: {
     *     // ... data to create a RoutineSlot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoutineSlot we want to update
     *   }
     * })
     */
    upsert<T extends RoutineSlotUpsertArgs>(args: SelectSubset<T, RoutineSlotUpsertArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlots that matches the filter.
     * @param {RoutineSlotFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const routineSlot = await prisma.routineSlot.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: RoutineSlotFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RoutineSlot.
     * @param {RoutineSlotAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const routineSlot = await prisma.routineSlot.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RoutineSlotAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of RoutineSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotCountArgs} args - Arguments to filter RoutineSlots to count.
     * @example
     * // Count the number of RoutineSlots
     * const count = await prisma.routineSlot.count({
     *   where: {
     *     // ... the filter for the RoutineSlots we want to count
     *   }
     * })
    **/
    count<T extends RoutineSlotCountArgs>(
      args?: Subset<T, RoutineSlotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineSlotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoutineSlot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineSlotAggregateArgs>(args: Subset<T, RoutineSlotAggregateArgs>): Prisma.PrismaPromise<GetRoutineSlotAggregateType<T>>

    /**
     * Group by RoutineSlot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineSlotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineSlotGroupByArgs['orderBy'] }
        : { orderBy?: RoutineSlotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineSlotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineSlotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoutineSlot model
   */
  readonly fields: RoutineSlotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoutineSlot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineSlotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends RoutineSlot$userArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlot$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    routine<T extends RoutineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoutineDefaultArgs<ExtArgs>>): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    slotThreads<T extends RoutineSlot$slotThreadsArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlot$slotThreadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    slotTasks<T extends RoutineSlot$slotTasksArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlot$slotTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    slotActivities<T extends RoutineSlot$slotActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlot$slotActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoutineSlot model
   */
  interface RoutineSlotFieldRefs {
    readonly id: FieldRef<"RoutineSlot", 'String'>
    readonly routineId: FieldRef<"RoutineSlot", 'String'>
    readonly label: FieldRef<"RoutineSlot", 'String'>
    readonly startTime: FieldRef<"RoutineSlot", 'String'>
    readonly endTime: FieldRef<"RoutineSlot", 'String'>
    readonly todos: FieldRef<"RoutineSlot", 'Json'>
    readonly createdAt: FieldRef<"RoutineSlot", 'DateTime'>
    readonly updatedAt: FieldRef<"RoutineSlot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoutineSlot findUnique
   */
  export type RoutineSlotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlot to fetch.
     */
    where: RoutineSlotWhereUniqueInput
  }

  /**
   * RoutineSlot findUniqueOrThrow
   */
  export type RoutineSlotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlot to fetch.
     */
    where: RoutineSlotWhereUniqueInput
  }

  /**
   * RoutineSlot findFirst
   */
  export type RoutineSlotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlot to fetch.
     */
    where?: RoutineSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlots to fetch.
     */
    orderBy?: RoutineSlotOrderByWithRelationInput | RoutineSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlots.
     */
    cursor?: RoutineSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlots.
     */
    distinct?: RoutineSlotScalarFieldEnum | RoutineSlotScalarFieldEnum[]
  }

  /**
   * RoutineSlot findFirstOrThrow
   */
  export type RoutineSlotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlot to fetch.
     */
    where?: RoutineSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlots to fetch.
     */
    orderBy?: RoutineSlotOrderByWithRelationInput | RoutineSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlots.
     */
    cursor?: RoutineSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlots.
     */
    distinct?: RoutineSlotScalarFieldEnum | RoutineSlotScalarFieldEnum[]
  }

  /**
   * RoutineSlot findMany
   */
  export type RoutineSlotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlots to fetch.
     */
    where?: RoutineSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlots to fetch.
     */
    orderBy?: RoutineSlotOrderByWithRelationInput | RoutineSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoutineSlots.
     */
    cursor?: RoutineSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlots.
     */
    skip?: number
    distinct?: RoutineSlotScalarFieldEnum | RoutineSlotScalarFieldEnum[]
  }

  /**
   * RoutineSlot create
   */
  export type RoutineSlotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * The data needed to create a RoutineSlot.
     */
    data: XOR<RoutineSlotCreateInput, RoutineSlotUncheckedCreateInput>
  }

  /**
   * RoutineSlot createMany
   */
  export type RoutineSlotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoutineSlots.
     */
    data: RoutineSlotCreateManyInput | RoutineSlotCreateManyInput[]
  }

  /**
   * RoutineSlot update
   */
  export type RoutineSlotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * The data needed to update a RoutineSlot.
     */
    data: XOR<RoutineSlotUpdateInput, RoutineSlotUncheckedUpdateInput>
    /**
     * Choose, which RoutineSlot to update.
     */
    where: RoutineSlotWhereUniqueInput
  }

  /**
   * RoutineSlot updateMany
   */
  export type RoutineSlotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoutineSlots.
     */
    data: XOR<RoutineSlotUpdateManyMutationInput, RoutineSlotUncheckedUpdateManyInput>
    /**
     * Filter which RoutineSlots to update
     */
    where?: RoutineSlotWhereInput
    /**
     * Limit how many RoutineSlots to update.
     */
    limit?: number
  }

  /**
   * RoutineSlot upsert
   */
  export type RoutineSlotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * The filter to search for the RoutineSlot to update in case it exists.
     */
    where: RoutineSlotWhereUniqueInput
    /**
     * In case the RoutineSlot found by the `where` argument doesn't exist, create a new RoutineSlot with this data.
     */
    create: XOR<RoutineSlotCreateInput, RoutineSlotUncheckedCreateInput>
    /**
     * In case the RoutineSlot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineSlotUpdateInput, RoutineSlotUncheckedUpdateInput>
  }

  /**
   * RoutineSlot delete
   */
  export type RoutineSlotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
    /**
     * Filter which RoutineSlot to delete.
     */
    where: RoutineSlotWhereUniqueInput
  }

  /**
   * RoutineSlot deleteMany
   */
  export type RoutineSlotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlots to delete
     */
    where?: RoutineSlotWhereInput
    /**
     * Limit how many RoutineSlots to delete.
     */
    limit?: number
  }

  /**
   * RoutineSlot findRaw
   */
  export type RoutineSlotFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlot aggregateRaw
   */
  export type RoutineSlotAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlot.user
   */
  export type RoutineSlot$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RoutineSlot.slotThreads
   */
  export type RoutineSlot$slotThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    where?: RoutineSlotThreadWhereInput
    orderBy?: RoutineSlotThreadOrderByWithRelationInput | RoutineSlotThreadOrderByWithRelationInput[]
    cursor?: RoutineSlotThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotThreadScalarFieldEnum | RoutineSlotThreadScalarFieldEnum[]
  }

  /**
   * RoutineSlot.slotTasks
   */
  export type RoutineSlot$slotTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    where?: RoutineSlotTaskWhereInput
    orderBy?: RoutineSlotTaskOrderByWithRelationInput | RoutineSlotTaskOrderByWithRelationInput[]
    cursor?: RoutineSlotTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotTaskScalarFieldEnum | RoutineSlotTaskScalarFieldEnum[]
  }

  /**
   * RoutineSlot.slotActivities
   */
  export type RoutineSlot$slotActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    where?: RoutineSlotActivityWhereInput
    orderBy?: RoutineSlotActivityOrderByWithRelationInput | RoutineSlotActivityOrderByWithRelationInput[]
    cursor?: RoutineSlotActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineSlotActivityScalarFieldEnum | RoutineSlotActivityScalarFieldEnum[]
  }

  /**
   * RoutineSlot without action
   */
  export type RoutineSlotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlot
     */
    select?: RoutineSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlot
     */
    omit?: RoutineSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotInclude<ExtArgs> | null
  }


  /**
   * Model RoutineSlotThread
   */

  export type AggregateRoutineSlotThread = {
    _count: RoutineSlotThreadCountAggregateOutputType | null
    _min: RoutineSlotThreadMinAggregateOutputType | null
    _max: RoutineSlotThreadMaxAggregateOutputType | null
  }

  export type RoutineSlotThreadMinAggregateOutputType = {
    id: string | null
    slotId: string | null
    threadId: string | null
  }

  export type RoutineSlotThreadMaxAggregateOutputType = {
    id: string | null
    slotId: string | null
    threadId: string | null
  }

  export type RoutineSlotThreadCountAggregateOutputType = {
    id: number
    slotId: number
    threadId: number
    _all: number
  }


  export type RoutineSlotThreadMinAggregateInputType = {
    id?: true
    slotId?: true
    threadId?: true
  }

  export type RoutineSlotThreadMaxAggregateInputType = {
    id?: true
    slotId?: true
    threadId?: true
  }

  export type RoutineSlotThreadCountAggregateInputType = {
    id?: true
    slotId?: true
    threadId?: true
    _all?: true
  }

  export type RoutineSlotThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlotThread to aggregate.
     */
    where?: RoutineSlotThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotThreads to fetch.
     */
    orderBy?: RoutineSlotThreadOrderByWithRelationInput | RoutineSlotThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineSlotThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoutineSlotThreads
    **/
    _count?: true | RoutineSlotThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineSlotThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineSlotThreadMaxAggregateInputType
  }

  export type GetRoutineSlotThreadAggregateType<T extends RoutineSlotThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutineSlotThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutineSlotThread[P]>
      : GetScalarType<T[P], AggregateRoutineSlotThread[P]>
  }




  export type RoutineSlotThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotThreadWhereInput
    orderBy?: RoutineSlotThreadOrderByWithAggregationInput | RoutineSlotThreadOrderByWithAggregationInput[]
    by: RoutineSlotThreadScalarFieldEnum[] | RoutineSlotThreadScalarFieldEnum
    having?: RoutineSlotThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineSlotThreadCountAggregateInputType | true
    _min?: RoutineSlotThreadMinAggregateInputType
    _max?: RoutineSlotThreadMaxAggregateInputType
  }

  export type RoutineSlotThreadGroupByOutputType = {
    id: string
    slotId: string
    threadId: string
    _count: RoutineSlotThreadCountAggregateOutputType | null
    _min: RoutineSlotThreadMinAggregateOutputType | null
    _max: RoutineSlotThreadMaxAggregateOutputType | null
  }

  type GetRoutineSlotThreadGroupByPayload<T extends RoutineSlotThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineSlotThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineSlotThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineSlotThreadGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineSlotThreadGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSlotThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slotId?: boolean
    threadId?: boolean
    user?: boolean | RoutineSlotThread$userArgs<ExtArgs>
    slot?: boolean | RoutineSlotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routineSlotThread"]>



  export type RoutineSlotThreadSelectScalar = {
    id?: boolean
    slotId?: boolean
    threadId?: boolean
  }

  export type RoutineSlotThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slotId" | "threadId", ExtArgs["result"]["routineSlotThread"]>
  export type RoutineSlotThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RoutineSlotThread$userArgs<ExtArgs>
    slot?: boolean | RoutineSlotDefaultArgs<ExtArgs>
  }

  export type $RoutineSlotThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoutineSlotThread"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      slot: Prisma.$RoutineSlotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slotId: string
      threadId: string
    }, ExtArgs["result"]["routineSlotThread"]>
    composites: {}
  }

  type RoutineSlotThreadGetPayload<S extends boolean | null | undefined | RoutineSlotThreadDefaultArgs> = $Result.GetResult<Prisma.$RoutineSlotThreadPayload, S>

  type RoutineSlotThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoutineSlotThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoutineSlotThreadCountAggregateInputType | true
    }

  export interface RoutineSlotThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoutineSlotThread'], meta: { name: 'RoutineSlotThread' } }
    /**
     * Find zero or one RoutineSlotThread that matches the filter.
     * @param {RoutineSlotThreadFindUniqueArgs} args - Arguments to find a RoutineSlotThread
     * @example
     * // Get one RoutineSlotThread
     * const routineSlotThread = await prisma.routineSlotThread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoutineSlotThreadFindUniqueArgs>(args: SelectSubset<T, RoutineSlotThreadFindUniqueArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoutineSlotThread that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoutineSlotThreadFindUniqueOrThrowArgs} args - Arguments to find a RoutineSlotThread
     * @example
     * // Get one RoutineSlotThread
     * const routineSlotThread = await prisma.routineSlotThread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoutineSlotThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, RoutineSlotThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlotThread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadFindFirstArgs} args - Arguments to find a RoutineSlotThread
     * @example
     * // Get one RoutineSlotThread
     * const routineSlotThread = await prisma.routineSlotThread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoutineSlotThreadFindFirstArgs>(args?: SelectSubset<T, RoutineSlotThreadFindFirstArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlotThread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadFindFirstOrThrowArgs} args - Arguments to find a RoutineSlotThread
     * @example
     * // Get one RoutineSlotThread
     * const routineSlotThread = await prisma.routineSlotThread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoutineSlotThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, RoutineSlotThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlotThreads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoutineSlotThreads
     * const routineSlotThreads = await prisma.routineSlotThread.findMany()
     * 
     * // Get first 10 RoutineSlotThreads
     * const routineSlotThreads = await prisma.routineSlotThread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineSlotThreadWithIdOnly = await prisma.routineSlotThread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoutineSlotThreadFindManyArgs>(args?: SelectSubset<T, RoutineSlotThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoutineSlotThread.
     * @param {RoutineSlotThreadCreateArgs} args - Arguments to create a RoutineSlotThread.
     * @example
     * // Create one RoutineSlotThread
     * const RoutineSlotThread = await prisma.routineSlotThread.create({
     *   data: {
     *     // ... data to create a RoutineSlotThread
     *   }
     * })
     * 
     */
    create<T extends RoutineSlotThreadCreateArgs>(args: SelectSubset<T, RoutineSlotThreadCreateArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoutineSlotThreads.
     * @param {RoutineSlotThreadCreateManyArgs} args - Arguments to create many RoutineSlotThreads.
     * @example
     * // Create many RoutineSlotThreads
     * const routineSlotThread = await prisma.routineSlotThread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoutineSlotThreadCreateManyArgs>(args?: SelectSubset<T, RoutineSlotThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoutineSlotThread.
     * @param {RoutineSlotThreadDeleteArgs} args - Arguments to delete one RoutineSlotThread.
     * @example
     * // Delete one RoutineSlotThread
     * const RoutineSlotThread = await prisma.routineSlotThread.delete({
     *   where: {
     *     // ... filter to delete one RoutineSlotThread
     *   }
     * })
     * 
     */
    delete<T extends RoutineSlotThreadDeleteArgs>(args: SelectSubset<T, RoutineSlotThreadDeleteArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoutineSlotThread.
     * @param {RoutineSlotThreadUpdateArgs} args - Arguments to update one RoutineSlotThread.
     * @example
     * // Update one RoutineSlotThread
     * const routineSlotThread = await prisma.routineSlotThread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoutineSlotThreadUpdateArgs>(args: SelectSubset<T, RoutineSlotThreadUpdateArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoutineSlotThreads.
     * @param {RoutineSlotThreadDeleteManyArgs} args - Arguments to filter RoutineSlotThreads to delete.
     * @example
     * // Delete a few RoutineSlotThreads
     * const { count } = await prisma.routineSlotThread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoutineSlotThreadDeleteManyArgs>(args?: SelectSubset<T, RoutineSlotThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoutineSlotThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoutineSlotThreads
     * const routineSlotThread = await prisma.routineSlotThread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoutineSlotThreadUpdateManyArgs>(args: SelectSubset<T, RoutineSlotThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoutineSlotThread.
     * @param {RoutineSlotThreadUpsertArgs} args - Arguments to update or create a RoutineSlotThread.
     * @example
     * // Update or create a RoutineSlotThread
     * const routineSlotThread = await prisma.routineSlotThread.upsert({
     *   create: {
     *     // ... data to create a RoutineSlotThread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoutineSlotThread we want to update
     *   }
     * })
     */
    upsert<T extends RoutineSlotThreadUpsertArgs>(args: SelectSubset<T, RoutineSlotThreadUpsertArgs<ExtArgs>>): Prisma__RoutineSlotThreadClient<$Result.GetResult<Prisma.$RoutineSlotThreadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlotThreads that matches the filter.
     * @param {RoutineSlotThreadFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const routineSlotThread = await prisma.routineSlotThread.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: RoutineSlotThreadFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RoutineSlotThread.
     * @param {RoutineSlotThreadAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const routineSlotThread = await prisma.routineSlotThread.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RoutineSlotThreadAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of RoutineSlotThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadCountArgs} args - Arguments to filter RoutineSlotThreads to count.
     * @example
     * // Count the number of RoutineSlotThreads
     * const count = await prisma.routineSlotThread.count({
     *   where: {
     *     // ... the filter for the RoutineSlotThreads we want to count
     *   }
     * })
    **/
    count<T extends RoutineSlotThreadCountArgs>(
      args?: Subset<T, RoutineSlotThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineSlotThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoutineSlotThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineSlotThreadAggregateArgs>(args: Subset<T, RoutineSlotThreadAggregateArgs>): Prisma.PrismaPromise<GetRoutineSlotThreadAggregateType<T>>

    /**
     * Group by RoutineSlotThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineSlotThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineSlotThreadGroupByArgs['orderBy'] }
        : { orderBy?: RoutineSlotThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineSlotThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineSlotThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoutineSlotThread model
   */
  readonly fields: RoutineSlotThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoutineSlotThread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineSlotThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends RoutineSlotThread$userArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlotThread$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    slot<T extends RoutineSlotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlotDefaultArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoutineSlotThread model
   */
  interface RoutineSlotThreadFieldRefs {
    readonly id: FieldRef<"RoutineSlotThread", 'String'>
    readonly slotId: FieldRef<"RoutineSlotThread", 'String'>
    readonly threadId: FieldRef<"RoutineSlotThread", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RoutineSlotThread findUnique
   */
  export type RoutineSlotThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotThread to fetch.
     */
    where: RoutineSlotThreadWhereUniqueInput
  }

  /**
   * RoutineSlotThread findUniqueOrThrow
   */
  export type RoutineSlotThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotThread to fetch.
     */
    where: RoutineSlotThreadWhereUniqueInput
  }

  /**
   * RoutineSlotThread findFirst
   */
  export type RoutineSlotThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotThread to fetch.
     */
    where?: RoutineSlotThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotThreads to fetch.
     */
    orderBy?: RoutineSlotThreadOrderByWithRelationInput | RoutineSlotThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlotThreads.
     */
    cursor?: RoutineSlotThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlotThreads.
     */
    distinct?: RoutineSlotThreadScalarFieldEnum | RoutineSlotThreadScalarFieldEnum[]
  }

  /**
   * RoutineSlotThread findFirstOrThrow
   */
  export type RoutineSlotThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotThread to fetch.
     */
    where?: RoutineSlotThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotThreads to fetch.
     */
    orderBy?: RoutineSlotThreadOrderByWithRelationInput | RoutineSlotThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlotThreads.
     */
    cursor?: RoutineSlotThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlotThreads.
     */
    distinct?: RoutineSlotThreadScalarFieldEnum | RoutineSlotThreadScalarFieldEnum[]
  }

  /**
   * RoutineSlotThread findMany
   */
  export type RoutineSlotThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotThreads to fetch.
     */
    where?: RoutineSlotThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotThreads to fetch.
     */
    orderBy?: RoutineSlotThreadOrderByWithRelationInput | RoutineSlotThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoutineSlotThreads.
     */
    cursor?: RoutineSlotThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotThreads.
     */
    skip?: number
    distinct?: RoutineSlotThreadScalarFieldEnum | RoutineSlotThreadScalarFieldEnum[]
  }

  /**
   * RoutineSlotThread create
   */
  export type RoutineSlotThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a RoutineSlotThread.
     */
    data: XOR<RoutineSlotThreadCreateInput, RoutineSlotThreadUncheckedCreateInput>
  }

  /**
   * RoutineSlotThread createMany
   */
  export type RoutineSlotThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoutineSlotThreads.
     */
    data: RoutineSlotThreadCreateManyInput | RoutineSlotThreadCreateManyInput[]
  }

  /**
   * RoutineSlotThread update
   */
  export type RoutineSlotThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a RoutineSlotThread.
     */
    data: XOR<RoutineSlotThreadUpdateInput, RoutineSlotThreadUncheckedUpdateInput>
    /**
     * Choose, which RoutineSlotThread to update.
     */
    where: RoutineSlotThreadWhereUniqueInput
  }

  /**
   * RoutineSlotThread updateMany
   */
  export type RoutineSlotThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoutineSlotThreads.
     */
    data: XOR<RoutineSlotThreadUpdateManyMutationInput, RoutineSlotThreadUncheckedUpdateManyInput>
    /**
     * Filter which RoutineSlotThreads to update
     */
    where?: RoutineSlotThreadWhereInput
    /**
     * Limit how many RoutineSlotThreads to update.
     */
    limit?: number
  }

  /**
   * RoutineSlotThread upsert
   */
  export type RoutineSlotThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the RoutineSlotThread to update in case it exists.
     */
    where: RoutineSlotThreadWhereUniqueInput
    /**
     * In case the RoutineSlotThread found by the `where` argument doesn't exist, create a new RoutineSlotThread with this data.
     */
    create: XOR<RoutineSlotThreadCreateInput, RoutineSlotThreadUncheckedCreateInput>
    /**
     * In case the RoutineSlotThread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineSlotThreadUpdateInput, RoutineSlotThreadUncheckedUpdateInput>
  }

  /**
   * RoutineSlotThread delete
   */
  export type RoutineSlotThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
    /**
     * Filter which RoutineSlotThread to delete.
     */
    where: RoutineSlotThreadWhereUniqueInput
  }

  /**
   * RoutineSlotThread deleteMany
   */
  export type RoutineSlotThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlotThreads to delete
     */
    where?: RoutineSlotThreadWhereInput
    /**
     * Limit how many RoutineSlotThreads to delete.
     */
    limit?: number
  }

  /**
   * RoutineSlotThread findRaw
   */
  export type RoutineSlotThreadFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlotThread aggregateRaw
   */
  export type RoutineSlotThreadAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlotThread.user
   */
  export type RoutineSlotThread$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RoutineSlotThread without action
   */
  export type RoutineSlotThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotThread
     */
    select?: RoutineSlotThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotThread
     */
    omit?: RoutineSlotThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotThreadInclude<ExtArgs> | null
  }


  /**
   * Model RoutineSlotTask
   */

  export type AggregateRoutineSlotTask = {
    _count: RoutineSlotTaskCountAggregateOutputType | null
    _min: RoutineSlotTaskMinAggregateOutputType | null
    _max: RoutineSlotTaskMaxAggregateOutputType | null
  }

  export type RoutineSlotTaskMinAggregateOutputType = {
    id: string | null
    slotId: string | null
    taskId: string | null
  }

  export type RoutineSlotTaskMaxAggregateOutputType = {
    id: string | null
    slotId: string | null
    taskId: string | null
  }

  export type RoutineSlotTaskCountAggregateOutputType = {
    id: number
    slotId: number
    taskId: number
    _all: number
  }


  export type RoutineSlotTaskMinAggregateInputType = {
    id?: true
    slotId?: true
    taskId?: true
  }

  export type RoutineSlotTaskMaxAggregateInputType = {
    id?: true
    slotId?: true
    taskId?: true
  }

  export type RoutineSlotTaskCountAggregateInputType = {
    id?: true
    slotId?: true
    taskId?: true
    _all?: true
  }

  export type RoutineSlotTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlotTask to aggregate.
     */
    where?: RoutineSlotTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotTasks to fetch.
     */
    orderBy?: RoutineSlotTaskOrderByWithRelationInput | RoutineSlotTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineSlotTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoutineSlotTasks
    **/
    _count?: true | RoutineSlotTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineSlotTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineSlotTaskMaxAggregateInputType
  }

  export type GetRoutineSlotTaskAggregateType<T extends RoutineSlotTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutineSlotTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutineSlotTask[P]>
      : GetScalarType<T[P], AggregateRoutineSlotTask[P]>
  }




  export type RoutineSlotTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotTaskWhereInput
    orderBy?: RoutineSlotTaskOrderByWithAggregationInput | RoutineSlotTaskOrderByWithAggregationInput[]
    by: RoutineSlotTaskScalarFieldEnum[] | RoutineSlotTaskScalarFieldEnum
    having?: RoutineSlotTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineSlotTaskCountAggregateInputType | true
    _min?: RoutineSlotTaskMinAggregateInputType
    _max?: RoutineSlotTaskMaxAggregateInputType
  }

  export type RoutineSlotTaskGroupByOutputType = {
    id: string
    slotId: string
    taskId: string
    _count: RoutineSlotTaskCountAggregateOutputType | null
    _min: RoutineSlotTaskMinAggregateOutputType | null
    _max: RoutineSlotTaskMaxAggregateOutputType | null
  }

  type GetRoutineSlotTaskGroupByPayload<T extends RoutineSlotTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineSlotTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineSlotTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineSlotTaskGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineSlotTaskGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSlotTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slotId?: boolean
    taskId?: boolean
    user?: boolean | RoutineSlotTask$userArgs<ExtArgs>
    slot?: boolean | RoutineSlotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routineSlotTask"]>



  export type RoutineSlotTaskSelectScalar = {
    id?: boolean
    slotId?: boolean
    taskId?: boolean
  }

  export type RoutineSlotTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slotId" | "taskId", ExtArgs["result"]["routineSlotTask"]>
  export type RoutineSlotTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RoutineSlotTask$userArgs<ExtArgs>
    slot?: boolean | RoutineSlotDefaultArgs<ExtArgs>
  }

  export type $RoutineSlotTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoutineSlotTask"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      slot: Prisma.$RoutineSlotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slotId: string
      taskId: string
    }, ExtArgs["result"]["routineSlotTask"]>
    composites: {}
  }

  type RoutineSlotTaskGetPayload<S extends boolean | null | undefined | RoutineSlotTaskDefaultArgs> = $Result.GetResult<Prisma.$RoutineSlotTaskPayload, S>

  type RoutineSlotTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoutineSlotTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoutineSlotTaskCountAggregateInputType | true
    }

  export interface RoutineSlotTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoutineSlotTask'], meta: { name: 'RoutineSlotTask' } }
    /**
     * Find zero or one RoutineSlotTask that matches the filter.
     * @param {RoutineSlotTaskFindUniqueArgs} args - Arguments to find a RoutineSlotTask
     * @example
     * // Get one RoutineSlotTask
     * const routineSlotTask = await prisma.routineSlotTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoutineSlotTaskFindUniqueArgs>(args: SelectSubset<T, RoutineSlotTaskFindUniqueArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoutineSlotTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoutineSlotTaskFindUniqueOrThrowArgs} args - Arguments to find a RoutineSlotTask
     * @example
     * // Get one RoutineSlotTask
     * const routineSlotTask = await prisma.routineSlotTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoutineSlotTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, RoutineSlotTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlotTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskFindFirstArgs} args - Arguments to find a RoutineSlotTask
     * @example
     * // Get one RoutineSlotTask
     * const routineSlotTask = await prisma.routineSlotTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoutineSlotTaskFindFirstArgs>(args?: SelectSubset<T, RoutineSlotTaskFindFirstArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlotTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskFindFirstOrThrowArgs} args - Arguments to find a RoutineSlotTask
     * @example
     * // Get one RoutineSlotTask
     * const routineSlotTask = await prisma.routineSlotTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoutineSlotTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, RoutineSlotTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlotTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoutineSlotTasks
     * const routineSlotTasks = await prisma.routineSlotTask.findMany()
     * 
     * // Get first 10 RoutineSlotTasks
     * const routineSlotTasks = await prisma.routineSlotTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineSlotTaskWithIdOnly = await prisma.routineSlotTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoutineSlotTaskFindManyArgs>(args?: SelectSubset<T, RoutineSlotTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoutineSlotTask.
     * @param {RoutineSlotTaskCreateArgs} args - Arguments to create a RoutineSlotTask.
     * @example
     * // Create one RoutineSlotTask
     * const RoutineSlotTask = await prisma.routineSlotTask.create({
     *   data: {
     *     // ... data to create a RoutineSlotTask
     *   }
     * })
     * 
     */
    create<T extends RoutineSlotTaskCreateArgs>(args: SelectSubset<T, RoutineSlotTaskCreateArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoutineSlotTasks.
     * @param {RoutineSlotTaskCreateManyArgs} args - Arguments to create many RoutineSlotTasks.
     * @example
     * // Create many RoutineSlotTasks
     * const routineSlotTask = await prisma.routineSlotTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoutineSlotTaskCreateManyArgs>(args?: SelectSubset<T, RoutineSlotTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoutineSlotTask.
     * @param {RoutineSlotTaskDeleteArgs} args - Arguments to delete one RoutineSlotTask.
     * @example
     * // Delete one RoutineSlotTask
     * const RoutineSlotTask = await prisma.routineSlotTask.delete({
     *   where: {
     *     // ... filter to delete one RoutineSlotTask
     *   }
     * })
     * 
     */
    delete<T extends RoutineSlotTaskDeleteArgs>(args: SelectSubset<T, RoutineSlotTaskDeleteArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoutineSlotTask.
     * @param {RoutineSlotTaskUpdateArgs} args - Arguments to update one RoutineSlotTask.
     * @example
     * // Update one RoutineSlotTask
     * const routineSlotTask = await prisma.routineSlotTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoutineSlotTaskUpdateArgs>(args: SelectSubset<T, RoutineSlotTaskUpdateArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoutineSlotTasks.
     * @param {RoutineSlotTaskDeleteManyArgs} args - Arguments to filter RoutineSlotTasks to delete.
     * @example
     * // Delete a few RoutineSlotTasks
     * const { count } = await prisma.routineSlotTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoutineSlotTaskDeleteManyArgs>(args?: SelectSubset<T, RoutineSlotTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoutineSlotTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoutineSlotTasks
     * const routineSlotTask = await prisma.routineSlotTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoutineSlotTaskUpdateManyArgs>(args: SelectSubset<T, RoutineSlotTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoutineSlotTask.
     * @param {RoutineSlotTaskUpsertArgs} args - Arguments to update or create a RoutineSlotTask.
     * @example
     * // Update or create a RoutineSlotTask
     * const routineSlotTask = await prisma.routineSlotTask.upsert({
     *   create: {
     *     // ... data to create a RoutineSlotTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoutineSlotTask we want to update
     *   }
     * })
     */
    upsert<T extends RoutineSlotTaskUpsertArgs>(args: SelectSubset<T, RoutineSlotTaskUpsertArgs<ExtArgs>>): Prisma__RoutineSlotTaskClient<$Result.GetResult<Prisma.$RoutineSlotTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlotTasks that matches the filter.
     * @param {RoutineSlotTaskFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const routineSlotTask = await prisma.routineSlotTask.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: RoutineSlotTaskFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RoutineSlotTask.
     * @param {RoutineSlotTaskAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const routineSlotTask = await prisma.routineSlotTask.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RoutineSlotTaskAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of RoutineSlotTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskCountArgs} args - Arguments to filter RoutineSlotTasks to count.
     * @example
     * // Count the number of RoutineSlotTasks
     * const count = await prisma.routineSlotTask.count({
     *   where: {
     *     // ... the filter for the RoutineSlotTasks we want to count
     *   }
     * })
    **/
    count<T extends RoutineSlotTaskCountArgs>(
      args?: Subset<T, RoutineSlotTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineSlotTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoutineSlotTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineSlotTaskAggregateArgs>(args: Subset<T, RoutineSlotTaskAggregateArgs>): Prisma.PrismaPromise<GetRoutineSlotTaskAggregateType<T>>

    /**
     * Group by RoutineSlotTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineSlotTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineSlotTaskGroupByArgs['orderBy'] }
        : { orderBy?: RoutineSlotTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineSlotTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineSlotTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoutineSlotTask model
   */
  readonly fields: RoutineSlotTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoutineSlotTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineSlotTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends RoutineSlotTask$userArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlotTask$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    slot<T extends RoutineSlotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlotDefaultArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoutineSlotTask model
   */
  interface RoutineSlotTaskFieldRefs {
    readonly id: FieldRef<"RoutineSlotTask", 'String'>
    readonly slotId: FieldRef<"RoutineSlotTask", 'String'>
    readonly taskId: FieldRef<"RoutineSlotTask", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RoutineSlotTask findUnique
   */
  export type RoutineSlotTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotTask to fetch.
     */
    where: RoutineSlotTaskWhereUniqueInput
  }

  /**
   * RoutineSlotTask findUniqueOrThrow
   */
  export type RoutineSlotTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotTask to fetch.
     */
    where: RoutineSlotTaskWhereUniqueInput
  }

  /**
   * RoutineSlotTask findFirst
   */
  export type RoutineSlotTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotTask to fetch.
     */
    where?: RoutineSlotTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotTasks to fetch.
     */
    orderBy?: RoutineSlotTaskOrderByWithRelationInput | RoutineSlotTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlotTasks.
     */
    cursor?: RoutineSlotTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlotTasks.
     */
    distinct?: RoutineSlotTaskScalarFieldEnum | RoutineSlotTaskScalarFieldEnum[]
  }

  /**
   * RoutineSlotTask findFirstOrThrow
   */
  export type RoutineSlotTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotTask to fetch.
     */
    where?: RoutineSlotTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotTasks to fetch.
     */
    orderBy?: RoutineSlotTaskOrderByWithRelationInput | RoutineSlotTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlotTasks.
     */
    cursor?: RoutineSlotTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlotTasks.
     */
    distinct?: RoutineSlotTaskScalarFieldEnum | RoutineSlotTaskScalarFieldEnum[]
  }

  /**
   * RoutineSlotTask findMany
   */
  export type RoutineSlotTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotTasks to fetch.
     */
    where?: RoutineSlotTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotTasks to fetch.
     */
    orderBy?: RoutineSlotTaskOrderByWithRelationInput | RoutineSlotTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoutineSlotTasks.
     */
    cursor?: RoutineSlotTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotTasks.
     */
    skip?: number
    distinct?: RoutineSlotTaskScalarFieldEnum | RoutineSlotTaskScalarFieldEnum[]
  }

  /**
   * RoutineSlotTask create
   */
  export type RoutineSlotTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a RoutineSlotTask.
     */
    data: XOR<RoutineSlotTaskCreateInput, RoutineSlotTaskUncheckedCreateInput>
  }

  /**
   * RoutineSlotTask createMany
   */
  export type RoutineSlotTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoutineSlotTasks.
     */
    data: RoutineSlotTaskCreateManyInput | RoutineSlotTaskCreateManyInput[]
  }

  /**
   * RoutineSlotTask update
   */
  export type RoutineSlotTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a RoutineSlotTask.
     */
    data: XOR<RoutineSlotTaskUpdateInput, RoutineSlotTaskUncheckedUpdateInput>
    /**
     * Choose, which RoutineSlotTask to update.
     */
    where: RoutineSlotTaskWhereUniqueInput
  }

  /**
   * RoutineSlotTask updateMany
   */
  export type RoutineSlotTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoutineSlotTasks.
     */
    data: XOR<RoutineSlotTaskUpdateManyMutationInput, RoutineSlotTaskUncheckedUpdateManyInput>
    /**
     * Filter which RoutineSlotTasks to update
     */
    where?: RoutineSlotTaskWhereInput
    /**
     * Limit how many RoutineSlotTasks to update.
     */
    limit?: number
  }

  /**
   * RoutineSlotTask upsert
   */
  export type RoutineSlotTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the RoutineSlotTask to update in case it exists.
     */
    where: RoutineSlotTaskWhereUniqueInput
    /**
     * In case the RoutineSlotTask found by the `where` argument doesn't exist, create a new RoutineSlotTask with this data.
     */
    create: XOR<RoutineSlotTaskCreateInput, RoutineSlotTaskUncheckedCreateInput>
    /**
     * In case the RoutineSlotTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineSlotTaskUpdateInput, RoutineSlotTaskUncheckedUpdateInput>
  }

  /**
   * RoutineSlotTask delete
   */
  export type RoutineSlotTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
    /**
     * Filter which RoutineSlotTask to delete.
     */
    where: RoutineSlotTaskWhereUniqueInput
  }

  /**
   * RoutineSlotTask deleteMany
   */
  export type RoutineSlotTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlotTasks to delete
     */
    where?: RoutineSlotTaskWhereInput
    /**
     * Limit how many RoutineSlotTasks to delete.
     */
    limit?: number
  }

  /**
   * RoutineSlotTask findRaw
   */
  export type RoutineSlotTaskFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlotTask aggregateRaw
   */
  export type RoutineSlotTaskAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlotTask.user
   */
  export type RoutineSlotTask$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RoutineSlotTask without action
   */
  export type RoutineSlotTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotTask
     */
    select?: RoutineSlotTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotTask
     */
    omit?: RoutineSlotTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotTaskInclude<ExtArgs> | null
  }


  /**
   * Model RoutineSlotActivity
   */

  export type AggregateRoutineSlotActivity = {
    _count: RoutineSlotActivityCountAggregateOutputType | null
    _min: RoutineSlotActivityMinAggregateOutputType | null
    _max: RoutineSlotActivityMaxAggregateOutputType | null
  }

  export type RoutineSlotActivityMinAggregateOutputType = {
    id: string | null
    slotId: string | null
    activityId: string | null
  }

  export type RoutineSlotActivityMaxAggregateOutputType = {
    id: string | null
    slotId: string | null
    activityId: string | null
  }

  export type RoutineSlotActivityCountAggregateOutputType = {
    id: number
    slotId: number
    activityId: number
    _all: number
  }


  export type RoutineSlotActivityMinAggregateInputType = {
    id?: true
    slotId?: true
    activityId?: true
  }

  export type RoutineSlotActivityMaxAggregateInputType = {
    id?: true
    slotId?: true
    activityId?: true
  }

  export type RoutineSlotActivityCountAggregateInputType = {
    id?: true
    slotId?: true
    activityId?: true
    _all?: true
  }

  export type RoutineSlotActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlotActivity to aggregate.
     */
    where?: RoutineSlotActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotActivities to fetch.
     */
    orderBy?: RoutineSlotActivityOrderByWithRelationInput | RoutineSlotActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineSlotActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoutineSlotActivities
    **/
    _count?: true | RoutineSlotActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineSlotActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineSlotActivityMaxAggregateInputType
  }

  export type GetRoutineSlotActivityAggregateType<T extends RoutineSlotActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutineSlotActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutineSlotActivity[P]>
      : GetScalarType<T[P], AggregateRoutineSlotActivity[P]>
  }




  export type RoutineSlotActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoutineSlotActivityWhereInput
    orderBy?: RoutineSlotActivityOrderByWithAggregationInput | RoutineSlotActivityOrderByWithAggregationInput[]
    by: RoutineSlotActivityScalarFieldEnum[] | RoutineSlotActivityScalarFieldEnum
    having?: RoutineSlotActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineSlotActivityCountAggregateInputType | true
    _min?: RoutineSlotActivityMinAggregateInputType
    _max?: RoutineSlotActivityMaxAggregateInputType
  }

  export type RoutineSlotActivityGroupByOutputType = {
    id: string
    slotId: string
    activityId: string
    _count: RoutineSlotActivityCountAggregateOutputType | null
    _min: RoutineSlotActivityMinAggregateOutputType | null
    _max: RoutineSlotActivityMaxAggregateOutputType | null
  }

  type GetRoutineSlotActivityGroupByPayload<T extends RoutineSlotActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineSlotActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineSlotActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineSlotActivityGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineSlotActivityGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSlotActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slotId?: boolean
    activityId?: boolean
    user?: boolean | RoutineSlotActivity$userArgs<ExtArgs>
    slot?: boolean | RoutineSlotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routineSlotActivity"]>



  export type RoutineSlotActivitySelectScalar = {
    id?: boolean
    slotId?: boolean
    activityId?: boolean
  }

  export type RoutineSlotActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slotId" | "activityId", ExtArgs["result"]["routineSlotActivity"]>
  export type RoutineSlotActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RoutineSlotActivity$userArgs<ExtArgs>
    slot?: boolean | RoutineSlotDefaultArgs<ExtArgs>
  }

  export type $RoutineSlotActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoutineSlotActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      slot: Prisma.$RoutineSlotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slotId: string
      activityId: string
    }, ExtArgs["result"]["routineSlotActivity"]>
    composites: {}
  }

  type RoutineSlotActivityGetPayload<S extends boolean | null | undefined | RoutineSlotActivityDefaultArgs> = $Result.GetResult<Prisma.$RoutineSlotActivityPayload, S>

  type RoutineSlotActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoutineSlotActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoutineSlotActivityCountAggregateInputType | true
    }

  export interface RoutineSlotActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoutineSlotActivity'], meta: { name: 'RoutineSlotActivity' } }
    /**
     * Find zero or one RoutineSlotActivity that matches the filter.
     * @param {RoutineSlotActivityFindUniqueArgs} args - Arguments to find a RoutineSlotActivity
     * @example
     * // Get one RoutineSlotActivity
     * const routineSlotActivity = await prisma.routineSlotActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoutineSlotActivityFindUniqueArgs>(args: SelectSubset<T, RoutineSlotActivityFindUniqueArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoutineSlotActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoutineSlotActivityFindUniqueOrThrowArgs} args - Arguments to find a RoutineSlotActivity
     * @example
     * // Get one RoutineSlotActivity
     * const routineSlotActivity = await prisma.routineSlotActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoutineSlotActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, RoutineSlotActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlotActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityFindFirstArgs} args - Arguments to find a RoutineSlotActivity
     * @example
     * // Get one RoutineSlotActivity
     * const routineSlotActivity = await prisma.routineSlotActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoutineSlotActivityFindFirstArgs>(args?: SelectSubset<T, RoutineSlotActivityFindFirstArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoutineSlotActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityFindFirstOrThrowArgs} args - Arguments to find a RoutineSlotActivity
     * @example
     * // Get one RoutineSlotActivity
     * const routineSlotActivity = await prisma.routineSlotActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoutineSlotActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, RoutineSlotActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlotActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoutineSlotActivities
     * const routineSlotActivities = await prisma.routineSlotActivity.findMany()
     * 
     * // Get first 10 RoutineSlotActivities
     * const routineSlotActivities = await prisma.routineSlotActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineSlotActivityWithIdOnly = await prisma.routineSlotActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoutineSlotActivityFindManyArgs>(args?: SelectSubset<T, RoutineSlotActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoutineSlotActivity.
     * @param {RoutineSlotActivityCreateArgs} args - Arguments to create a RoutineSlotActivity.
     * @example
     * // Create one RoutineSlotActivity
     * const RoutineSlotActivity = await prisma.routineSlotActivity.create({
     *   data: {
     *     // ... data to create a RoutineSlotActivity
     *   }
     * })
     * 
     */
    create<T extends RoutineSlotActivityCreateArgs>(args: SelectSubset<T, RoutineSlotActivityCreateArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoutineSlotActivities.
     * @param {RoutineSlotActivityCreateManyArgs} args - Arguments to create many RoutineSlotActivities.
     * @example
     * // Create many RoutineSlotActivities
     * const routineSlotActivity = await prisma.routineSlotActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoutineSlotActivityCreateManyArgs>(args?: SelectSubset<T, RoutineSlotActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoutineSlotActivity.
     * @param {RoutineSlotActivityDeleteArgs} args - Arguments to delete one RoutineSlotActivity.
     * @example
     * // Delete one RoutineSlotActivity
     * const RoutineSlotActivity = await prisma.routineSlotActivity.delete({
     *   where: {
     *     // ... filter to delete one RoutineSlotActivity
     *   }
     * })
     * 
     */
    delete<T extends RoutineSlotActivityDeleteArgs>(args: SelectSubset<T, RoutineSlotActivityDeleteArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoutineSlotActivity.
     * @param {RoutineSlotActivityUpdateArgs} args - Arguments to update one RoutineSlotActivity.
     * @example
     * // Update one RoutineSlotActivity
     * const routineSlotActivity = await prisma.routineSlotActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoutineSlotActivityUpdateArgs>(args: SelectSubset<T, RoutineSlotActivityUpdateArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoutineSlotActivities.
     * @param {RoutineSlotActivityDeleteManyArgs} args - Arguments to filter RoutineSlotActivities to delete.
     * @example
     * // Delete a few RoutineSlotActivities
     * const { count } = await prisma.routineSlotActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoutineSlotActivityDeleteManyArgs>(args?: SelectSubset<T, RoutineSlotActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoutineSlotActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoutineSlotActivities
     * const routineSlotActivity = await prisma.routineSlotActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoutineSlotActivityUpdateManyArgs>(args: SelectSubset<T, RoutineSlotActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoutineSlotActivity.
     * @param {RoutineSlotActivityUpsertArgs} args - Arguments to update or create a RoutineSlotActivity.
     * @example
     * // Update or create a RoutineSlotActivity
     * const routineSlotActivity = await prisma.routineSlotActivity.upsert({
     *   create: {
     *     // ... data to create a RoutineSlotActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoutineSlotActivity we want to update
     *   }
     * })
     */
    upsert<T extends RoutineSlotActivityUpsertArgs>(args: SelectSubset<T, RoutineSlotActivityUpsertArgs<ExtArgs>>): Prisma__RoutineSlotActivityClient<$Result.GetResult<Prisma.$RoutineSlotActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoutineSlotActivities that matches the filter.
     * @param {RoutineSlotActivityFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const routineSlotActivity = await prisma.routineSlotActivity.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: RoutineSlotActivityFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RoutineSlotActivity.
     * @param {RoutineSlotActivityAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const routineSlotActivity = await prisma.routineSlotActivity.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RoutineSlotActivityAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of RoutineSlotActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityCountArgs} args - Arguments to filter RoutineSlotActivities to count.
     * @example
     * // Count the number of RoutineSlotActivities
     * const count = await prisma.routineSlotActivity.count({
     *   where: {
     *     // ... the filter for the RoutineSlotActivities we want to count
     *   }
     * })
    **/
    count<T extends RoutineSlotActivityCountArgs>(
      args?: Subset<T, RoutineSlotActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineSlotActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoutineSlotActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineSlotActivityAggregateArgs>(args: Subset<T, RoutineSlotActivityAggregateArgs>): Prisma.PrismaPromise<GetRoutineSlotActivityAggregateType<T>>

    /**
     * Group by RoutineSlotActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSlotActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineSlotActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineSlotActivityGroupByArgs['orderBy'] }
        : { orderBy?: RoutineSlotActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineSlotActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineSlotActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoutineSlotActivity model
   */
  readonly fields: RoutineSlotActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoutineSlotActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineSlotActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends RoutineSlotActivity$userArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlotActivity$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    slot<T extends RoutineSlotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSlotDefaultArgs<ExtArgs>>): Prisma__RoutineSlotClient<$Result.GetResult<Prisma.$RoutineSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoutineSlotActivity model
   */
  interface RoutineSlotActivityFieldRefs {
    readonly id: FieldRef<"RoutineSlotActivity", 'String'>
    readonly slotId: FieldRef<"RoutineSlotActivity", 'String'>
    readonly activityId: FieldRef<"RoutineSlotActivity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RoutineSlotActivity findUnique
   */
  export type RoutineSlotActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotActivity to fetch.
     */
    where: RoutineSlotActivityWhereUniqueInput
  }

  /**
   * RoutineSlotActivity findUniqueOrThrow
   */
  export type RoutineSlotActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotActivity to fetch.
     */
    where: RoutineSlotActivityWhereUniqueInput
  }

  /**
   * RoutineSlotActivity findFirst
   */
  export type RoutineSlotActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotActivity to fetch.
     */
    where?: RoutineSlotActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotActivities to fetch.
     */
    orderBy?: RoutineSlotActivityOrderByWithRelationInput | RoutineSlotActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlotActivities.
     */
    cursor?: RoutineSlotActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlotActivities.
     */
    distinct?: RoutineSlotActivityScalarFieldEnum | RoutineSlotActivityScalarFieldEnum[]
  }

  /**
   * RoutineSlotActivity findFirstOrThrow
   */
  export type RoutineSlotActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotActivity to fetch.
     */
    where?: RoutineSlotActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotActivities to fetch.
     */
    orderBy?: RoutineSlotActivityOrderByWithRelationInput | RoutineSlotActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSlotActivities.
     */
    cursor?: RoutineSlotActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSlotActivities.
     */
    distinct?: RoutineSlotActivityScalarFieldEnum | RoutineSlotActivityScalarFieldEnum[]
  }

  /**
   * RoutineSlotActivity findMany
   */
  export type RoutineSlotActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSlotActivities to fetch.
     */
    where?: RoutineSlotActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSlotActivities to fetch.
     */
    orderBy?: RoutineSlotActivityOrderByWithRelationInput | RoutineSlotActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoutineSlotActivities.
     */
    cursor?: RoutineSlotActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSlotActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSlotActivities.
     */
    skip?: number
    distinct?: RoutineSlotActivityScalarFieldEnum | RoutineSlotActivityScalarFieldEnum[]
  }

  /**
   * RoutineSlotActivity create
   */
  export type RoutineSlotActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a RoutineSlotActivity.
     */
    data: XOR<RoutineSlotActivityCreateInput, RoutineSlotActivityUncheckedCreateInput>
  }

  /**
   * RoutineSlotActivity createMany
   */
  export type RoutineSlotActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoutineSlotActivities.
     */
    data: RoutineSlotActivityCreateManyInput | RoutineSlotActivityCreateManyInput[]
  }

  /**
   * RoutineSlotActivity update
   */
  export type RoutineSlotActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a RoutineSlotActivity.
     */
    data: XOR<RoutineSlotActivityUpdateInput, RoutineSlotActivityUncheckedUpdateInput>
    /**
     * Choose, which RoutineSlotActivity to update.
     */
    where: RoutineSlotActivityWhereUniqueInput
  }

  /**
   * RoutineSlotActivity updateMany
   */
  export type RoutineSlotActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoutineSlotActivities.
     */
    data: XOR<RoutineSlotActivityUpdateManyMutationInput, RoutineSlotActivityUncheckedUpdateManyInput>
    /**
     * Filter which RoutineSlotActivities to update
     */
    where?: RoutineSlotActivityWhereInput
    /**
     * Limit how many RoutineSlotActivities to update.
     */
    limit?: number
  }

  /**
   * RoutineSlotActivity upsert
   */
  export type RoutineSlotActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the RoutineSlotActivity to update in case it exists.
     */
    where: RoutineSlotActivityWhereUniqueInput
    /**
     * In case the RoutineSlotActivity found by the `where` argument doesn't exist, create a new RoutineSlotActivity with this data.
     */
    create: XOR<RoutineSlotActivityCreateInput, RoutineSlotActivityUncheckedCreateInput>
    /**
     * In case the RoutineSlotActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineSlotActivityUpdateInput, RoutineSlotActivityUncheckedUpdateInput>
  }

  /**
   * RoutineSlotActivity delete
   */
  export type RoutineSlotActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
    /**
     * Filter which RoutineSlotActivity to delete.
     */
    where: RoutineSlotActivityWhereUniqueInput
  }

  /**
   * RoutineSlotActivity deleteMany
   */
  export type RoutineSlotActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSlotActivities to delete
     */
    where?: RoutineSlotActivityWhereInput
    /**
     * Limit how many RoutineSlotActivities to delete.
     */
    limit?: number
  }

  /**
   * RoutineSlotActivity findRaw
   */
  export type RoutineSlotActivityFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlotActivity aggregateRaw
   */
  export type RoutineSlotActivityAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RoutineSlotActivity.user
   */
  export type RoutineSlotActivity$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RoutineSlotActivity without action
   */
  export type RoutineSlotActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSlotActivity
     */
    select?: RoutineSlotActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoutineSlotActivity
     */
    omit?: RoutineSlotActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoutineSlotActivityInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TermScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    derivedFromId: 'derivedFromId',
    layer: 'layer',
    meta: 'meta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


  export const ThreadScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    termId: 'termId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ThreadScalarFieldEnum = (typeof ThreadScalarFieldEnum)[keyof typeof ThreadScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    threadId: 'threadId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    projectId: 'projectId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const ProcessScalarFieldEnum: {
    id: 'id',
    name: 'name',
    goalId: 'goalId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProcessScalarFieldEnum = (typeof ProcessScalarFieldEnum)[keyof typeof ProcessScalarFieldEnum]


  export const ProblemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    processId: 'processId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemScalarFieldEnum = (typeof ProblemScalarFieldEnum)[keyof typeof ProblemScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    name: 'name',
    problemId: 'problemId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    taskId: 'taskId',
    meta: 'meta',
    lastWorkedAt: 'lastWorkedAt',
    daytimeRoutine: 'daytimeRoutine',
    threadRoutine: 'threadRoutine',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const AttemptScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    result: 'result',
    createdAt: 'createdAt'
  };

  export type AttemptScalarFieldEnum = (typeof AttemptScalarFieldEnum)[keyof typeof AttemptScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ResourceScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    url: 'url',
    title: 'title'
  };

  export type ResourceScalarFieldEnum = (typeof ResourceScalarFieldEnum)[keyof typeof ResourceScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    name: 'name',
    details: 'details'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamMemberScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    userId: 'userId',
    role: 'role'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const PathScalarFieldEnum: {
    id: 'id',
    termId: 'termId',
    learningGoalId: 'learningGoalId',
    steps: 'steps',
    createdAt: 'createdAt'
  };

  export type PathScalarFieldEnum = (typeof PathScalarFieldEnum)[keyof typeof PathScalarFieldEnum]


  export const RoutineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoutineScalarFieldEnum = (typeof RoutineScalarFieldEnum)[keyof typeof RoutineScalarFieldEnum]


  export const RoutineSlotScalarFieldEnum: {
    id: 'id',
    routineId: 'routineId',
    label: 'label',
    startTime: 'startTime',
    endTime: 'endTime',
    todos: 'todos',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoutineSlotScalarFieldEnum = (typeof RoutineSlotScalarFieldEnum)[keyof typeof RoutineSlotScalarFieldEnum]


  export const RoutineSlotThreadScalarFieldEnum: {
    id: 'id',
    slotId: 'slotId',
    threadId: 'threadId'
  };

  export type RoutineSlotThreadScalarFieldEnum = (typeof RoutineSlotThreadScalarFieldEnum)[keyof typeof RoutineSlotThreadScalarFieldEnum]


  export const RoutineSlotTaskScalarFieldEnum: {
    id: 'id',
    slotId: 'slotId',
    taskId: 'taskId'
  };

  export type RoutineSlotTaskScalarFieldEnum = (typeof RoutineSlotTaskScalarFieldEnum)[keyof typeof RoutineSlotTaskScalarFieldEnum]


  export const RoutineSlotActivityScalarFieldEnum: {
    id: 'id',
    slotId: 'slotId',
    activityId: 'activityId'
  };

  export type RoutineSlotActivityScalarFieldEnum = (typeof RoutineSlotActivityScalarFieldEnum)[keyof typeof RoutineSlotActivityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'TermKind'
   */
  export type EnumTermKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TermKind'>
    


  /**
   * Reference to a field of type 'TermKind[]'
   */
  export type ListEnumTermKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TermKind[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'GoalType'
   */
  export type EnumGoalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalType'>
    


  /**
   * Reference to a field of type 'GoalType[]'
   */
  export type ListEnumGoalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    Term?: TermListRelationFilter
    Thread?: ThreadListRelationFilter
    Project?: ProjectListRelationFilter
    Goal?: GoalListRelationFilter
    Process?: ProcessListRelationFilter
    Problem?: ProblemListRelationFilter
    Task?: TaskListRelationFilter
    Activity?: ActivityListRelationFilter
    Attempt?: AttemptListRelationFilter
    Comment?: CommentListRelationFilter
    Resource?: ResourceListRelationFilter
    Review?: ReviewListRelationFilter
    Team?: TeamListRelationFilter
    TeamMember?: TeamMemberListRelationFilter
    Path?: PathListRelationFilter
    Routine?: RoutineListRelationFilter
    RoutineSlot?: RoutineSlotListRelationFilter
    RoutineSlotThread?: RoutineSlotThreadListRelationFilter
    RoutineSlotTask?: RoutineSlotTaskListRelationFilter
    RoutineSlotActivity?: RoutineSlotActivityListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Term?: TermOrderByRelationAggregateInput
    Thread?: ThreadOrderByRelationAggregateInput
    Project?: ProjectOrderByRelationAggregateInput
    Goal?: GoalOrderByRelationAggregateInput
    Process?: ProcessOrderByRelationAggregateInput
    Problem?: ProblemOrderByRelationAggregateInput
    Task?: TaskOrderByRelationAggregateInput
    Activity?: ActivityOrderByRelationAggregateInput
    Attempt?: AttemptOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
    Resource?: ResourceOrderByRelationAggregateInput
    Review?: ReviewOrderByRelationAggregateInput
    Team?: TeamOrderByRelationAggregateInput
    TeamMember?: TeamMemberOrderByRelationAggregateInput
    Path?: PathOrderByRelationAggregateInput
    Routine?: RoutineOrderByRelationAggregateInput
    RoutineSlot?: RoutineSlotOrderByRelationAggregateInput
    RoutineSlotThread?: RoutineSlotThreadOrderByRelationAggregateInput
    RoutineSlotTask?: RoutineSlotTaskOrderByRelationAggregateInput
    RoutineSlotActivity?: RoutineSlotActivityOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    Term?: TermListRelationFilter
    Thread?: ThreadListRelationFilter
    Project?: ProjectListRelationFilter
    Goal?: GoalListRelationFilter
    Process?: ProcessListRelationFilter
    Problem?: ProblemListRelationFilter
    Task?: TaskListRelationFilter
    Activity?: ActivityListRelationFilter
    Attempt?: AttemptListRelationFilter
    Comment?: CommentListRelationFilter
    Resource?: ResourceListRelationFilter
    Review?: ReviewListRelationFilter
    Team?: TeamListRelationFilter
    TeamMember?: TeamMemberListRelationFilter
    Path?: PathListRelationFilter
    Routine?: RoutineListRelationFilter
    RoutineSlot?: RoutineSlotListRelationFilter
    RoutineSlotThread?: RoutineSlotThreadListRelationFilter
    RoutineSlotTask?: RoutineSlotTaskListRelationFilter
    RoutineSlotActivity?: RoutineSlotActivityListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
  }

  export type TermWhereInput = {
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    id?: StringFilter<"Term"> | string
    name?: StringFilter<"Term"> | string
    description?: StringNullableFilter<"Term"> | string | null
    type?: EnumTermKindFilter<"Term"> | $Enums.TermKind
    derivedFromId?: StringNullableFilter<"Term"> | string | null
    layer?: StringNullableFilter<"Term"> | string | null
    meta?: JsonNullableFilter<"Term">
    createdAt?: DateTimeFilter<"Term"> | Date | string
    updatedAt?: DateTimeFilter<"Term"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    derivedFrom?: XOR<TermNullableScalarRelationFilter, TermWhereInput> | null
    derivedTerms?: TermListRelationFilter
    threads?: ThreadListRelationFilter
    paths?: PathListRelationFilter
  }

  export type TermOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    derivedFromId?: SortOrder
    layer?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    derivedFrom?: TermOrderByWithRelationInput
    derivedTerms?: TermOrderByRelationAggregateInput
    threads?: ThreadOrderByRelationAggregateInput
    paths?: PathOrderByRelationAggregateInput
  }

  export type TermWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    name?: StringFilter<"Term"> | string
    description?: StringNullableFilter<"Term"> | string | null
    type?: EnumTermKindFilter<"Term"> | $Enums.TermKind
    derivedFromId?: StringNullableFilter<"Term"> | string | null
    layer?: StringNullableFilter<"Term"> | string | null
    meta?: JsonNullableFilter<"Term">
    createdAt?: DateTimeFilter<"Term"> | Date | string
    updatedAt?: DateTimeFilter<"Term"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    derivedFrom?: XOR<TermNullableScalarRelationFilter, TermWhereInput> | null
    derivedTerms?: TermListRelationFilter
    threads?: ThreadListRelationFilter
    paths?: PathListRelationFilter
  }, "id">

  export type TermOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    derivedFromId?: SortOrder
    layer?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TermCountOrderByAggregateInput
    _max?: TermMaxOrderByAggregateInput
    _min?: TermMinOrderByAggregateInput
  }

  export type TermScalarWhereWithAggregatesInput = {
    AND?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    OR?: TermScalarWhereWithAggregatesInput[]
    NOT?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Term"> | string
    name?: StringWithAggregatesFilter<"Term"> | string
    description?: StringNullableWithAggregatesFilter<"Term"> | string | null
    type?: EnumTermKindWithAggregatesFilter<"Term"> | $Enums.TermKind
    derivedFromId?: StringNullableWithAggregatesFilter<"Term"> | string | null
    layer?: StringNullableWithAggregatesFilter<"Term"> | string | null
    meta?: JsonNullableWithAggregatesFilter<"Term">
    createdAt?: DateTimeWithAggregatesFilter<"Term"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Term"> | Date | string
  }

  export type ThreadWhereInput = {
    AND?: ThreadWhereInput | ThreadWhereInput[]
    OR?: ThreadWhereInput[]
    NOT?: ThreadWhereInput | ThreadWhereInput[]
    id?: StringFilter<"Thread"> | string
    name?: StringFilter<"Thread"> | string
    description?: StringNullableFilter<"Thread"> | string | null
    termId?: StringFilter<"Thread"> | string
    meta?: JsonNullableFilter<"Thread">
    lastWorkedAt?: DateTimeNullableFilter<"Thread"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Thread">
    threadRoutine?: JsonNullableFilter<"Thread">
    createdAt?: DateTimeFilter<"Thread"> | Date | string
    updatedAt?: DateTimeFilter<"Thread"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    term?: XOR<TermScalarRelationFilter, TermWhereInput>
    projects?: ProjectListRelationFilter
  }

  export type ThreadOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    termId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    term?: TermOrderByWithRelationInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type ThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThreadWhereInput | ThreadWhereInput[]
    OR?: ThreadWhereInput[]
    NOT?: ThreadWhereInput | ThreadWhereInput[]
    name?: StringFilter<"Thread"> | string
    description?: StringNullableFilter<"Thread"> | string | null
    termId?: StringFilter<"Thread"> | string
    meta?: JsonNullableFilter<"Thread">
    lastWorkedAt?: DateTimeNullableFilter<"Thread"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Thread">
    threadRoutine?: JsonNullableFilter<"Thread">
    createdAt?: DateTimeFilter<"Thread"> | Date | string
    updatedAt?: DateTimeFilter<"Thread"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    term?: XOR<TermScalarRelationFilter, TermWhereInput>
    projects?: ProjectListRelationFilter
  }, "id">

  export type ThreadOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    termId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ThreadCountOrderByAggregateInput
    _max?: ThreadMaxOrderByAggregateInput
    _min?: ThreadMinOrderByAggregateInput
  }

  export type ThreadScalarWhereWithAggregatesInput = {
    AND?: ThreadScalarWhereWithAggregatesInput | ThreadScalarWhereWithAggregatesInput[]
    OR?: ThreadScalarWhereWithAggregatesInput[]
    NOT?: ThreadScalarWhereWithAggregatesInput | ThreadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Thread"> | string
    name?: StringWithAggregatesFilter<"Thread"> | string
    description?: StringNullableWithAggregatesFilter<"Thread"> | string | null
    termId?: StringWithAggregatesFilter<"Thread"> | string
    meta?: JsonNullableWithAggregatesFilter<"Thread">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Thread"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Thread">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Thread">
    createdAt?: DateTimeWithAggregatesFilter<"Thread"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Thread"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    threadId?: StringFilter<"Project"> | string
    meta?: JsonNullableFilter<"Project">
    lastWorkedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Project">
    threadRoutine?: JsonNullableFilter<"Project">
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    thread?: XOR<ThreadScalarRelationFilter, ThreadWhereInput>
    goals?: GoalListRelationFilter
    teams?: TeamListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    threadId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    thread?: ThreadOrderByWithRelationInput
    goals?: GoalOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    threadId?: StringFilter<"Project"> | string
    meta?: JsonNullableFilter<"Project">
    lastWorkedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Project">
    threadRoutine?: JsonNullableFilter<"Project">
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    thread?: XOR<ThreadScalarRelationFilter, ThreadWhereInput>
    goals?: GoalListRelationFilter
    teams?: TeamListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    threadId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    threadId?: StringWithAggregatesFilter<"Project"> | string
    meta?: JsonNullableWithAggregatesFilter<"Project">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Project">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Project">
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    type?: EnumGoalTypeFilter<"Goal"> | $Enums.GoalType
    projectId?: StringFilter<"Goal"> | string
    meta?: JsonNullableFilter<"Goal">
    lastWorkedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Goal">
    threadRoutine?: JsonNullableFilter<"Goal">
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    processes?: ProcessListRelationFilter
    pathsFromTerm?: PathListRelationFilter
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    processes?: ProcessOrderByRelationAggregateInput
    pathsFromTerm?: PathOrderByRelationAggregateInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    type?: EnumGoalTypeFilter<"Goal"> | $Enums.GoalType
    projectId?: StringFilter<"Goal"> | string
    meta?: JsonNullableFilter<"Goal">
    lastWorkedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Goal">
    threadRoutine?: JsonNullableFilter<"Goal">
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    processes?: ProcessListRelationFilter
    pathsFromTerm?: PathListRelationFilter
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    name?: StringWithAggregatesFilter<"Goal"> | string
    description?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    type?: EnumGoalTypeWithAggregatesFilter<"Goal"> | $Enums.GoalType
    projectId?: StringWithAggregatesFilter<"Goal"> | string
    meta?: JsonNullableWithAggregatesFilter<"Goal">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Goal"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Goal">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Goal">
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
  }

  export type ProcessWhereInput = {
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    id?: StringFilter<"Process"> | string
    name?: StringFilter<"Process"> | string
    goalId?: StringFilter<"Process"> | string
    meta?: JsonNullableFilter<"Process">
    lastWorkedAt?: DateTimeNullableFilter<"Process"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Process">
    threadRoutine?: JsonNullableFilter<"Process">
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    problems?: ProblemListRelationFilter
  }

  export type ProcessOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    goalId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    goal?: GoalOrderByWithRelationInput
    problems?: ProblemOrderByRelationAggregateInput
  }

  export type ProcessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    name?: StringFilter<"Process"> | string
    goalId?: StringFilter<"Process"> | string
    meta?: JsonNullableFilter<"Process">
    lastWorkedAt?: DateTimeNullableFilter<"Process"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Process">
    threadRoutine?: JsonNullableFilter<"Process">
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    problems?: ProblemListRelationFilter
  }, "id">

  export type ProcessOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    goalId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProcessCountOrderByAggregateInput
    _max?: ProcessMaxOrderByAggregateInput
    _min?: ProcessMinOrderByAggregateInput
  }

  export type ProcessScalarWhereWithAggregatesInput = {
    AND?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    OR?: ProcessScalarWhereWithAggregatesInput[]
    NOT?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Process"> | string
    name?: StringWithAggregatesFilter<"Process"> | string
    goalId?: StringWithAggregatesFilter<"Process"> | string
    meta?: JsonNullableWithAggregatesFilter<"Process">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Process"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Process">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Process">
    createdAt?: DateTimeWithAggregatesFilter<"Process"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Process"> | Date | string
  }

  export type ProblemWhereInput = {
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    id?: StringFilter<"Problem"> | string
    name?: StringFilter<"Problem"> | string
    processId?: StringFilter<"Problem"> | string
    meta?: JsonNullableFilter<"Problem">
    lastWorkedAt?: DateTimeNullableFilter<"Problem"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Problem">
    threadRoutine?: JsonNullableFilter<"Problem">
    createdAt?: DateTimeFilter<"Problem"> | Date | string
    updatedAt?: DateTimeFilter<"Problem"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    process?: XOR<ProcessScalarRelationFilter, ProcessWhereInput>
    tasks?: TaskListRelationFilter
  }

  export type ProblemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    processId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    process?: ProcessOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type ProblemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    name?: StringFilter<"Problem"> | string
    processId?: StringFilter<"Problem"> | string
    meta?: JsonNullableFilter<"Problem">
    lastWorkedAt?: DateTimeNullableFilter<"Problem"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Problem">
    threadRoutine?: JsonNullableFilter<"Problem">
    createdAt?: DateTimeFilter<"Problem"> | Date | string
    updatedAt?: DateTimeFilter<"Problem"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    process?: XOR<ProcessScalarRelationFilter, ProcessWhereInput>
    tasks?: TaskListRelationFilter
  }, "id">

  export type ProblemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    processId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemCountOrderByAggregateInput
    _max?: ProblemMaxOrderByAggregateInput
    _min?: ProblemMinOrderByAggregateInput
  }

  export type ProblemScalarWhereWithAggregatesInput = {
    AND?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    OR?: ProblemScalarWhereWithAggregatesInput[]
    NOT?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Problem"> | string
    name?: StringWithAggregatesFilter<"Problem"> | string
    processId?: StringWithAggregatesFilter<"Problem"> | string
    meta?: JsonNullableWithAggregatesFilter<"Problem">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Problem"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Problem">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Problem">
    createdAt?: DateTimeWithAggregatesFilter<"Problem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Problem"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    problemId?: StringFilter<"Task"> | string
    meta?: JsonNullableFilter<"Task">
    lastWorkedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Task">
    threadRoutine?: JsonNullableFilter<"Task">
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    activities?: ActivityListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    problemId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    problem?: ProblemOrderByWithRelationInput
    activities?: ActivityOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    name?: StringFilter<"Task"> | string
    problemId?: StringFilter<"Task"> | string
    meta?: JsonNullableFilter<"Task">
    lastWorkedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Task">
    threadRoutine?: JsonNullableFilter<"Task">
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    activities?: ActivityListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    problemId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    name?: StringWithAggregatesFilter<"Task"> | string
    problemId?: StringWithAggregatesFilter<"Task"> | string
    meta?: JsonNullableWithAggregatesFilter<"Task">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Task">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Task">
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: StringFilter<"Activity"> | string
    name?: StringFilter<"Activity"> | string
    taskId?: StringFilter<"Activity"> | string
    meta?: JsonNullableFilter<"Activity">
    lastWorkedAt?: DateTimeNullableFilter<"Activity"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Activity">
    threadRoutine?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    attempts?: AttemptListRelationFilter
    comments?: CommentListRelationFilter
    resources?: ResourceListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    taskId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
    attempts?: AttemptOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    resources?: ResourceOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    name?: StringFilter<"Activity"> | string
    taskId?: StringFilter<"Activity"> | string
    meta?: JsonNullableFilter<"Activity">
    lastWorkedAt?: DateTimeNullableFilter<"Activity"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Activity">
    threadRoutine?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    attempts?: AttemptListRelationFilter
    comments?: CommentListRelationFilter
    resources?: ResourceListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    taskId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activity"> | string
    name?: StringWithAggregatesFilter<"Activity"> | string
    taskId?: StringWithAggregatesFilter<"Activity"> | string
    meta?: JsonNullableWithAggregatesFilter<"Activity">
    lastWorkedAt?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
    daytimeRoutine?: JsonNullableWithAggregatesFilter<"Activity">
    threadRoutine?: JsonNullableWithAggregatesFilter<"Activity">
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
  }

  export type AttemptWhereInput = {
    AND?: AttemptWhereInput | AttemptWhereInput[]
    OR?: AttemptWhereInput[]
    NOT?: AttemptWhereInput | AttemptWhereInput[]
    id?: StringFilter<"Attempt"> | string
    activityId?: StringFilter<"Attempt"> | string
    result?: StringNullableFilter<"Attempt"> | string | null
    createdAt?: DateTimeFilter<"Attempt"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type AttemptOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    result?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type AttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttemptWhereInput | AttemptWhereInput[]
    OR?: AttemptWhereInput[]
    NOT?: AttemptWhereInput | AttemptWhereInput[]
    activityId?: StringFilter<"Attempt"> | string
    result?: StringNullableFilter<"Attempt"> | string | null
    createdAt?: DateTimeFilter<"Attempt"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type AttemptOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    result?: SortOrder
    createdAt?: SortOrder
    _count?: AttemptCountOrderByAggregateInput
    _max?: AttemptMaxOrderByAggregateInput
    _min?: AttemptMinOrderByAggregateInput
  }

  export type AttemptScalarWhereWithAggregatesInput = {
    AND?: AttemptScalarWhereWithAggregatesInput | AttemptScalarWhereWithAggregatesInput[]
    OR?: AttemptScalarWhereWithAggregatesInput[]
    NOT?: AttemptScalarWhereWithAggregatesInput | AttemptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attempt"> | string
    activityId?: StringWithAggregatesFilter<"Attempt"> | string
    result?: StringNullableWithAggregatesFilter<"Attempt"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Attempt"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    activityId?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    activityId?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    activityId?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type ResourceWhereInput = {
    AND?: ResourceWhereInput | ResourceWhereInput[]
    OR?: ResourceWhereInput[]
    NOT?: ResourceWhereInput | ResourceWhereInput[]
    id?: StringFilter<"Resource"> | string
    activityId?: StringFilter<"Resource"> | string
    url?: StringFilter<"Resource"> | string
    title?: StringNullableFilter<"Resource"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type ResourceOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    url?: SortOrder
    title?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type ResourceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResourceWhereInput | ResourceWhereInput[]
    OR?: ResourceWhereInput[]
    NOT?: ResourceWhereInput | ResourceWhereInput[]
    activityId?: StringFilter<"Resource"> | string
    url?: StringFilter<"Resource"> | string
    title?: StringNullableFilter<"Resource"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type ResourceOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    url?: SortOrder
    title?: SortOrder
    _count?: ResourceCountOrderByAggregateInput
    _max?: ResourceMaxOrderByAggregateInput
    _min?: ResourceMinOrderByAggregateInput
  }

  export type ResourceScalarWhereWithAggregatesInput = {
    AND?: ResourceScalarWhereWithAggregatesInput | ResourceScalarWhereWithAggregatesInput[]
    OR?: ResourceScalarWhereWithAggregatesInput[]
    NOT?: ResourceScalarWhereWithAggregatesInput | ResourceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Resource"> | string
    activityId?: StringWithAggregatesFilter<"Resource"> | string
    url?: StringWithAggregatesFilter<"Resource"> | string
    title?: StringNullableWithAggregatesFilter<"Resource"> | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    activityId?: StringFilter<"Review"> | string
    content?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    activityId?: StringFilter<"Review"> | string
    content?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    activityId?: StringWithAggregatesFilter<"Review"> | string
    content?: StringWithAggregatesFilter<"Review"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    projectId?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    details?: JsonNullableFilter<"Team">
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    members?: TeamMemberListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    details?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    members?: TeamMemberOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    projectId?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    details?: JsonNullableFilter<"Team">
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    members?: TeamMemberListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    details?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    projectId?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    details?: JsonNullableWithAggregatesFilter<"Team">
  }

  export type TeamMemberWhereInput = {
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    id?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    userId?: StringFilter<"TeamMember"> | string
    role?: StringNullableFilter<"TeamMember"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type TeamMemberOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    teamId?: StringFilter<"TeamMember"> | string
    userId?: StringFilter<"TeamMember"> | string
    role?: StringNullableFilter<"TeamMember"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id">

  export type TeamMemberOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    OR?: TeamMemberScalarWhereWithAggregatesInput[]
    NOT?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamMember"> | string
    teamId?: StringWithAggregatesFilter<"TeamMember"> | string
    userId?: StringWithAggregatesFilter<"TeamMember"> | string
    role?: StringNullableWithAggregatesFilter<"TeamMember"> | string | null
  }

  export type PathWhereInput = {
    AND?: PathWhereInput | PathWhereInput[]
    OR?: PathWhereInput[]
    NOT?: PathWhereInput | PathWhereInput[]
    id?: StringFilter<"Path"> | string
    termId?: StringFilter<"Path"> | string
    learningGoalId?: StringFilter<"Path"> | string
    steps?: JsonNullableFilter<"Path">
    createdAt?: DateTimeFilter<"Path"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    term?: XOR<TermScalarRelationFilter, TermWhereInput>
    learningGoal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
  }

  export type PathOrderByWithRelationInput = {
    id?: SortOrder
    termId?: SortOrder
    learningGoalId?: SortOrder
    steps?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    term?: TermOrderByWithRelationInput
    learningGoal?: GoalOrderByWithRelationInput
  }

  export type PathWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PathWhereInput | PathWhereInput[]
    OR?: PathWhereInput[]
    NOT?: PathWhereInput | PathWhereInput[]
    termId?: StringFilter<"Path"> | string
    learningGoalId?: StringFilter<"Path"> | string
    steps?: JsonNullableFilter<"Path">
    createdAt?: DateTimeFilter<"Path"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    term?: XOR<TermScalarRelationFilter, TermWhereInput>
    learningGoal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
  }, "id">

  export type PathOrderByWithAggregationInput = {
    id?: SortOrder
    termId?: SortOrder
    learningGoalId?: SortOrder
    steps?: SortOrder
    createdAt?: SortOrder
    _count?: PathCountOrderByAggregateInput
    _max?: PathMaxOrderByAggregateInput
    _min?: PathMinOrderByAggregateInput
  }

  export type PathScalarWhereWithAggregatesInput = {
    AND?: PathScalarWhereWithAggregatesInput | PathScalarWhereWithAggregatesInput[]
    OR?: PathScalarWhereWithAggregatesInput[]
    NOT?: PathScalarWhereWithAggregatesInput | PathScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Path"> | string
    termId?: StringWithAggregatesFilter<"Path"> | string
    learningGoalId?: StringWithAggregatesFilter<"Path"> | string
    steps?: JsonNullableWithAggregatesFilter<"Path">
    createdAt?: DateTimeWithAggregatesFilter<"Path"> | Date | string
  }

  export type RoutineWhereInput = {
    AND?: RoutineWhereInput | RoutineWhereInput[]
    OR?: RoutineWhereInput[]
    NOT?: RoutineWhereInput | RoutineWhereInput[]
    id?: StringFilter<"Routine"> | string
    name?: StringFilter<"Routine"> | string
    ownerId?: StringNullableFilter<"Routine"> | string | null
    createdAt?: DateTimeFilter<"Routine"> | Date | string
    updatedAt?: DateTimeFilter<"Routine"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slots?: RoutineSlotListRelationFilter
  }

  export type RoutineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    slots?: RoutineSlotOrderByRelationAggregateInput
  }

  export type RoutineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoutineWhereInput | RoutineWhereInput[]
    OR?: RoutineWhereInput[]
    NOT?: RoutineWhereInput | RoutineWhereInput[]
    name?: StringFilter<"Routine"> | string
    ownerId?: StringNullableFilter<"Routine"> | string | null
    createdAt?: DateTimeFilter<"Routine"> | Date | string
    updatedAt?: DateTimeFilter<"Routine"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slots?: RoutineSlotListRelationFilter
  }, "id">

  export type RoutineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoutineCountOrderByAggregateInput
    _max?: RoutineMaxOrderByAggregateInput
    _min?: RoutineMinOrderByAggregateInput
  }

  export type RoutineScalarWhereWithAggregatesInput = {
    AND?: RoutineScalarWhereWithAggregatesInput | RoutineScalarWhereWithAggregatesInput[]
    OR?: RoutineScalarWhereWithAggregatesInput[]
    NOT?: RoutineScalarWhereWithAggregatesInput | RoutineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Routine"> | string
    name?: StringWithAggregatesFilter<"Routine"> | string
    ownerId?: StringNullableWithAggregatesFilter<"Routine"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Routine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Routine"> | Date | string
  }

  export type RoutineSlotWhereInput = {
    AND?: RoutineSlotWhereInput | RoutineSlotWhereInput[]
    OR?: RoutineSlotWhereInput[]
    NOT?: RoutineSlotWhereInput | RoutineSlotWhereInput[]
    id?: StringFilter<"RoutineSlot"> | string
    routineId?: StringFilter<"RoutineSlot"> | string
    label?: StringFilter<"RoutineSlot"> | string
    startTime?: StringNullableFilter<"RoutineSlot"> | string | null
    endTime?: StringNullableFilter<"RoutineSlot"> | string | null
    todos?: JsonNullableFilter<"RoutineSlot">
    createdAt?: DateTimeFilter<"RoutineSlot"> | Date | string
    updatedAt?: DateTimeFilter<"RoutineSlot"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    routine?: XOR<RoutineScalarRelationFilter, RoutineWhereInput>
    slotThreads?: RoutineSlotThreadListRelationFilter
    slotTasks?: RoutineSlotTaskListRelationFilter
    slotActivities?: RoutineSlotActivityListRelationFilter
  }

  export type RoutineSlotOrderByWithRelationInput = {
    id?: SortOrder
    routineId?: SortOrder
    label?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    todos?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    routine?: RoutineOrderByWithRelationInput
    slotThreads?: RoutineSlotThreadOrderByRelationAggregateInput
    slotTasks?: RoutineSlotTaskOrderByRelationAggregateInput
    slotActivities?: RoutineSlotActivityOrderByRelationAggregateInput
  }

  export type RoutineSlotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoutineSlotWhereInput | RoutineSlotWhereInput[]
    OR?: RoutineSlotWhereInput[]
    NOT?: RoutineSlotWhereInput | RoutineSlotWhereInput[]
    routineId?: StringFilter<"RoutineSlot"> | string
    label?: StringFilter<"RoutineSlot"> | string
    startTime?: StringNullableFilter<"RoutineSlot"> | string | null
    endTime?: StringNullableFilter<"RoutineSlot"> | string | null
    todos?: JsonNullableFilter<"RoutineSlot">
    createdAt?: DateTimeFilter<"RoutineSlot"> | Date | string
    updatedAt?: DateTimeFilter<"RoutineSlot"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    routine?: XOR<RoutineScalarRelationFilter, RoutineWhereInput>
    slotThreads?: RoutineSlotThreadListRelationFilter
    slotTasks?: RoutineSlotTaskListRelationFilter
    slotActivities?: RoutineSlotActivityListRelationFilter
  }, "id">

  export type RoutineSlotOrderByWithAggregationInput = {
    id?: SortOrder
    routineId?: SortOrder
    label?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    todos?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoutineSlotCountOrderByAggregateInput
    _max?: RoutineSlotMaxOrderByAggregateInput
    _min?: RoutineSlotMinOrderByAggregateInput
  }

  export type RoutineSlotScalarWhereWithAggregatesInput = {
    AND?: RoutineSlotScalarWhereWithAggregatesInput | RoutineSlotScalarWhereWithAggregatesInput[]
    OR?: RoutineSlotScalarWhereWithAggregatesInput[]
    NOT?: RoutineSlotScalarWhereWithAggregatesInput | RoutineSlotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoutineSlot"> | string
    routineId?: StringWithAggregatesFilter<"RoutineSlot"> | string
    label?: StringWithAggregatesFilter<"RoutineSlot"> | string
    startTime?: StringNullableWithAggregatesFilter<"RoutineSlot"> | string | null
    endTime?: StringNullableWithAggregatesFilter<"RoutineSlot"> | string | null
    todos?: JsonNullableWithAggregatesFilter<"RoutineSlot">
    createdAt?: DateTimeWithAggregatesFilter<"RoutineSlot"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoutineSlot"> | Date | string
  }

  export type RoutineSlotThreadWhereInput = {
    AND?: RoutineSlotThreadWhereInput | RoutineSlotThreadWhereInput[]
    OR?: RoutineSlotThreadWhereInput[]
    NOT?: RoutineSlotThreadWhereInput | RoutineSlotThreadWhereInput[]
    id?: StringFilter<"RoutineSlotThread"> | string
    slotId?: StringFilter<"RoutineSlotThread"> | string
    threadId?: StringFilter<"RoutineSlotThread"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slot?: XOR<RoutineSlotScalarRelationFilter, RoutineSlotWhereInput>
  }

  export type RoutineSlotThreadOrderByWithRelationInput = {
    id?: SortOrder
    slotId?: SortOrder
    threadId?: SortOrder
    user?: UserOrderByWithRelationInput
    slot?: RoutineSlotOrderByWithRelationInput
  }

  export type RoutineSlotThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoutineSlotThreadWhereInput | RoutineSlotThreadWhereInput[]
    OR?: RoutineSlotThreadWhereInput[]
    NOT?: RoutineSlotThreadWhereInput | RoutineSlotThreadWhereInput[]
    slotId?: StringFilter<"RoutineSlotThread"> | string
    threadId?: StringFilter<"RoutineSlotThread"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slot?: XOR<RoutineSlotScalarRelationFilter, RoutineSlotWhereInput>
  }, "id">

  export type RoutineSlotThreadOrderByWithAggregationInput = {
    id?: SortOrder
    slotId?: SortOrder
    threadId?: SortOrder
    _count?: RoutineSlotThreadCountOrderByAggregateInput
    _max?: RoutineSlotThreadMaxOrderByAggregateInput
    _min?: RoutineSlotThreadMinOrderByAggregateInput
  }

  export type RoutineSlotThreadScalarWhereWithAggregatesInput = {
    AND?: RoutineSlotThreadScalarWhereWithAggregatesInput | RoutineSlotThreadScalarWhereWithAggregatesInput[]
    OR?: RoutineSlotThreadScalarWhereWithAggregatesInput[]
    NOT?: RoutineSlotThreadScalarWhereWithAggregatesInput | RoutineSlotThreadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoutineSlotThread"> | string
    slotId?: StringWithAggregatesFilter<"RoutineSlotThread"> | string
    threadId?: StringWithAggregatesFilter<"RoutineSlotThread"> | string
  }

  export type RoutineSlotTaskWhereInput = {
    AND?: RoutineSlotTaskWhereInput | RoutineSlotTaskWhereInput[]
    OR?: RoutineSlotTaskWhereInput[]
    NOT?: RoutineSlotTaskWhereInput | RoutineSlotTaskWhereInput[]
    id?: StringFilter<"RoutineSlotTask"> | string
    slotId?: StringFilter<"RoutineSlotTask"> | string
    taskId?: StringFilter<"RoutineSlotTask"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slot?: XOR<RoutineSlotScalarRelationFilter, RoutineSlotWhereInput>
  }

  export type RoutineSlotTaskOrderByWithRelationInput = {
    id?: SortOrder
    slotId?: SortOrder
    taskId?: SortOrder
    user?: UserOrderByWithRelationInput
    slot?: RoutineSlotOrderByWithRelationInput
  }

  export type RoutineSlotTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoutineSlotTaskWhereInput | RoutineSlotTaskWhereInput[]
    OR?: RoutineSlotTaskWhereInput[]
    NOT?: RoutineSlotTaskWhereInput | RoutineSlotTaskWhereInput[]
    slotId?: StringFilter<"RoutineSlotTask"> | string
    taskId?: StringFilter<"RoutineSlotTask"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slot?: XOR<RoutineSlotScalarRelationFilter, RoutineSlotWhereInput>
  }, "id">

  export type RoutineSlotTaskOrderByWithAggregationInput = {
    id?: SortOrder
    slotId?: SortOrder
    taskId?: SortOrder
    _count?: RoutineSlotTaskCountOrderByAggregateInput
    _max?: RoutineSlotTaskMaxOrderByAggregateInput
    _min?: RoutineSlotTaskMinOrderByAggregateInput
  }

  export type RoutineSlotTaskScalarWhereWithAggregatesInput = {
    AND?: RoutineSlotTaskScalarWhereWithAggregatesInput | RoutineSlotTaskScalarWhereWithAggregatesInput[]
    OR?: RoutineSlotTaskScalarWhereWithAggregatesInput[]
    NOT?: RoutineSlotTaskScalarWhereWithAggregatesInput | RoutineSlotTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoutineSlotTask"> | string
    slotId?: StringWithAggregatesFilter<"RoutineSlotTask"> | string
    taskId?: StringWithAggregatesFilter<"RoutineSlotTask"> | string
  }

  export type RoutineSlotActivityWhereInput = {
    AND?: RoutineSlotActivityWhereInput | RoutineSlotActivityWhereInput[]
    OR?: RoutineSlotActivityWhereInput[]
    NOT?: RoutineSlotActivityWhereInput | RoutineSlotActivityWhereInput[]
    id?: StringFilter<"RoutineSlotActivity"> | string
    slotId?: StringFilter<"RoutineSlotActivity"> | string
    activityId?: StringFilter<"RoutineSlotActivity"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slot?: XOR<RoutineSlotScalarRelationFilter, RoutineSlotWhereInput>
  }

  export type RoutineSlotActivityOrderByWithRelationInput = {
    id?: SortOrder
    slotId?: SortOrder
    activityId?: SortOrder
    user?: UserOrderByWithRelationInput
    slot?: RoutineSlotOrderByWithRelationInput
  }

  export type RoutineSlotActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoutineSlotActivityWhereInput | RoutineSlotActivityWhereInput[]
    OR?: RoutineSlotActivityWhereInput[]
    NOT?: RoutineSlotActivityWhereInput | RoutineSlotActivityWhereInput[]
    slotId?: StringFilter<"RoutineSlotActivity"> | string
    activityId?: StringFilter<"RoutineSlotActivity"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    slot?: XOR<RoutineSlotScalarRelationFilter, RoutineSlotWhereInput>
  }, "id">

  export type RoutineSlotActivityOrderByWithAggregationInput = {
    id?: SortOrder
    slotId?: SortOrder
    activityId?: SortOrder
    _count?: RoutineSlotActivityCountOrderByAggregateInput
    _max?: RoutineSlotActivityMaxOrderByAggregateInput
    _min?: RoutineSlotActivityMinOrderByAggregateInput
  }

  export type RoutineSlotActivityScalarWhereWithAggregatesInput = {
    AND?: RoutineSlotActivityScalarWhereWithAggregatesInput | RoutineSlotActivityScalarWhereWithAggregatesInput[]
    OR?: RoutineSlotActivityScalarWhereWithAggregatesInput[]
    NOT?: RoutineSlotActivityScalarWhereWithAggregatesInput | RoutineSlotActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoutineSlotActivity"> | string
    slotId?: StringWithAggregatesFilter<"RoutineSlotActivity"> | string
    activityId?: StringWithAggregatesFilter<"RoutineSlotActivity"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TermCreateInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTermInput
    derivedFrom?: TermCreateNestedOneWithoutDerivedTermsInput
    derivedTerms?: TermCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadCreateNestedManyWithoutTermInput
    paths?: PathCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    derivedTerms?: TermUncheckedCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadUncheckedCreateNestedManyWithoutTermInput
    paths?: PathUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTermNestedInput
    derivedFrom?: TermUpdateOneWithoutDerivedTermsNestedInput
    derivedTerms?: TermUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUpdateManyWithoutTermNestedInput
    paths?: PathUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    derivedTerms?: TermUncheckedUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUncheckedUpdateManyWithoutTermNestedInput
    paths?: PathUncheckedUpdateManyWithoutTermNestedInput
  }

  export type TermCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TermUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreadCreateInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutThreadInput
    term: TermCreateNestedOneWithoutThreadsInput
    projects?: ProjectCreateNestedManyWithoutThreadInput
  }

  export type ThreadUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    termId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ThreadUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutThreadNestedInput
    term?: TermUpdateOneRequiredWithoutThreadsNestedInput
    projects?: ProjectUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    termId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ThreadCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    termId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreadUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreadUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    termId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProjectInput
    thread: ThreadCreateNestedOneWithoutProjectsInput
    goals?: GoalCreateNestedManyWithoutProjectInput
    teams?: TeamCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    threadId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutProjectInput
    teams?: TeamUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProjectNestedInput
    thread?: ThreadUpdateOneRequiredWithoutProjectsNestedInput
    goals?: GoalUpdateManyWithoutProjectNestedInput
    teams?: TeamUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutProjectNestedInput
    teams?: TeamUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    threadId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutGoalInput
    project: ProjectCreateNestedOneWithoutGoalsInput
    processes?: ProcessCreateNestedManyWithoutGoalInput
    pathsFromTerm?: PathCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.GoalType
    projectId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processes?: ProcessUncheckedCreateNestedManyWithoutGoalInput
    pathsFromTerm?: PathUncheckedCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGoalNestedInput
    project?: ProjectUpdateOneRequiredWithoutGoalsNestedInput
    processes?: ProcessUpdateManyWithoutGoalNestedInput
    pathsFromTerm?: PathUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    projectId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processes?: ProcessUncheckedUpdateManyWithoutGoalNestedInput
    pathsFromTerm?: PathUncheckedUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.GoalType
    projectId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    projectId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessCreateInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProcessInput
    goal: GoalCreateNestedOneWithoutProcessesInput
    problems?: ProblemCreateNestedManyWithoutProcessInput
  }

  export type ProcessUncheckedCreateInput = {
    id?: string
    name: string
    goalId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemUncheckedCreateNestedManyWithoutProcessInput
  }

  export type ProcessUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProcessNestedInput
    goal?: GoalUpdateOneRequiredWithoutProcessesNestedInput
    problems?: ProblemUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemUncheckedUpdateManyWithoutProcessNestedInput
  }

  export type ProcessCreateManyInput = {
    id?: string
    name: string
    goalId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcessUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCreateInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProblemInput
    process: ProcessCreateNestedOneWithoutProblemsInput
    tasks?: TaskCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateInput = {
    id?: string
    name: string
    processId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProblemNestedInput
    process?: ProcessUpdateOneRequiredWithoutProblemsNestedInput
    tasks?: TaskUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    processId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemCreateManyInput = {
    id?: string
    name: string
    processId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    processId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTaskInput
    problem: ProblemCreateNestedOneWithoutTasksInput
    activities?: ActivityCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    name: string
    problemId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTaskNestedInput
    problem?: ProblemUpdateOneRequiredWithoutTasksNestedInput
    activities?: ActivityUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    name: string
    problemId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityInput
    task: TaskCreateNestedOneWithoutActivitiesInput
    attempts?: AttemptCreateNestedManyWithoutActivityInput
    comments?: CommentCreateNestedManyWithoutActivityInput
    resources?: ResourceCreateNestedManyWithoutActivityInput
    reviews?: ReviewCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: string
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptUncheckedCreateNestedManyWithoutActivityInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityInput
    resources?: ResourceUncheckedCreateNestedManyWithoutActivityInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityNestedInput
    task?: TaskUpdateOneRequiredWithoutActivitiesNestedInput
    attempts?: AttemptUpdateManyWithoutActivityNestedInput
    comments?: CommentUpdateManyWithoutActivityNestedInput
    resources?: ResourceUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptUncheckedUpdateManyWithoutActivityNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityNestedInput
    resources?: ResourceUncheckedUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateManyInput = {
    id?: string
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptCreateInput = {
    result?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAttemptInput
    activity: ActivityCreateNestedOneWithoutAttemptsInput
  }

  export type AttemptUncheckedCreateInput = {
    id?: string
    activityId: string
    result?: string | null
    createdAt?: Date | string
  }

  export type AttemptUpdateInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAttemptNestedInput
    activity?: ActivityUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type AttemptUncheckedUpdateInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptCreateManyInput = {
    id?: string
    activityId: string
    result?: string | null
    createdAt?: Date | string
  }

  export type AttemptUpdateManyMutationInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptUncheckedUpdateManyInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    content: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutCommentInput
    activity: ActivityCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentNestedInput
    activity?: ActivityUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceCreateInput = {
    url: string
    title?: string | null
    user?: UserCreateNestedOneWithoutResourceInput
    activity: ActivityCreateNestedOneWithoutResourcesInput
  }

  export type ResourceUncheckedCreateInput = {
    id?: string
    activityId: string
    url: string
    title?: string | null
  }

  export type ResourceUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutResourceNestedInput
    activity?: ActivityUpdateOneRequiredWithoutResourcesNestedInput
  }

  export type ResourceUncheckedUpdateInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResourceCreateManyInput = {
    id?: string
    activityId: string
    url: string
    title?: string | null
  }

  export type ResourceUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResourceUncheckedUpdateManyInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateInput = {
    content: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutReviewInput
    activity: ActivityCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type ReviewUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutReviewNestedInput
    activity?: ActivityUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    name: string
    details?: InputJsonValue | null
    user?: UserCreateNestedOneWithoutTeamInput
    project: ProjectCreateNestedOneWithoutTeamsInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    projectId: string
    name: string
    details?: InputJsonValue | null
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    user?: UserUpdateOneWithoutTeamNestedInput
    project?: ProjectUpdateOneRequiredWithoutTeamsNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    projectId: string
    name: string
    details?: InputJsonValue | null
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
  }

  export type TeamUncheckedUpdateManyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
  }

  export type TeamMemberCreateInput = {
    id?: string
    role?: string | null
    user?: UserCreateNestedOneWithoutTeamMemberInput
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type TeamMemberUncheckedCreateInput = {
    id?: string
    teamId: string
    userId: string
    role?: string | null
  }

  export type TeamMemberUpdateInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTeamMemberNestedInput
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateInput = {
    teamId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamMemberCreateManyInput = {
    id?: string
    teamId: string
    userId: string
    role?: string | null
  }

  export type TeamMemberUpdateManyMutationInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    teamId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PathCreateInput = {
    steps?: InputJsonValue | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutPathInput
    term: TermCreateNestedOneWithoutPathsInput
    learningGoal: GoalCreateNestedOneWithoutPathsFromTermInput
  }

  export type PathUncheckedCreateInput = {
    id?: string
    termId: string
    learningGoalId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type PathUpdateInput = {
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutPathNestedInput
    term?: TermUpdateOneRequiredWithoutPathsNestedInput
    learningGoal?: GoalUpdateOneRequiredWithoutPathsFromTermNestedInput
  }

  export type PathUncheckedUpdateInput = {
    termId?: StringFieldUpdateOperationsInput | string
    learningGoalId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathCreateManyInput = {
    id?: string
    termId: string
    learningGoalId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type PathUpdateManyMutationInput = {
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathUncheckedUpdateManyInput = {
    termId?: StringFieldUpdateOperationsInput | string
    learningGoalId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineCreateInput = {
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineInput
    slots?: RoutineSlotCreateNestedManyWithoutRoutineInput
  }

  export type RoutineUncheckedCreateInput = {
    id?: string
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slots?: RoutineSlotUncheckedCreateNestedManyWithoutRoutineInput
  }

  export type RoutineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineNestedInput
    slots?: RoutineSlotUpdateManyWithoutRoutineNestedInput
  }

  export type RoutineUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slots?: RoutineSlotUncheckedUpdateManyWithoutRoutineNestedInput
  }

  export type RoutineCreateManyInput = {
    id?: string
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoutineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotCreateInput = {
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineSlotInput
    routine: RoutineCreateNestedOneWithoutSlotsInput
    slotThreads?: RoutineSlotThreadCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUncheckedCreateInput = {
    id?: string
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slotThreads?: RoutineSlotThreadUncheckedCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskUncheckedCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityUncheckedCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUpdateInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineSlotNestedInput
    routine?: RoutineUpdateOneRequiredWithoutSlotsNestedInput
    slotThreads?: RoutineSlotThreadUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slotThreads?: RoutineSlotThreadUncheckedUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUncheckedUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotCreateManyInput = {
    id?: string
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoutineSlotUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotUncheckedUpdateManyInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotThreadCreateInput = {
    threadId: string
    user?: UserCreateNestedOneWithoutRoutineSlotThreadInput
    slot: RoutineSlotCreateNestedOneWithoutSlotThreadsInput
  }

  export type RoutineSlotThreadUncheckedCreateInput = {
    id?: string
    slotId: string
    threadId: string
  }

  export type RoutineSlotThreadUpdateInput = {
    threadId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutRoutineSlotThreadNestedInput
    slot?: RoutineSlotUpdateOneRequiredWithoutSlotThreadsNestedInput
  }

  export type RoutineSlotThreadUncheckedUpdateInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotThreadCreateManyInput = {
    id?: string
    slotId: string
    threadId: string
  }

  export type RoutineSlotThreadUpdateManyMutationInput = {
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotThreadUncheckedUpdateManyInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskCreateInput = {
    taskId: string
    user?: UserCreateNestedOneWithoutRoutineSlotTaskInput
    slot: RoutineSlotCreateNestedOneWithoutSlotTasksInput
  }

  export type RoutineSlotTaskUncheckedCreateInput = {
    id?: string
    slotId: string
    taskId: string
  }

  export type RoutineSlotTaskUpdateInput = {
    taskId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutRoutineSlotTaskNestedInput
    slot?: RoutineSlotUpdateOneRequiredWithoutSlotTasksNestedInput
  }

  export type RoutineSlotTaskUncheckedUpdateInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskCreateManyInput = {
    id?: string
    slotId: string
    taskId: string
  }

  export type RoutineSlotTaskUpdateManyMutationInput = {
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskUncheckedUpdateManyInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityCreateInput = {
    activityId: string
    user?: UserCreateNestedOneWithoutRoutineSlotActivityInput
    slot: RoutineSlotCreateNestedOneWithoutSlotActivitiesInput
  }

  export type RoutineSlotActivityUncheckedCreateInput = {
    id?: string
    slotId: string
    activityId: string
  }

  export type RoutineSlotActivityUpdateInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutRoutineSlotActivityNestedInput
    slot?: RoutineSlotUpdateOneRequiredWithoutSlotActivitiesNestedInput
  }

  export type RoutineSlotActivityUncheckedUpdateInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityCreateManyInput = {
    id?: string
    slotId: string
    activityId: string
  }

  export type RoutineSlotActivityUpdateManyMutationInput = {
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityUncheckedUpdateManyInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TermListRelationFilter = {
    every?: TermWhereInput
    some?: TermWhereInput
    none?: TermWhereInput
  }

  export type ThreadListRelationFilter = {
    every?: ThreadWhereInput
    some?: ThreadWhereInput
    none?: ThreadWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type ProcessListRelationFilter = {
    every?: ProcessWhereInput
    some?: ProcessWhereInput
    none?: ProcessWhereInput
  }

  export type ProblemListRelationFilter = {
    every?: ProblemWhereInput
    some?: ProblemWhereInput
    none?: ProblemWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type AttemptListRelationFilter = {
    every?: AttemptWhereInput
    some?: AttemptWhereInput
    none?: AttemptWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ResourceListRelationFilter = {
    every?: ResourceWhereInput
    some?: ResourceWhereInput
    none?: ResourceWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type TeamMemberListRelationFilter = {
    every?: TeamMemberWhereInput
    some?: TeamMemberWhereInput
    none?: TeamMemberWhereInput
  }

  export type PathListRelationFilter = {
    every?: PathWhereInput
    some?: PathWhereInput
    none?: PathWhereInput
  }

  export type RoutineListRelationFilter = {
    every?: RoutineWhereInput
    some?: RoutineWhereInput
    none?: RoutineWhereInput
  }

  export type RoutineSlotListRelationFilter = {
    every?: RoutineSlotWhereInput
    some?: RoutineSlotWhereInput
    none?: RoutineSlotWhereInput
  }

  export type RoutineSlotThreadListRelationFilter = {
    every?: RoutineSlotThreadWhereInput
    some?: RoutineSlotThreadWhereInput
    none?: RoutineSlotThreadWhereInput
  }

  export type RoutineSlotTaskListRelationFilter = {
    every?: RoutineSlotTaskWhereInput
    some?: RoutineSlotTaskWhereInput
    none?: RoutineSlotTaskWhereInput
  }

  export type RoutineSlotActivityListRelationFilter = {
    every?: RoutineSlotActivityWhereInput
    some?: RoutineSlotActivityWhereInput
    none?: RoutineSlotActivityWhereInput
  }

  export type TermOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PathOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoutineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoutineSlotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoutineSlotThreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoutineSlotTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoutineSlotActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type EnumTermKindFilter<$PrismaModel = never> = {
    equals?: $Enums.TermKind | EnumTermKindFieldRefInput<$PrismaModel>
    in?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    not?: NestedEnumTermKindFilter<$PrismaModel> | $Enums.TermKind
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TermNullableScalarRelationFilter = {
    is?: TermWhereInput | null
    isNot?: TermWhereInput | null
  }

  export type TermCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    derivedFromId?: SortOrder
    layer?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TermMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    derivedFromId?: SortOrder
    layer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TermMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    derivedFromId?: SortOrder
    layer?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumTermKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TermKind | EnumTermKindFieldRefInput<$PrismaModel>
    in?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    not?: NestedEnumTermKindWithAggregatesFilter<$PrismaModel> | $Enums.TermKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermKindFilter<$PrismaModel>
    _max?: NestedEnumTermKindFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type TermScalarRelationFilter = {
    is?: TermWhereInput
    isNot?: TermWhereInput
  }

  export type ThreadCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    termId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThreadMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    termId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThreadMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    termId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type ThreadScalarRelationFilter = {
    is?: ThreadWhereInput
    isNot?: ThreadWhereInput
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    threadId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    threadId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    threadId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGoalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeFilter<$PrismaModel> | $Enums.GoalType
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGoalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeWithAggregatesFilter<$PrismaModel> | $Enums.GoalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalTypeFilter<$PrismaModel>
    _max?: NestedEnumGoalTypeFilter<$PrismaModel>
  }

  export type GoalScalarRelationFilter = {
    is?: GoalWhereInput
    isNot?: GoalWhereInput
  }

  export type ProcessCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goalId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcessMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goalId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcessMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goalId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcessScalarRelationFilter = {
    is?: ProcessWhereInput
    isNot?: ProcessWhereInput
  }

  export type ProblemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    processId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    processId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    processId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemScalarRelationFilter = {
    is?: ProblemWhereInput
    isNot?: ProblemWhereInput
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    problemId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    problemId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    problemId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    taskId?: SortOrder
    meta?: SortOrder
    lastWorkedAt?: SortOrder
    daytimeRoutine?: SortOrder
    threadRoutine?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    taskId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    taskId?: SortOrder
    lastWorkedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityScalarRelationFilter = {
    is?: ActivityWhereInput
    isNot?: ActivityWhereInput
  }

  export type AttemptCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    result?: SortOrder
    createdAt?: SortOrder
  }

  export type AttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    result?: SortOrder
    createdAt?: SortOrder
  }

  export type AttemptMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    result?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ResourceCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    url?: SortOrder
    title?: SortOrder
  }

  export type ResourceMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    url?: SortOrder
    title?: SortOrder
  }

  export type ResourceMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    url?: SortOrder
    title?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    details?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamMemberCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type PathCountOrderByAggregateInput = {
    id?: SortOrder
    termId?: SortOrder
    learningGoalId?: SortOrder
    steps?: SortOrder
    createdAt?: SortOrder
  }

  export type PathMaxOrderByAggregateInput = {
    id?: SortOrder
    termId?: SortOrder
    learningGoalId?: SortOrder
    createdAt?: SortOrder
  }

  export type PathMinOrderByAggregateInput = {
    id?: SortOrder
    termId?: SortOrder
    learningGoalId?: SortOrder
    createdAt?: SortOrder
  }

  export type RoutineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoutineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoutineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoutineScalarRelationFilter = {
    is?: RoutineWhereInput
    isNot?: RoutineWhereInput
  }

  export type RoutineSlotCountOrderByAggregateInput = {
    id?: SortOrder
    routineId?: SortOrder
    label?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    todos?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoutineSlotMaxOrderByAggregateInput = {
    id?: SortOrder
    routineId?: SortOrder
    label?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoutineSlotMinOrderByAggregateInput = {
    id?: SortOrder
    routineId?: SortOrder
    label?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoutineSlotScalarRelationFilter = {
    is?: RoutineSlotWhereInput
    isNot?: RoutineSlotWhereInput
  }

  export type RoutineSlotThreadCountOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    threadId?: SortOrder
  }

  export type RoutineSlotThreadMaxOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    threadId?: SortOrder
  }

  export type RoutineSlotThreadMinOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    threadId?: SortOrder
  }

  export type RoutineSlotTaskCountOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    taskId?: SortOrder
  }

  export type RoutineSlotTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    taskId?: SortOrder
  }

  export type RoutineSlotTaskMinOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    taskId?: SortOrder
  }

  export type RoutineSlotActivityCountOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    activityId?: SortOrder
  }

  export type RoutineSlotActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    activityId?: SortOrder
  }

  export type RoutineSlotActivityMinOrderByAggregateInput = {
    id?: SortOrder
    slotId?: SortOrder
    activityId?: SortOrder
  }

  export type TermCreateNestedManyWithoutUserInput = {
    create?: XOR<TermCreateWithoutUserInput, TermUncheckedCreateWithoutUserInput> | TermCreateWithoutUserInput[] | TermUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TermCreateOrConnectWithoutUserInput | TermCreateOrConnectWithoutUserInput[]
    createMany?: TermCreateManyUserInputEnvelope
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
  }

  export type ThreadCreateNestedManyWithoutUserInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type ProcessCreateNestedManyWithoutUserInput = {
    create?: XOR<ProcessCreateWithoutUserInput, ProcessUncheckedCreateWithoutUserInput> | ProcessCreateWithoutUserInput[] | ProcessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutUserInput | ProcessCreateOrConnectWithoutUserInput[]
    createMany?: ProcessCreateManyUserInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type ProblemCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type AttemptCreateNestedManyWithoutUserInput = {
    create?: XOR<AttemptCreateWithoutUserInput, AttemptUncheckedCreateWithoutUserInput> | AttemptCreateWithoutUserInput[] | AttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutUserInput | AttemptCreateOrConnectWithoutUserInput[]
    createMany?: AttemptCreateManyUserInputEnvelope
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ResourceCreateNestedManyWithoutUserInput = {
    create?: XOR<ResourceCreateWithoutUserInput, ResourceUncheckedCreateWithoutUserInput> | ResourceCreateWithoutUserInput[] | ResourceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutUserInput | ResourceCreateOrConnectWithoutUserInput[]
    createMany?: ResourceCreateManyUserInputEnvelope
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput> | TeamCreateWithoutUserInput[] | TeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutUserInput | TeamCreateOrConnectWithoutUserInput[]
    createMany?: TeamCreateManyUserInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type TeamMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type PathCreateNestedManyWithoutUserInput = {
    create?: XOR<PathCreateWithoutUserInput, PathUncheckedCreateWithoutUserInput> | PathCreateWithoutUserInput[] | PathUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PathCreateOrConnectWithoutUserInput | PathCreateOrConnectWithoutUserInput[]
    createMany?: PathCreateManyUserInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type RoutineCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineCreateWithoutUserInput, RoutineUncheckedCreateWithoutUserInput> | RoutineCreateWithoutUserInput[] | RoutineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutUserInput | RoutineCreateOrConnectWithoutUserInput[]
    createMany?: RoutineCreateManyUserInputEnvelope
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type RoutineSlotCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotCreateWithoutUserInput, RoutineSlotUncheckedCreateWithoutUserInput> | RoutineSlotCreateWithoutUserInput[] | RoutineSlotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutUserInput | RoutineSlotCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotCreateManyUserInputEnvelope
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
  }

  export type RoutineSlotThreadCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutUserInput, RoutineSlotThreadUncheckedCreateWithoutUserInput> | RoutineSlotThreadCreateWithoutUserInput[] | RoutineSlotThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutUserInput | RoutineSlotThreadCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotThreadCreateManyUserInputEnvelope
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
  }

  export type RoutineSlotTaskCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutUserInput, RoutineSlotTaskUncheckedCreateWithoutUserInput> | RoutineSlotTaskCreateWithoutUserInput[] | RoutineSlotTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutUserInput | RoutineSlotTaskCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotTaskCreateManyUserInputEnvelope
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
  }

  export type RoutineSlotActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutUserInput, RoutineSlotActivityUncheckedCreateWithoutUserInput> | RoutineSlotActivityCreateWithoutUserInput[] | RoutineSlotActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutUserInput | RoutineSlotActivityCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotActivityCreateManyUserInputEnvelope
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
  }

  export type TermUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TermCreateWithoutUserInput, TermUncheckedCreateWithoutUserInput> | TermCreateWithoutUserInput[] | TermUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TermCreateOrConnectWithoutUserInput | TermCreateOrConnectWithoutUserInput[]
    createMany?: TermCreateManyUserInputEnvelope
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
  }

  export type ThreadUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type ProcessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProcessCreateWithoutUserInput, ProcessUncheckedCreateWithoutUserInput> | ProcessCreateWithoutUserInput[] | ProcessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutUserInput | ProcessCreateOrConnectWithoutUserInput[]
    createMany?: ProcessCreateManyUserInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type ProblemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type AttemptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttemptCreateWithoutUserInput, AttemptUncheckedCreateWithoutUserInput> | AttemptCreateWithoutUserInput[] | AttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutUserInput | AttemptCreateOrConnectWithoutUserInput[]
    createMany?: AttemptCreateManyUserInputEnvelope
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ResourceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ResourceCreateWithoutUserInput, ResourceUncheckedCreateWithoutUserInput> | ResourceCreateWithoutUserInput[] | ResourceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutUserInput | ResourceCreateOrConnectWithoutUserInput[]
    createMany?: ResourceCreateManyUserInputEnvelope
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput> | TeamCreateWithoutUserInput[] | TeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutUserInput | TeamCreateOrConnectWithoutUserInput[]
    createMany?: TeamCreateManyUserInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type PathUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PathCreateWithoutUserInput, PathUncheckedCreateWithoutUserInput> | PathCreateWithoutUserInput[] | PathUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PathCreateOrConnectWithoutUserInput | PathCreateOrConnectWithoutUserInput[]
    createMany?: PathCreateManyUserInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type RoutineUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineCreateWithoutUserInput, RoutineUncheckedCreateWithoutUserInput> | RoutineCreateWithoutUserInput[] | RoutineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutUserInput | RoutineCreateOrConnectWithoutUserInput[]
    createMany?: RoutineCreateManyUserInputEnvelope
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type RoutineSlotUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotCreateWithoutUserInput, RoutineSlotUncheckedCreateWithoutUserInput> | RoutineSlotCreateWithoutUserInput[] | RoutineSlotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutUserInput | RoutineSlotCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotCreateManyUserInputEnvelope
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
  }

  export type RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutUserInput, RoutineSlotThreadUncheckedCreateWithoutUserInput> | RoutineSlotThreadCreateWithoutUserInput[] | RoutineSlotThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutUserInput | RoutineSlotThreadCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotThreadCreateManyUserInputEnvelope
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
  }

  export type RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutUserInput, RoutineSlotTaskUncheckedCreateWithoutUserInput> | RoutineSlotTaskCreateWithoutUserInput[] | RoutineSlotTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutUserInput | RoutineSlotTaskCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotTaskCreateManyUserInputEnvelope
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
  }

  export type RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutUserInput, RoutineSlotActivityUncheckedCreateWithoutUserInput> | RoutineSlotActivityCreateWithoutUserInput[] | RoutineSlotActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutUserInput | RoutineSlotActivityCreateOrConnectWithoutUserInput[]
    createMany?: RoutineSlotActivityCreateManyUserInputEnvelope
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TermUpdateManyWithoutUserNestedInput = {
    create?: XOR<TermCreateWithoutUserInput, TermUncheckedCreateWithoutUserInput> | TermCreateWithoutUserInput[] | TermUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TermCreateOrConnectWithoutUserInput | TermCreateOrConnectWithoutUserInput[]
    upsert?: TermUpsertWithWhereUniqueWithoutUserInput | TermUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TermCreateManyUserInputEnvelope
    set?: TermWhereUniqueInput | TermWhereUniqueInput[]
    disconnect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    delete?: TermWhereUniqueInput | TermWhereUniqueInput[]
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    update?: TermUpdateWithWhereUniqueWithoutUserInput | TermUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TermUpdateManyWithWhereWithoutUserInput | TermUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TermScalarWhereInput | TermScalarWhereInput[]
  }

  export type ThreadUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    upsert?: ThreadUpsertWithWhereUniqueWithoutUserInput | ThreadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    set?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    disconnect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    delete?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    update?: ThreadUpdateWithWhereUniqueWithoutUserInput | ThreadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThreadUpdateManyWithWhereWithoutUserInput | ThreadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type ProcessUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProcessCreateWithoutUserInput, ProcessUncheckedCreateWithoutUserInput> | ProcessCreateWithoutUserInput[] | ProcessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutUserInput | ProcessCreateOrConnectWithoutUserInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutUserInput | ProcessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProcessCreateManyUserInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutUserInput | ProcessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutUserInput | ProcessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type ProblemUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutUserInput | ProblemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutUserInput | ProblemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutUserInput | ProblemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutUserInput | TaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutUserInput | TaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutUserInput | TaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type AttemptUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttemptCreateWithoutUserInput, AttemptUncheckedCreateWithoutUserInput> | AttemptCreateWithoutUserInput[] | AttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutUserInput | AttemptCreateOrConnectWithoutUserInput[]
    upsert?: AttemptUpsertWithWhereUniqueWithoutUserInput | AttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttemptCreateManyUserInputEnvelope
    set?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    disconnect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    delete?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    update?: AttemptUpdateWithWhereUniqueWithoutUserInput | AttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttemptUpdateManyWithWhereWithoutUserInput | AttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttemptScalarWhereInput | AttemptScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ResourceUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResourceCreateWithoutUserInput, ResourceUncheckedCreateWithoutUserInput> | ResourceCreateWithoutUserInput[] | ResourceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutUserInput | ResourceCreateOrConnectWithoutUserInput[]
    upsert?: ResourceUpsertWithWhereUniqueWithoutUserInput | ResourceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResourceCreateManyUserInputEnvelope
    set?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    disconnect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    delete?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    update?: ResourceUpdateWithWhereUniqueWithoutUserInput | ResourceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResourceUpdateManyWithWhereWithoutUserInput | ResourceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResourceScalarWhereInput | ResourceScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput> | TeamCreateWithoutUserInput[] | TeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutUserInput | TeamCreateOrConnectWithoutUserInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutUserInput | TeamUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamCreateManyUserInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutUserInput | TeamUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutUserInput | TeamUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type TeamMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type PathUpdateManyWithoutUserNestedInput = {
    create?: XOR<PathCreateWithoutUserInput, PathUncheckedCreateWithoutUserInput> | PathCreateWithoutUserInput[] | PathUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PathCreateOrConnectWithoutUserInput | PathCreateOrConnectWithoutUserInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutUserInput | PathUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PathCreateManyUserInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutUserInput | PathUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PathUpdateManyWithWhereWithoutUserInput | PathUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type RoutineUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineCreateWithoutUserInput, RoutineUncheckedCreateWithoutUserInput> | RoutineCreateWithoutUserInput[] | RoutineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutUserInput | RoutineCreateOrConnectWithoutUserInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutUserInput | RoutineUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineCreateManyUserInputEnvelope
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutUserInput | RoutineUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutUserInput | RoutineUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type RoutineSlotUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutUserInput, RoutineSlotUncheckedCreateWithoutUserInput> | RoutineSlotCreateWithoutUserInput[] | RoutineSlotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutUserInput | RoutineSlotCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotUpsertWithWhereUniqueWithoutUserInput | RoutineSlotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotCreateManyUserInputEnvelope
    set?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    disconnect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    delete?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    update?: RoutineSlotUpdateWithWhereUniqueWithoutUserInput | RoutineSlotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotUpdateManyWithWhereWithoutUserInput | RoutineSlotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotScalarWhereInput | RoutineSlotScalarWhereInput[]
  }

  export type RoutineSlotThreadUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutUserInput, RoutineSlotThreadUncheckedCreateWithoutUserInput> | RoutineSlotThreadCreateWithoutUserInput[] | RoutineSlotThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutUserInput | RoutineSlotThreadCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotThreadUpsertWithWhereUniqueWithoutUserInput | RoutineSlotThreadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotThreadCreateManyUserInputEnvelope
    set?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    disconnect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    delete?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    update?: RoutineSlotThreadUpdateWithWhereUniqueWithoutUserInput | RoutineSlotThreadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotThreadUpdateManyWithWhereWithoutUserInput | RoutineSlotThreadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotThreadScalarWhereInput | RoutineSlotThreadScalarWhereInput[]
  }

  export type RoutineSlotTaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutUserInput, RoutineSlotTaskUncheckedCreateWithoutUserInput> | RoutineSlotTaskCreateWithoutUserInput[] | RoutineSlotTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutUserInput | RoutineSlotTaskCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotTaskUpsertWithWhereUniqueWithoutUserInput | RoutineSlotTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotTaskCreateManyUserInputEnvelope
    set?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    disconnect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    delete?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    update?: RoutineSlotTaskUpdateWithWhereUniqueWithoutUserInput | RoutineSlotTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotTaskUpdateManyWithWhereWithoutUserInput | RoutineSlotTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotTaskScalarWhereInput | RoutineSlotTaskScalarWhereInput[]
  }

  export type RoutineSlotActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutUserInput, RoutineSlotActivityUncheckedCreateWithoutUserInput> | RoutineSlotActivityCreateWithoutUserInput[] | RoutineSlotActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutUserInput | RoutineSlotActivityCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotActivityUpsertWithWhereUniqueWithoutUserInput | RoutineSlotActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotActivityCreateManyUserInputEnvelope
    set?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    disconnect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    delete?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    update?: RoutineSlotActivityUpdateWithWhereUniqueWithoutUserInput | RoutineSlotActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotActivityUpdateManyWithWhereWithoutUserInput | RoutineSlotActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotActivityScalarWhereInput | RoutineSlotActivityScalarWhereInput[]
  }

  export type TermUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TermCreateWithoutUserInput, TermUncheckedCreateWithoutUserInput> | TermCreateWithoutUserInput[] | TermUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TermCreateOrConnectWithoutUserInput | TermCreateOrConnectWithoutUserInput[]
    upsert?: TermUpsertWithWhereUniqueWithoutUserInput | TermUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TermCreateManyUserInputEnvelope
    set?: TermWhereUniqueInput | TermWhereUniqueInput[]
    disconnect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    delete?: TermWhereUniqueInput | TermWhereUniqueInput[]
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    update?: TermUpdateWithWhereUniqueWithoutUserInput | TermUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TermUpdateManyWithWhereWithoutUserInput | TermUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TermScalarWhereInput | TermScalarWhereInput[]
  }

  export type ThreadUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    upsert?: ThreadUpsertWithWhereUniqueWithoutUserInput | ThreadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    set?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    disconnect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    delete?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    update?: ThreadUpdateWithWhereUniqueWithoutUserInput | ThreadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThreadUpdateManyWithWhereWithoutUserInput | ThreadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type ProcessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProcessCreateWithoutUserInput, ProcessUncheckedCreateWithoutUserInput> | ProcessCreateWithoutUserInput[] | ProcessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutUserInput | ProcessCreateOrConnectWithoutUserInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutUserInput | ProcessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProcessCreateManyUserInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutUserInput | ProcessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutUserInput | ProcessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type ProblemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutUserInput | ProblemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutUserInput | ProblemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutUserInput | ProblemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutUserInput | TaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutUserInput | TaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutUserInput | TaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type AttemptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttemptCreateWithoutUserInput, AttemptUncheckedCreateWithoutUserInput> | AttemptCreateWithoutUserInput[] | AttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutUserInput | AttemptCreateOrConnectWithoutUserInput[]
    upsert?: AttemptUpsertWithWhereUniqueWithoutUserInput | AttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttemptCreateManyUserInputEnvelope
    set?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    disconnect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    delete?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    update?: AttemptUpdateWithWhereUniqueWithoutUserInput | AttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttemptUpdateManyWithWhereWithoutUserInput | AttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttemptScalarWhereInput | AttemptScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ResourceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResourceCreateWithoutUserInput, ResourceUncheckedCreateWithoutUserInput> | ResourceCreateWithoutUserInput[] | ResourceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutUserInput | ResourceCreateOrConnectWithoutUserInput[]
    upsert?: ResourceUpsertWithWhereUniqueWithoutUserInput | ResourceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResourceCreateManyUserInputEnvelope
    set?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    disconnect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    delete?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    update?: ResourceUpdateWithWhereUniqueWithoutUserInput | ResourceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResourceUpdateManyWithWhereWithoutUserInput | ResourceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResourceScalarWhereInput | ResourceScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput> | TeamCreateWithoutUserInput[] | TeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutUserInput | TeamCreateOrConnectWithoutUserInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutUserInput | TeamUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamCreateManyUserInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutUserInput | TeamUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutUserInput | TeamUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type PathUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PathCreateWithoutUserInput, PathUncheckedCreateWithoutUserInput> | PathCreateWithoutUserInput[] | PathUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PathCreateOrConnectWithoutUserInput | PathCreateOrConnectWithoutUserInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutUserInput | PathUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PathCreateManyUserInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutUserInput | PathUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PathUpdateManyWithWhereWithoutUserInput | PathUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type RoutineUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineCreateWithoutUserInput, RoutineUncheckedCreateWithoutUserInput> | RoutineCreateWithoutUserInput[] | RoutineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutUserInput | RoutineCreateOrConnectWithoutUserInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutUserInput | RoutineUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineCreateManyUserInputEnvelope
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutUserInput | RoutineUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutUserInput | RoutineUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type RoutineSlotUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutUserInput, RoutineSlotUncheckedCreateWithoutUserInput> | RoutineSlotCreateWithoutUserInput[] | RoutineSlotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutUserInput | RoutineSlotCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotUpsertWithWhereUniqueWithoutUserInput | RoutineSlotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotCreateManyUserInputEnvelope
    set?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    disconnect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    delete?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    update?: RoutineSlotUpdateWithWhereUniqueWithoutUserInput | RoutineSlotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotUpdateManyWithWhereWithoutUserInput | RoutineSlotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotScalarWhereInput | RoutineSlotScalarWhereInput[]
  }

  export type RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutUserInput, RoutineSlotThreadUncheckedCreateWithoutUserInput> | RoutineSlotThreadCreateWithoutUserInput[] | RoutineSlotThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutUserInput | RoutineSlotThreadCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotThreadUpsertWithWhereUniqueWithoutUserInput | RoutineSlotThreadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotThreadCreateManyUserInputEnvelope
    set?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    disconnect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    delete?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    update?: RoutineSlotThreadUpdateWithWhereUniqueWithoutUserInput | RoutineSlotThreadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotThreadUpdateManyWithWhereWithoutUserInput | RoutineSlotThreadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotThreadScalarWhereInput | RoutineSlotThreadScalarWhereInput[]
  }

  export type RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutUserInput, RoutineSlotTaskUncheckedCreateWithoutUserInput> | RoutineSlotTaskCreateWithoutUserInput[] | RoutineSlotTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutUserInput | RoutineSlotTaskCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotTaskUpsertWithWhereUniqueWithoutUserInput | RoutineSlotTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotTaskCreateManyUserInputEnvelope
    set?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    disconnect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    delete?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    update?: RoutineSlotTaskUpdateWithWhereUniqueWithoutUserInput | RoutineSlotTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotTaskUpdateManyWithWhereWithoutUserInput | RoutineSlotTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotTaskScalarWhereInput | RoutineSlotTaskScalarWhereInput[]
  }

  export type RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutUserInput, RoutineSlotActivityUncheckedCreateWithoutUserInput> | RoutineSlotActivityCreateWithoutUserInput[] | RoutineSlotActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutUserInput | RoutineSlotActivityCreateOrConnectWithoutUserInput[]
    upsert?: RoutineSlotActivityUpsertWithWhereUniqueWithoutUserInput | RoutineSlotActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoutineSlotActivityCreateManyUserInputEnvelope
    set?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    disconnect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    delete?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    update?: RoutineSlotActivityUpdateWithWhereUniqueWithoutUserInput | RoutineSlotActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoutineSlotActivityUpdateManyWithWhereWithoutUserInput | RoutineSlotActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoutineSlotActivityScalarWhereInput | RoutineSlotActivityScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTermInput = {
    create?: XOR<UserCreateWithoutTermInput, UserUncheckedCreateWithoutTermInput>
    connectOrCreate?: UserCreateOrConnectWithoutTermInput
    connect?: UserWhereUniqueInput
  }

  export type TermCreateNestedOneWithoutDerivedTermsInput = {
    create?: XOR<TermCreateWithoutDerivedTermsInput, TermUncheckedCreateWithoutDerivedTermsInput>
    connectOrCreate?: TermCreateOrConnectWithoutDerivedTermsInput
    connect?: TermWhereUniqueInput
  }

  export type TermCreateNestedManyWithoutDerivedFromInput = {
    create?: XOR<TermCreateWithoutDerivedFromInput, TermUncheckedCreateWithoutDerivedFromInput> | TermCreateWithoutDerivedFromInput[] | TermUncheckedCreateWithoutDerivedFromInput[]
    connectOrCreate?: TermCreateOrConnectWithoutDerivedFromInput | TermCreateOrConnectWithoutDerivedFromInput[]
    createMany?: TermCreateManyDerivedFromInputEnvelope
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
  }

  export type ThreadCreateNestedManyWithoutTermInput = {
    create?: XOR<ThreadCreateWithoutTermInput, ThreadUncheckedCreateWithoutTermInput> | ThreadCreateWithoutTermInput[] | ThreadUncheckedCreateWithoutTermInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutTermInput | ThreadCreateOrConnectWithoutTermInput[]
    createMany?: ThreadCreateManyTermInputEnvelope
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
  }

  export type PathCreateNestedManyWithoutTermInput = {
    create?: XOR<PathCreateWithoutTermInput, PathUncheckedCreateWithoutTermInput> | PathCreateWithoutTermInput[] | PathUncheckedCreateWithoutTermInput[]
    connectOrCreate?: PathCreateOrConnectWithoutTermInput | PathCreateOrConnectWithoutTermInput[]
    createMany?: PathCreateManyTermInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type TermUncheckedCreateNestedManyWithoutDerivedFromInput = {
    create?: XOR<TermCreateWithoutDerivedFromInput, TermUncheckedCreateWithoutDerivedFromInput> | TermCreateWithoutDerivedFromInput[] | TermUncheckedCreateWithoutDerivedFromInput[]
    connectOrCreate?: TermCreateOrConnectWithoutDerivedFromInput | TermCreateOrConnectWithoutDerivedFromInput[]
    createMany?: TermCreateManyDerivedFromInputEnvelope
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
  }

  export type ThreadUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<ThreadCreateWithoutTermInput, ThreadUncheckedCreateWithoutTermInput> | ThreadCreateWithoutTermInput[] | ThreadUncheckedCreateWithoutTermInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutTermInput | ThreadCreateOrConnectWithoutTermInput[]
    createMany?: ThreadCreateManyTermInputEnvelope
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
  }

  export type PathUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<PathCreateWithoutTermInput, PathUncheckedCreateWithoutTermInput> | PathCreateWithoutTermInput[] | PathUncheckedCreateWithoutTermInput[]
    connectOrCreate?: PathCreateOrConnectWithoutTermInput | PathCreateOrConnectWithoutTermInput[]
    createMany?: PathCreateManyTermInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type EnumTermKindFieldUpdateOperationsInput = {
    set?: $Enums.TermKind
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutTermNestedInput = {
    create?: XOR<UserCreateWithoutTermInput, UserUncheckedCreateWithoutTermInput>
    connectOrCreate?: UserCreateOrConnectWithoutTermInput
    upsert?: UserUpsertWithoutTermInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTermInput, UserUpdateWithoutTermInput>, UserUncheckedUpdateWithoutTermInput>
  }

  export type TermUpdateOneWithoutDerivedTermsNestedInput = {
    create?: XOR<TermCreateWithoutDerivedTermsInput, TermUncheckedCreateWithoutDerivedTermsInput>
    connectOrCreate?: TermCreateOrConnectWithoutDerivedTermsInput
    upsert?: TermUpsertWithoutDerivedTermsInput
    disconnect?: boolean
    delete?: TermWhereInput | boolean
    connect?: TermWhereUniqueInput
    update?: XOR<XOR<TermUpdateToOneWithWhereWithoutDerivedTermsInput, TermUpdateWithoutDerivedTermsInput>, TermUncheckedUpdateWithoutDerivedTermsInput>
  }

  export type TermUpdateManyWithoutDerivedFromNestedInput = {
    create?: XOR<TermCreateWithoutDerivedFromInput, TermUncheckedCreateWithoutDerivedFromInput> | TermCreateWithoutDerivedFromInput[] | TermUncheckedCreateWithoutDerivedFromInput[]
    connectOrCreate?: TermCreateOrConnectWithoutDerivedFromInput | TermCreateOrConnectWithoutDerivedFromInput[]
    upsert?: TermUpsertWithWhereUniqueWithoutDerivedFromInput | TermUpsertWithWhereUniqueWithoutDerivedFromInput[]
    createMany?: TermCreateManyDerivedFromInputEnvelope
    set?: TermWhereUniqueInput | TermWhereUniqueInput[]
    disconnect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    delete?: TermWhereUniqueInput | TermWhereUniqueInput[]
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    update?: TermUpdateWithWhereUniqueWithoutDerivedFromInput | TermUpdateWithWhereUniqueWithoutDerivedFromInput[]
    updateMany?: TermUpdateManyWithWhereWithoutDerivedFromInput | TermUpdateManyWithWhereWithoutDerivedFromInput[]
    deleteMany?: TermScalarWhereInput | TermScalarWhereInput[]
  }

  export type ThreadUpdateManyWithoutTermNestedInput = {
    create?: XOR<ThreadCreateWithoutTermInput, ThreadUncheckedCreateWithoutTermInput> | ThreadCreateWithoutTermInput[] | ThreadUncheckedCreateWithoutTermInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutTermInput | ThreadCreateOrConnectWithoutTermInput[]
    upsert?: ThreadUpsertWithWhereUniqueWithoutTermInput | ThreadUpsertWithWhereUniqueWithoutTermInput[]
    createMany?: ThreadCreateManyTermInputEnvelope
    set?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    disconnect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    delete?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    update?: ThreadUpdateWithWhereUniqueWithoutTermInput | ThreadUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: ThreadUpdateManyWithWhereWithoutTermInput | ThreadUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
  }

  export type PathUpdateManyWithoutTermNestedInput = {
    create?: XOR<PathCreateWithoutTermInput, PathUncheckedCreateWithoutTermInput> | PathCreateWithoutTermInput[] | PathUncheckedCreateWithoutTermInput[]
    connectOrCreate?: PathCreateOrConnectWithoutTermInput | PathCreateOrConnectWithoutTermInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutTermInput | PathUpsertWithWhereUniqueWithoutTermInput[]
    createMany?: PathCreateManyTermInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutTermInput | PathUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: PathUpdateManyWithWhereWithoutTermInput | PathUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type TermUncheckedUpdateManyWithoutDerivedFromNestedInput = {
    create?: XOR<TermCreateWithoutDerivedFromInput, TermUncheckedCreateWithoutDerivedFromInput> | TermCreateWithoutDerivedFromInput[] | TermUncheckedCreateWithoutDerivedFromInput[]
    connectOrCreate?: TermCreateOrConnectWithoutDerivedFromInput | TermCreateOrConnectWithoutDerivedFromInput[]
    upsert?: TermUpsertWithWhereUniqueWithoutDerivedFromInput | TermUpsertWithWhereUniqueWithoutDerivedFromInput[]
    createMany?: TermCreateManyDerivedFromInputEnvelope
    set?: TermWhereUniqueInput | TermWhereUniqueInput[]
    disconnect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    delete?: TermWhereUniqueInput | TermWhereUniqueInput[]
    connect?: TermWhereUniqueInput | TermWhereUniqueInput[]
    update?: TermUpdateWithWhereUniqueWithoutDerivedFromInput | TermUpdateWithWhereUniqueWithoutDerivedFromInput[]
    updateMany?: TermUpdateManyWithWhereWithoutDerivedFromInput | TermUpdateManyWithWhereWithoutDerivedFromInput[]
    deleteMany?: TermScalarWhereInput | TermScalarWhereInput[]
  }

  export type ThreadUncheckedUpdateManyWithoutTermNestedInput = {
    create?: XOR<ThreadCreateWithoutTermInput, ThreadUncheckedCreateWithoutTermInput> | ThreadCreateWithoutTermInput[] | ThreadUncheckedCreateWithoutTermInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutTermInput | ThreadCreateOrConnectWithoutTermInput[]
    upsert?: ThreadUpsertWithWhereUniqueWithoutTermInput | ThreadUpsertWithWhereUniqueWithoutTermInput[]
    createMany?: ThreadCreateManyTermInputEnvelope
    set?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    disconnect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    delete?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    update?: ThreadUpdateWithWhereUniqueWithoutTermInput | ThreadUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: ThreadUpdateManyWithWhereWithoutTermInput | ThreadUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
  }

  export type PathUncheckedUpdateManyWithoutTermNestedInput = {
    create?: XOR<PathCreateWithoutTermInput, PathUncheckedCreateWithoutTermInput> | PathCreateWithoutTermInput[] | PathUncheckedCreateWithoutTermInput[]
    connectOrCreate?: PathCreateOrConnectWithoutTermInput | PathCreateOrConnectWithoutTermInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutTermInput | PathUpsertWithWhereUniqueWithoutTermInput[]
    createMany?: PathCreateManyTermInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutTermInput | PathUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: PathUpdateManyWithWhereWithoutTermInput | PathUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutThreadInput = {
    create?: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
    connectOrCreate?: UserCreateOrConnectWithoutThreadInput
    connect?: UserWhereUniqueInput
  }

  export type TermCreateNestedOneWithoutThreadsInput = {
    create?: XOR<TermCreateWithoutThreadsInput, TermUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: TermCreateOrConnectWithoutThreadsInput
    connect?: TermWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutThreadInput = {
    create?: XOR<ProjectCreateWithoutThreadInput, ProjectUncheckedCreateWithoutThreadInput> | ProjectCreateWithoutThreadInput[] | ProjectUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutThreadInput | ProjectCreateOrConnectWithoutThreadInput[]
    createMany?: ProjectCreateManyThreadInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutThreadInput = {
    create?: XOR<ProjectCreateWithoutThreadInput, ProjectUncheckedCreateWithoutThreadInput> | ProjectCreateWithoutThreadInput[] | ProjectUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutThreadInput | ProjectCreateOrConnectWithoutThreadInput[]
    createMany?: ProjectCreateManyThreadInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type UserUpdateOneWithoutThreadNestedInput = {
    create?: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
    connectOrCreate?: UserCreateOrConnectWithoutThreadInput
    upsert?: UserUpsertWithoutThreadInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutThreadInput, UserUpdateWithoutThreadInput>, UserUncheckedUpdateWithoutThreadInput>
  }

  export type TermUpdateOneRequiredWithoutThreadsNestedInput = {
    create?: XOR<TermCreateWithoutThreadsInput, TermUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: TermCreateOrConnectWithoutThreadsInput
    upsert?: TermUpsertWithoutThreadsInput
    connect?: TermWhereUniqueInput
    update?: XOR<XOR<TermUpdateToOneWithWhereWithoutThreadsInput, TermUpdateWithoutThreadsInput>, TermUncheckedUpdateWithoutThreadsInput>
  }

  export type ProjectUpdateManyWithoutThreadNestedInput = {
    create?: XOR<ProjectCreateWithoutThreadInput, ProjectUncheckedCreateWithoutThreadInput> | ProjectCreateWithoutThreadInput[] | ProjectUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutThreadInput | ProjectCreateOrConnectWithoutThreadInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutThreadInput | ProjectUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: ProjectCreateManyThreadInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutThreadInput | ProjectUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutThreadInput | ProjectUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutThreadNestedInput = {
    create?: XOR<ProjectCreateWithoutThreadInput, ProjectUncheckedCreateWithoutThreadInput> | ProjectCreateWithoutThreadInput[] | ProjectUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutThreadInput | ProjectCreateOrConnectWithoutThreadInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutThreadInput | ProjectUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: ProjectCreateManyThreadInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutThreadInput | ProjectUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutThreadInput | ProjectUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectInput = {
    create?: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInput
    connect?: UserWhereUniqueInput
  }

  export type ThreadCreateNestedOneWithoutProjectsInput = {
    create?: XOR<ThreadCreateWithoutProjectsInput, ThreadUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: ThreadCreateOrConnectWithoutProjectsInput
    connect?: ThreadWhereUniqueInput
  }

  export type GoalCreateNestedManyWithoutProjectInput = {
    create?: XOR<GoalCreateWithoutProjectInput, GoalUncheckedCreateWithoutProjectInput> | GoalCreateWithoutProjectInput[] | GoalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProjectInput | GoalCreateOrConnectWithoutProjectInput[]
    createMany?: GoalCreateManyProjectInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutProjectInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<GoalCreateWithoutProjectInput, GoalUncheckedCreateWithoutProjectInput> | GoalCreateWithoutProjectInput[] | GoalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProjectInput | GoalCreateOrConnectWithoutProjectInput[]
    createMany?: GoalCreateManyProjectInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutProjectNestedInput = {
    create?: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInput
    upsert?: UserUpsertWithoutProjectInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectInput, UserUpdateWithoutProjectInput>, UserUncheckedUpdateWithoutProjectInput>
  }

  export type ThreadUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<ThreadCreateWithoutProjectsInput, ThreadUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: ThreadCreateOrConnectWithoutProjectsInput
    upsert?: ThreadUpsertWithoutProjectsInput
    connect?: ThreadWhereUniqueInput
    update?: XOR<XOR<ThreadUpdateToOneWithWhereWithoutProjectsInput, ThreadUpdateWithoutProjectsInput>, ThreadUncheckedUpdateWithoutProjectsInput>
  }

  export type GoalUpdateManyWithoutProjectNestedInput = {
    create?: XOR<GoalCreateWithoutProjectInput, GoalUncheckedCreateWithoutProjectInput> | GoalCreateWithoutProjectInput[] | GoalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProjectInput | GoalCreateOrConnectWithoutProjectInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutProjectInput | GoalUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: GoalCreateManyProjectInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutProjectInput | GoalUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutProjectInput | GoalUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutProjectInput | TeamUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutProjectInput | TeamUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutProjectInput | TeamUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<GoalCreateWithoutProjectInput, GoalUncheckedCreateWithoutProjectInput> | GoalCreateWithoutProjectInput[] | GoalUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProjectInput | GoalCreateOrConnectWithoutProjectInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutProjectInput | GoalUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: GoalCreateManyProjectInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutProjectInput | GoalUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutProjectInput | GoalUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutProjectInput | TeamUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutProjectInput | TeamUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutProjectInput | TeamUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGoalInput = {
    create?: XOR<UserCreateWithoutGoalInput, UserUncheckedCreateWithoutGoalInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutGoalsInput = {
    create?: XOR<ProjectCreateWithoutGoalsInput, ProjectUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutGoalsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProcessCreateNestedManyWithoutGoalInput = {
    create?: XOR<ProcessCreateWithoutGoalInput, ProcessUncheckedCreateWithoutGoalInput> | ProcessCreateWithoutGoalInput[] | ProcessUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutGoalInput | ProcessCreateOrConnectWithoutGoalInput[]
    createMany?: ProcessCreateManyGoalInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type PathCreateNestedManyWithoutLearningGoalInput = {
    create?: XOR<PathCreateWithoutLearningGoalInput, PathUncheckedCreateWithoutLearningGoalInput> | PathCreateWithoutLearningGoalInput[] | PathUncheckedCreateWithoutLearningGoalInput[]
    connectOrCreate?: PathCreateOrConnectWithoutLearningGoalInput | PathCreateOrConnectWithoutLearningGoalInput[]
    createMany?: PathCreateManyLearningGoalInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type ProcessUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<ProcessCreateWithoutGoalInput, ProcessUncheckedCreateWithoutGoalInput> | ProcessCreateWithoutGoalInput[] | ProcessUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutGoalInput | ProcessCreateOrConnectWithoutGoalInput[]
    createMany?: ProcessCreateManyGoalInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type PathUncheckedCreateNestedManyWithoutLearningGoalInput = {
    create?: XOR<PathCreateWithoutLearningGoalInput, PathUncheckedCreateWithoutLearningGoalInput> | PathCreateWithoutLearningGoalInput[] | PathUncheckedCreateWithoutLearningGoalInput[]
    connectOrCreate?: PathCreateOrConnectWithoutLearningGoalInput | PathCreateOrConnectWithoutLearningGoalInput[]
    createMany?: PathCreateManyLearningGoalInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type EnumGoalTypeFieldUpdateOperationsInput = {
    set?: $Enums.GoalType
  }

  export type UserUpdateOneWithoutGoalNestedInput = {
    create?: XOR<UserCreateWithoutGoalInput, UserUncheckedCreateWithoutGoalInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalInput
    upsert?: UserUpsertWithoutGoalInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalInput, UserUpdateWithoutGoalInput>, UserUncheckedUpdateWithoutGoalInput>
  }

  export type ProjectUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<ProjectCreateWithoutGoalsInput, ProjectUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutGoalsInput
    upsert?: ProjectUpsertWithoutGoalsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutGoalsInput, ProjectUpdateWithoutGoalsInput>, ProjectUncheckedUpdateWithoutGoalsInput>
  }

  export type ProcessUpdateManyWithoutGoalNestedInput = {
    create?: XOR<ProcessCreateWithoutGoalInput, ProcessUncheckedCreateWithoutGoalInput> | ProcessCreateWithoutGoalInput[] | ProcessUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutGoalInput | ProcessCreateOrConnectWithoutGoalInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutGoalInput | ProcessUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: ProcessCreateManyGoalInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutGoalInput | ProcessUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutGoalInput | ProcessUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type PathUpdateManyWithoutLearningGoalNestedInput = {
    create?: XOR<PathCreateWithoutLearningGoalInput, PathUncheckedCreateWithoutLearningGoalInput> | PathCreateWithoutLearningGoalInput[] | PathUncheckedCreateWithoutLearningGoalInput[]
    connectOrCreate?: PathCreateOrConnectWithoutLearningGoalInput | PathCreateOrConnectWithoutLearningGoalInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutLearningGoalInput | PathUpsertWithWhereUniqueWithoutLearningGoalInput[]
    createMany?: PathCreateManyLearningGoalInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutLearningGoalInput | PathUpdateWithWhereUniqueWithoutLearningGoalInput[]
    updateMany?: PathUpdateManyWithWhereWithoutLearningGoalInput | PathUpdateManyWithWhereWithoutLearningGoalInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type ProcessUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<ProcessCreateWithoutGoalInput, ProcessUncheckedCreateWithoutGoalInput> | ProcessCreateWithoutGoalInput[] | ProcessUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutGoalInput | ProcessCreateOrConnectWithoutGoalInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutGoalInput | ProcessUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: ProcessCreateManyGoalInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutGoalInput | ProcessUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutGoalInput | ProcessUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type PathUncheckedUpdateManyWithoutLearningGoalNestedInput = {
    create?: XOR<PathCreateWithoutLearningGoalInput, PathUncheckedCreateWithoutLearningGoalInput> | PathCreateWithoutLearningGoalInput[] | PathUncheckedCreateWithoutLearningGoalInput[]
    connectOrCreate?: PathCreateOrConnectWithoutLearningGoalInput | PathCreateOrConnectWithoutLearningGoalInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutLearningGoalInput | PathUpsertWithWhereUniqueWithoutLearningGoalInput[]
    createMany?: PathCreateManyLearningGoalInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutLearningGoalInput | PathUpdateWithWhereUniqueWithoutLearningGoalInput[]
    updateMany?: PathUpdateManyWithWhereWithoutLearningGoalInput | PathUpdateManyWithWhereWithoutLearningGoalInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProcessInput = {
    create?: XOR<UserCreateWithoutProcessInput, UserUncheckedCreateWithoutProcessInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessInput
    connect?: UserWhereUniqueInput
  }

  export type GoalCreateNestedOneWithoutProcessesInput = {
    create?: XOR<GoalCreateWithoutProcessesInput, GoalUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: GoalCreateOrConnectWithoutProcessesInput
    connect?: GoalWhereUniqueInput
  }

  export type ProblemCreateNestedManyWithoutProcessInput = {
    create?: XOR<ProblemCreateWithoutProcessInput, ProblemUncheckedCreateWithoutProcessInput> | ProblemCreateWithoutProcessInput[] | ProblemUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutProcessInput | ProblemCreateOrConnectWithoutProcessInput[]
    createMany?: ProblemCreateManyProcessInputEnvelope
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type ProblemUncheckedCreateNestedManyWithoutProcessInput = {
    create?: XOR<ProblemCreateWithoutProcessInput, ProblemUncheckedCreateWithoutProcessInput> | ProblemCreateWithoutProcessInput[] | ProblemUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutProcessInput | ProblemCreateOrConnectWithoutProcessInput[]
    createMany?: ProblemCreateManyProcessInputEnvelope
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutProcessNestedInput = {
    create?: XOR<UserCreateWithoutProcessInput, UserUncheckedCreateWithoutProcessInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessInput
    upsert?: UserUpsertWithoutProcessInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProcessInput, UserUpdateWithoutProcessInput>, UserUncheckedUpdateWithoutProcessInput>
  }

  export type GoalUpdateOneRequiredWithoutProcessesNestedInput = {
    create?: XOR<GoalCreateWithoutProcessesInput, GoalUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: GoalCreateOrConnectWithoutProcessesInput
    upsert?: GoalUpsertWithoutProcessesInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutProcessesInput, GoalUpdateWithoutProcessesInput>, GoalUncheckedUpdateWithoutProcessesInput>
  }

  export type ProblemUpdateManyWithoutProcessNestedInput = {
    create?: XOR<ProblemCreateWithoutProcessInput, ProblemUncheckedCreateWithoutProcessInput> | ProblemCreateWithoutProcessInput[] | ProblemUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutProcessInput | ProblemCreateOrConnectWithoutProcessInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutProcessInput | ProblemUpsertWithWhereUniqueWithoutProcessInput[]
    createMany?: ProblemCreateManyProcessInputEnvelope
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutProcessInput | ProblemUpdateWithWhereUniqueWithoutProcessInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutProcessInput | ProblemUpdateManyWithWhereWithoutProcessInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type ProblemUncheckedUpdateManyWithoutProcessNestedInput = {
    create?: XOR<ProblemCreateWithoutProcessInput, ProblemUncheckedCreateWithoutProcessInput> | ProblemCreateWithoutProcessInput[] | ProblemUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutProcessInput | ProblemCreateOrConnectWithoutProcessInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutProcessInput | ProblemUpsertWithWhereUniqueWithoutProcessInput[]
    createMany?: ProblemCreateManyProcessInputEnvelope
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutProcessInput | ProblemUpdateWithWhereUniqueWithoutProcessInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutProcessInput | ProblemUpdateManyWithWhereWithoutProcessInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProblemInput = {
    create?: XOR<UserCreateWithoutProblemInput, UserUncheckedCreateWithoutProblemInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemInput
    connect?: UserWhereUniqueInput
  }

  export type ProcessCreateNestedOneWithoutProblemsInput = {
    create?: XOR<ProcessCreateWithoutProblemsInput, ProcessUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutProblemsInput
    connect?: ProcessWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutProblemInput = {
    create?: XOR<TaskCreateWithoutProblemInput, TaskUncheckedCreateWithoutProblemInput> | TaskCreateWithoutProblemInput[] | TaskUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProblemInput | TaskCreateOrConnectWithoutProblemInput[]
    createMany?: TaskCreateManyProblemInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<TaskCreateWithoutProblemInput, TaskUncheckedCreateWithoutProblemInput> | TaskCreateWithoutProblemInput[] | TaskUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProblemInput | TaskCreateOrConnectWithoutProblemInput[]
    createMany?: TaskCreateManyProblemInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutProblemNestedInput = {
    create?: XOR<UserCreateWithoutProblemInput, UserUncheckedCreateWithoutProblemInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemInput
    upsert?: UserUpsertWithoutProblemInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProblemInput, UserUpdateWithoutProblemInput>, UserUncheckedUpdateWithoutProblemInput>
  }

  export type ProcessUpdateOneRequiredWithoutProblemsNestedInput = {
    create?: XOR<ProcessCreateWithoutProblemsInput, ProcessUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutProblemsInput
    upsert?: ProcessUpsertWithoutProblemsInput
    connect?: ProcessWhereUniqueInput
    update?: XOR<XOR<ProcessUpdateToOneWithWhereWithoutProblemsInput, ProcessUpdateWithoutProblemsInput>, ProcessUncheckedUpdateWithoutProblemsInput>
  }

  export type TaskUpdateManyWithoutProblemNestedInput = {
    create?: XOR<TaskCreateWithoutProblemInput, TaskUncheckedCreateWithoutProblemInput> | TaskCreateWithoutProblemInput[] | TaskUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProblemInput | TaskCreateOrConnectWithoutProblemInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProblemInput | TaskUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: TaskCreateManyProblemInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProblemInput | TaskUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProblemInput | TaskUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<TaskCreateWithoutProblemInput, TaskUncheckedCreateWithoutProblemInput> | TaskCreateWithoutProblemInput[] | TaskUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProblemInput | TaskCreateOrConnectWithoutProblemInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProblemInput | TaskUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: TaskCreateManyProblemInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProblemInput | TaskUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProblemInput | TaskUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTaskInput = {
    create?: XOR<UserCreateWithoutTaskInput, UserUncheckedCreateWithoutTaskInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskInput
    connect?: UserWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProblemCreateWithoutTasksInput, ProblemUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutTasksInput
    connect?: ProblemWhereUniqueInput
  }

  export type ActivityCreateNestedManyWithoutTaskInput = {
    create?: XOR<ActivityCreateWithoutTaskInput, ActivityUncheckedCreateWithoutTaskInput> | ActivityCreateWithoutTaskInput[] | ActivityUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTaskInput | ActivityCreateOrConnectWithoutTaskInput[]
    createMany?: ActivityCreateManyTaskInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<ActivityCreateWithoutTaskInput, ActivityUncheckedCreateWithoutTaskInput> | ActivityCreateWithoutTaskInput[] | ActivityUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTaskInput | ActivityCreateOrConnectWithoutTaskInput[]
    createMany?: ActivityCreateManyTaskInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutTaskNestedInput = {
    create?: XOR<UserCreateWithoutTaskInput, UserUncheckedCreateWithoutTaskInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskInput
    upsert?: UserUpsertWithoutTaskInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTaskInput, UserUpdateWithoutTaskInput>, UserUncheckedUpdateWithoutTaskInput>
  }

  export type ProblemUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProblemCreateWithoutTasksInput, ProblemUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutTasksInput
    upsert?: ProblemUpsertWithoutTasksInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutTasksInput, ProblemUpdateWithoutTasksInput>, ProblemUncheckedUpdateWithoutTasksInput>
  }

  export type ActivityUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ActivityCreateWithoutTaskInput, ActivityUncheckedCreateWithoutTaskInput> | ActivityCreateWithoutTaskInput[] | ActivityUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTaskInput | ActivityCreateOrConnectWithoutTaskInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutTaskInput | ActivityUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ActivityCreateManyTaskInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutTaskInput | ActivityUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutTaskInput | ActivityUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ActivityCreateWithoutTaskInput, ActivityUncheckedCreateWithoutTaskInput> | ActivityCreateWithoutTaskInput[] | ActivityUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTaskInput | ActivityCreateOrConnectWithoutTaskInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutTaskInput | ActivityUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ActivityCreateManyTaskInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutTaskInput | ActivityUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutTaskInput | ActivityUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutActivityInput = {
    create?: XOR<UserCreateWithoutActivityInput, UserUncheckedCreateWithoutActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<TaskCreateWithoutActivitiesInput, TaskUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: TaskCreateOrConnectWithoutActivitiesInput
    connect?: TaskWhereUniqueInput
  }

  export type AttemptCreateNestedManyWithoutActivityInput = {
    create?: XOR<AttemptCreateWithoutActivityInput, AttemptUncheckedCreateWithoutActivityInput> | AttemptCreateWithoutActivityInput[] | AttemptUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutActivityInput | AttemptCreateOrConnectWithoutActivityInput[]
    createMany?: AttemptCreateManyActivityInputEnvelope
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutActivityInput = {
    create?: XOR<CommentCreateWithoutActivityInput, CommentUncheckedCreateWithoutActivityInput> | CommentCreateWithoutActivityInput[] | CommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityInput | CommentCreateOrConnectWithoutActivityInput[]
    createMany?: CommentCreateManyActivityInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ResourceCreateNestedManyWithoutActivityInput = {
    create?: XOR<ResourceCreateWithoutActivityInput, ResourceUncheckedCreateWithoutActivityInput> | ResourceCreateWithoutActivityInput[] | ResourceUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutActivityInput | ResourceCreateOrConnectWithoutActivityInput[]
    createMany?: ResourceCreateManyActivityInputEnvelope
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutActivityInput = {
    create?: XOR<ReviewCreateWithoutActivityInput, ReviewUncheckedCreateWithoutActivityInput> | ReviewCreateWithoutActivityInput[] | ReviewUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutActivityInput | ReviewCreateOrConnectWithoutActivityInput[]
    createMany?: ReviewCreateManyActivityInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type AttemptUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<AttemptCreateWithoutActivityInput, AttemptUncheckedCreateWithoutActivityInput> | AttemptCreateWithoutActivityInput[] | AttemptUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutActivityInput | AttemptCreateOrConnectWithoutActivityInput[]
    createMany?: AttemptCreateManyActivityInputEnvelope
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<CommentCreateWithoutActivityInput, CommentUncheckedCreateWithoutActivityInput> | CommentCreateWithoutActivityInput[] | CommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityInput | CommentCreateOrConnectWithoutActivityInput[]
    createMany?: CommentCreateManyActivityInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ResourceUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ResourceCreateWithoutActivityInput, ResourceUncheckedCreateWithoutActivityInput> | ResourceCreateWithoutActivityInput[] | ResourceUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutActivityInput | ResourceCreateOrConnectWithoutActivityInput[]
    createMany?: ResourceCreateManyActivityInputEnvelope
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ReviewCreateWithoutActivityInput, ReviewUncheckedCreateWithoutActivityInput> | ReviewCreateWithoutActivityInput[] | ReviewUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutActivityInput | ReviewCreateOrConnectWithoutActivityInput[]
    createMany?: ReviewCreateManyActivityInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutActivityNestedInput = {
    create?: XOR<UserCreateWithoutActivityInput, UserUncheckedCreateWithoutActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityInput
    upsert?: UserUpsertWithoutActivityInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityInput, UserUpdateWithoutActivityInput>, UserUncheckedUpdateWithoutActivityInput>
  }

  export type TaskUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<TaskCreateWithoutActivitiesInput, TaskUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: TaskCreateOrConnectWithoutActivitiesInput
    upsert?: TaskUpsertWithoutActivitiesInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutActivitiesInput, TaskUpdateWithoutActivitiesInput>, TaskUncheckedUpdateWithoutActivitiesInput>
  }

  export type AttemptUpdateManyWithoutActivityNestedInput = {
    create?: XOR<AttemptCreateWithoutActivityInput, AttemptUncheckedCreateWithoutActivityInput> | AttemptCreateWithoutActivityInput[] | AttemptUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutActivityInput | AttemptCreateOrConnectWithoutActivityInput[]
    upsert?: AttemptUpsertWithWhereUniqueWithoutActivityInput | AttemptUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: AttemptCreateManyActivityInputEnvelope
    set?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    disconnect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    delete?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    update?: AttemptUpdateWithWhereUniqueWithoutActivityInput | AttemptUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: AttemptUpdateManyWithWhereWithoutActivityInput | AttemptUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: AttemptScalarWhereInput | AttemptScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutActivityNestedInput = {
    create?: XOR<CommentCreateWithoutActivityInput, CommentUncheckedCreateWithoutActivityInput> | CommentCreateWithoutActivityInput[] | CommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityInput | CommentCreateOrConnectWithoutActivityInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutActivityInput | CommentUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: CommentCreateManyActivityInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutActivityInput | CommentUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutActivityInput | CommentUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ResourceUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ResourceCreateWithoutActivityInput, ResourceUncheckedCreateWithoutActivityInput> | ResourceCreateWithoutActivityInput[] | ResourceUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutActivityInput | ResourceCreateOrConnectWithoutActivityInput[]
    upsert?: ResourceUpsertWithWhereUniqueWithoutActivityInput | ResourceUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ResourceCreateManyActivityInputEnvelope
    set?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    disconnect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    delete?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    update?: ResourceUpdateWithWhereUniqueWithoutActivityInput | ResourceUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ResourceUpdateManyWithWhereWithoutActivityInput | ResourceUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ResourceScalarWhereInput | ResourceScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ReviewCreateWithoutActivityInput, ReviewUncheckedCreateWithoutActivityInput> | ReviewCreateWithoutActivityInput[] | ReviewUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutActivityInput | ReviewCreateOrConnectWithoutActivityInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutActivityInput | ReviewUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ReviewCreateManyActivityInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutActivityInput | ReviewUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutActivityInput | ReviewUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type AttemptUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<AttemptCreateWithoutActivityInput, AttemptUncheckedCreateWithoutActivityInput> | AttemptCreateWithoutActivityInput[] | AttemptUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: AttemptCreateOrConnectWithoutActivityInput | AttemptCreateOrConnectWithoutActivityInput[]
    upsert?: AttemptUpsertWithWhereUniqueWithoutActivityInput | AttemptUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: AttemptCreateManyActivityInputEnvelope
    set?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    disconnect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    delete?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    connect?: AttemptWhereUniqueInput | AttemptWhereUniqueInput[]
    update?: AttemptUpdateWithWhereUniqueWithoutActivityInput | AttemptUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: AttemptUpdateManyWithWhereWithoutActivityInput | AttemptUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: AttemptScalarWhereInput | AttemptScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<CommentCreateWithoutActivityInput, CommentUncheckedCreateWithoutActivityInput> | CommentCreateWithoutActivityInput[] | CommentUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityInput | CommentCreateOrConnectWithoutActivityInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutActivityInput | CommentUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: CommentCreateManyActivityInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutActivityInput | CommentUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutActivityInput | CommentUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ResourceUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ResourceCreateWithoutActivityInput, ResourceUncheckedCreateWithoutActivityInput> | ResourceCreateWithoutActivityInput[] | ResourceUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ResourceCreateOrConnectWithoutActivityInput | ResourceCreateOrConnectWithoutActivityInput[]
    upsert?: ResourceUpsertWithWhereUniqueWithoutActivityInput | ResourceUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ResourceCreateManyActivityInputEnvelope
    set?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    disconnect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    delete?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    connect?: ResourceWhereUniqueInput | ResourceWhereUniqueInput[]
    update?: ResourceUpdateWithWhereUniqueWithoutActivityInput | ResourceUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ResourceUpdateManyWithWhereWithoutActivityInput | ResourceUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ResourceScalarWhereInput | ResourceScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ReviewCreateWithoutActivityInput, ReviewUncheckedCreateWithoutActivityInput> | ReviewCreateWithoutActivityInput[] | ReviewUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutActivityInput | ReviewCreateOrConnectWithoutActivityInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutActivityInput | ReviewUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ReviewCreateManyActivityInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutActivityInput | ReviewUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutActivityInput | ReviewUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAttemptInput = {
    create?: XOR<UserCreateWithoutAttemptInput, UserUncheckedCreateWithoutAttemptInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttemptInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<ActivityCreateWithoutAttemptsInput, ActivityUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutAttemptsInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneWithoutAttemptNestedInput = {
    create?: XOR<UserCreateWithoutAttemptInput, UserUncheckedCreateWithoutAttemptInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttemptInput
    upsert?: UserUpsertWithoutAttemptInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttemptInput, UserUpdateWithoutAttemptInput>, UserUncheckedUpdateWithoutAttemptInput>
  }

  export type ActivityUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<ActivityCreateWithoutAttemptsInput, ActivityUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutAttemptsInput
    upsert?: ActivityUpsertWithoutAttemptsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutAttemptsInput, ActivityUpdateWithoutAttemptsInput>, ActivityUncheckedUpdateWithoutAttemptsInput>
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutCommentsInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>, UserUncheckedUpdateWithoutCommentInput>
  }

  export type ActivityUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutCommentsInput
    upsert?: ActivityUpsertWithoutCommentsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutCommentsInput, ActivityUpdateWithoutCommentsInput>, ActivityUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutResourceInput = {
    create?: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput>
    connectOrCreate?: UserCreateOrConnectWithoutResourceInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutResourcesInput = {
    create?: XOR<ActivityCreateWithoutResourcesInput, ActivityUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutResourcesInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneWithoutResourceNestedInput = {
    create?: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput>
    connectOrCreate?: UserCreateOrConnectWithoutResourceInput
    upsert?: UserUpsertWithoutResourceInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResourceInput, UserUpdateWithoutResourceInput>, UserUncheckedUpdateWithoutResourceInput>
  }

  export type ActivityUpdateOneRequiredWithoutResourcesNestedInput = {
    create?: XOR<ActivityCreateWithoutResourcesInput, ActivityUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutResourcesInput
    upsert?: ActivityUpsertWithoutResourcesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutResourcesInput, ActivityUpdateWithoutResourcesInput>, ActivityUncheckedUpdateWithoutResourcesInput>
  }

  export type UserCreateNestedOneWithoutReviewInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ActivityCreateWithoutReviewsInput, ActivityUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutReviewsInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneWithoutReviewNestedInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    upsert?: UserUpsertWithoutReviewInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewInput, UserUpdateWithoutReviewInput>, UserUncheckedUpdateWithoutReviewInput>
  }

  export type ActivityUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ActivityCreateWithoutReviewsInput, ActivityUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutReviewsInput
    upsert?: ActivityUpsertWithoutReviewsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutReviewsInput, ActivityUpdateWithoutReviewsInput>, ActivityUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutTeamsInput = {
    create?: XOR<ProjectCreateWithoutTeamsInput, ProjectUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTeamsInput
    connect?: ProjectWhereUniqueInput
  }

  export type TeamMemberCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput
    upsert?: UserUpsertWithoutTeamInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamInput, UserUpdateWithoutTeamInput>, UserUncheckedUpdateWithoutTeamInput>
  }

  export type ProjectUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<ProjectCreateWithoutTeamsInput, ProjectUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTeamsInput
    upsert?: ProjectUpsertWithoutTeamsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTeamsInput, ProjectUpdateWithoutTeamsInput>, ProjectUncheckedUpdateWithoutTeamsInput>
  }

  export type TeamMemberUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTeamMemberInput = {
    create?: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMemberInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserUpdateOneWithoutTeamMemberNestedInput = {
    create?: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMemberInput
    upsert?: UserUpsertWithoutTeamMemberInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMemberInput, UserUpdateWithoutTeamMemberInput>, UserUncheckedUpdateWithoutTeamMemberInput>
  }

  export type TeamUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    upsert?: TeamUpsertWithoutMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutMembersInput, TeamUpdateWithoutMembersInput>, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type UserCreateNestedOneWithoutPathInput = {
    create?: XOR<UserCreateWithoutPathInput, UserUncheckedCreateWithoutPathInput>
    connectOrCreate?: UserCreateOrConnectWithoutPathInput
    connect?: UserWhereUniqueInput
  }

  export type TermCreateNestedOneWithoutPathsInput = {
    create?: XOR<TermCreateWithoutPathsInput, TermUncheckedCreateWithoutPathsInput>
    connectOrCreate?: TermCreateOrConnectWithoutPathsInput
    connect?: TermWhereUniqueInput
  }

  export type GoalCreateNestedOneWithoutPathsFromTermInput = {
    create?: XOR<GoalCreateWithoutPathsFromTermInput, GoalUncheckedCreateWithoutPathsFromTermInput>
    connectOrCreate?: GoalCreateOrConnectWithoutPathsFromTermInput
    connect?: GoalWhereUniqueInput
  }

  export type UserUpdateOneWithoutPathNestedInput = {
    create?: XOR<UserCreateWithoutPathInput, UserUncheckedCreateWithoutPathInput>
    connectOrCreate?: UserCreateOrConnectWithoutPathInput
    upsert?: UserUpsertWithoutPathInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPathInput, UserUpdateWithoutPathInput>, UserUncheckedUpdateWithoutPathInput>
  }

  export type TermUpdateOneRequiredWithoutPathsNestedInput = {
    create?: XOR<TermCreateWithoutPathsInput, TermUncheckedCreateWithoutPathsInput>
    connectOrCreate?: TermCreateOrConnectWithoutPathsInput
    upsert?: TermUpsertWithoutPathsInput
    connect?: TermWhereUniqueInput
    update?: XOR<XOR<TermUpdateToOneWithWhereWithoutPathsInput, TermUpdateWithoutPathsInput>, TermUncheckedUpdateWithoutPathsInput>
  }

  export type GoalUpdateOneRequiredWithoutPathsFromTermNestedInput = {
    create?: XOR<GoalCreateWithoutPathsFromTermInput, GoalUncheckedCreateWithoutPathsFromTermInput>
    connectOrCreate?: GoalCreateOrConnectWithoutPathsFromTermInput
    upsert?: GoalUpsertWithoutPathsFromTermInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutPathsFromTermInput, GoalUpdateWithoutPathsFromTermInput>, GoalUncheckedUpdateWithoutPathsFromTermInput>
  }

  export type UserCreateNestedOneWithoutRoutineInput = {
    create?: XOR<UserCreateWithoutRoutineInput, UserUncheckedCreateWithoutRoutineInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineInput
    connect?: UserWhereUniqueInput
  }

  export type RoutineSlotCreateNestedManyWithoutRoutineInput = {
    create?: XOR<RoutineSlotCreateWithoutRoutineInput, RoutineSlotUncheckedCreateWithoutRoutineInput> | RoutineSlotCreateWithoutRoutineInput[] | RoutineSlotUncheckedCreateWithoutRoutineInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutRoutineInput | RoutineSlotCreateOrConnectWithoutRoutineInput[]
    createMany?: RoutineSlotCreateManyRoutineInputEnvelope
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
  }

  export type RoutineSlotUncheckedCreateNestedManyWithoutRoutineInput = {
    create?: XOR<RoutineSlotCreateWithoutRoutineInput, RoutineSlotUncheckedCreateWithoutRoutineInput> | RoutineSlotCreateWithoutRoutineInput[] | RoutineSlotUncheckedCreateWithoutRoutineInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutRoutineInput | RoutineSlotCreateOrConnectWithoutRoutineInput[]
    createMany?: RoutineSlotCreateManyRoutineInputEnvelope
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutRoutineNestedInput = {
    create?: XOR<UserCreateWithoutRoutineInput, UserUncheckedCreateWithoutRoutineInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineInput
    upsert?: UserUpsertWithoutRoutineInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoutineInput, UserUpdateWithoutRoutineInput>, UserUncheckedUpdateWithoutRoutineInput>
  }

  export type RoutineSlotUpdateManyWithoutRoutineNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutRoutineInput, RoutineSlotUncheckedCreateWithoutRoutineInput> | RoutineSlotCreateWithoutRoutineInput[] | RoutineSlotUncheckedCreateWithoutRoutineInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutRoutineInput | RoutineSlotCreateOrConnectWithoutRoutineInput[]
    upsert?: RoutineSlotUpsertWithWhereUniqueWithoutRoutineInput | RoutineSlotUpsertWithWhereUniqueWithoutRoutineInput[]
    createMany?: RoutineSlotCreateManyRoutineInputEnvelope
    set?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    disconnect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    delete?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    update?: RoutineSlotUpdateWithWhereUniqueWithoutRoutineInput | RoutineSlotUpdateWithWhereUniqueWithoutRoutineInput[]
    updateMany?: RoutineSlotUpdateManyWithWhereWithoutRoutineInput | RoutineSlotUpdateManyWithWhereWithoutRoutineInput[]
    deleteMany?: RoutineSlotScalarWhereInput | RoutineSlotScalarWhereInput[]
  }

  export type RoutineSlotUncheckedUpdateManyWithoutRoutineNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutRoutineInput, RoutineSlotUncheckedCreateWithoutRoutineInput> | RoutineSlotCreateWithoutRoutineInput[] | RoutineSlotUncheckedCreateWithoutRoutineInput[]
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutRoutineInput | RoutineSlotCreateOrConnectWithoutRoutineInput[]
    upsert?: RoutineSlotUpsertWithWhereUniqueWithoutRoutineInput | RoutineSlotUpsertWithWhereUniqueWithoutRoutineInput[]
    createMany?: RoutineSlotCreateManyRoutineInputEnvelope
    set?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    disconnect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    delete?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    connect?: RoutineSlotWhereUniqueInput | RoutineSlotWhereUniqueInput[]
    update?: RoutineSlotUpdateWithWhereUniqueWithoutRoutineInput | RoutineSlotUpdateWithWhereUniqueWithoutRoutineInput[]
    updateMany?: RoutineSlotUpdateManyWithWhereWithoutRoutineInput | RoutineSlotUpdateManyWithWhereWithoutRoutineInput[]
    deleteMany?: RoutineSlotScalarWhereInput | RoutineSlotScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRoutineSlotInput = {
    create?: XOR<UserCreateWithoutRoutineSlotInput, UserUncheckedCreateWithoutRoutineSlotInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotInput
    connect?: UserWhereUniqueInput
  }

  export type RoutineCreateNestedOneWithoutSlotsInput = {
    create?: XOR<RoutineCreateWithoutSlotsInput, RoutineUncheckedCreateWithoutSlotsInput>
    connectOrCreate?: RoutineCreateOrConnectWithoutSlotsInput
    connect?: RoutineWhereUniqueInput
  }

  export type RoutineSlotThreadCreateNestedManyWithoutSlotInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutSlotInput, RoutineSlotThreadUncheckedCreateWithoutSlotInput> | RoutineSlotThreadCreateWithoutSlotInput[] | RoutineSlotThreadUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutSlotInput | RoutineSlotThreadCreateOrConnectWithoutSlotInput[]
    createMany?: RoutineSlotThreadCreateManySlotInputEnvelope
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
  }

  export type RoutineSlotTaskCreateNestedManyWithoutSlotInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutSlotInput, RoutineSlotTaskUncheckedCreateWithoutSlotInput> | RoutineSlotTaskCreateWithoutSlotInput[] | RoutineSlotTaskUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutSlotInput | RoutineSlotTaskCreateOrConnectWithoutSlotInput[]
    createMany?: RoutineSlotTaskCreateManySlotInputEnvelope
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
  }

  export type RoutineSlotActivityCreateNestedManyWithoutSlotInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutSlotInput, RoutineSlotActivityUncheckedCreateWithoutSlotInput> | RoutineSlotActivityCreateWithoutSlotInput[] | RoutineSlotActivityUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutSlotInput | RoutineSlotActivityCreateOrConnectWithoutSlotInput[]
    createMany?: RoutineSlotActivityCreateManySlotInputEnvelope
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
  }

  export type RoutineSlotThreadUncheckedCreateNestedManyWithoutSlotInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutSlotInput, RoutineSlotThreadUncheckedCreateWithoutSlotInput> | RoutineSlotThreadCreateWithoutSlotInput[] | RoutineSlotThreadUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutSlotInput | RoutineSlotThreadCreateOrConnectWithoutSlotInput[]
    createMany?: RoutineSlotThreadCreateManySlotInputEnvelope
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
  }

  export type RoutineSlotTaskUncheckedCreateNestedManyWithoutSlotInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutSlotInput, RoutineSlotTaskUncheckedCreateWithoutSlotInput> | RoutineSlotTaskCreateWithoutSlotInput[] | RoutineSlotTaskUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutSlotInput | RoutineSlotTaskCreateOrConnectWithoutSlotInput[]
    createMany?: RoutineSlotTaskCreateManySlotInputEnvelope
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
  }

  export type RoutineSlotActivityUncheckedCreateNestedManyWithoutSlotInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutSlotInput, RoutineSlotActivityUncheckedCreateWithoutSlotInput> | RoutineSlotActivityCreateWithoutSlotInput[] | RoutineSlotActivityUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutSlotInput | RoutineSlotActivityCreateOrConnectWithoutSlotInput[]
    createMany?: RoutineSlotActivityCreateManySlotInputEnvelope
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutRoutineSlotNestedInput = {
    create?: XOR<UserCreateWithoutRoutineSlotInput, UserUncheckedCreateWithoutRoutineSlotInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotInput
    upsert?: UserUpsertWithoutRoutineSlotInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoutineSlotInput, UserUpdateWithoutRoutineSlotInput>, UserUncheckedUpdateWithoutRoutineSlotInput>
  }

  export type RoutineUpdateOneRequiredWithoutSlotsNestedInput = {
    create?: XOR<RoutineCreateWithoutSlotsInput, RoutineUncheckedCreateWithoutSlotsInput>
    connectOrCreate?: RoutineCreateOrConnectWithoutSlotsInput
    upsert?: RoutineUpsertWithoutSlotsInput
    connect?: RoutineWhereUniqueInput
    update?: XOR<XOR<RoutineUpdateToOneWithWhereWithoutSlotsInput, RoutineUpdateWithoutSlotsInput>, RoutineUncheckedUpdateWithoutSlotsInput>
  }

  export type RoutineSlotThreadUpdateManyWithoutSlotNestedInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutSlotInput, RoutineSlotThreadUncheckedCreateWithoutSlotInput> | RoutineSlotThreadCreateWithoutSlotInput[] | RoutineSlotThreadUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutSlotInput | RoutineSlotThreadCreateOrConnectWithoutSlotInput[]
    upsert?: RoutineSlotThreadUpsertWithWhereUniqueWithoutSlotInput | RoutineSlotThreadUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: RoutineSlotThreadCreateManySlotInputEnvelope
    set?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    disconnect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    delete?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    update?: RoutineSlotThreadUpdateWithWhereUniqueWithoutSlotInput | RoutineSlotThreadUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: RoutineSlotThreadUpdateManyWithWhereWithoutSlotInput | RoutineSlotThreadUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: RoutineSlotThreadScalarWhereInput | RoutineSlotThreadScalarWhereInput[]
  }

  export type RoutineSlotTaskUpdateManyWithoutSlotNestedInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutSlotInput, RoutineSlotTaskUncheckedCreateWithoutSlotInput> | RoutineSlotTaskCreateWithoutSlotInput[] | RoutineSlotTaskUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutSlotInput | RoutineSlotTaskCreateOrConnectWithoutSlotInput[]
    upsert?: RoutineSlotTaskUpsertWithWhereUniqueWithoutSlotInput | RoutineSlotTaskUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: RoutineSlotTaskCreateManySlotInputEnvelope
    set?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    disconnect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    delete?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    update?: RoutineSlotTaskUpdateWithWhereUniqueWithoutSlotInput | RoutineSlotTaskUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: RoutineSlotTaskUpdateManyWithWhereWithoutSlotInput | RoutineSlotTaskUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: RoutineSlotTaskScalarWhereInput | RoutineSlotTaskScalarWhereInput[]
  }

  export type RoutineSlotActivityUpdateManyWithoutSlotNestedInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutSlotInput, RoutineSlotActivityUncheckedCreateWithoutSlotInput> | RoutineSlotActivityCreateWithoutSlotInput[] | RoutineSlotActivityUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutSlotInput | RoutineSlotActivityCreateOrConnectWithoutSlotInput[]
    upsert?: RoutineSlotActivityUpsertWithWhereUniqueWithoutSlotInput | RoutineSlotActivityUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: RoutineSlotActivityCreateManySlotInputEnvelope
    set?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    disconnect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    delete?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    update?: RoutineSlotActivityUpdateWithWhereUniqueWithoutSlotInput | RoutineSlotActivityUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: RoutineSlotActivityUpdateManyWithWhereWithoutSlotInput | RoutineSlotActivityUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: RoutineSlotActivityScalarWhereInput | RoutineSlotActivityScalarWhereInput[]
  }

  export type RoutineSlotThreadUncheckedUpdateManyWithoutSlotNestedInput = {
    create?: XOR<RoutineSlotThreadCreateWithoutSlotInput, RoutineSlotThreadUncheckedCreateWithoutSlotInput> | RoutineSlotThreadCreateWithoutSlotInput[] | RoutineSlotThreadUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotThreadCreateOrConnectWithoutSlotInput | RoutineSlotThreadCreateOrConnectWithoutSlotInput[]
    upsert?: RoutineSlotThreadUpsertWithWhereUniqueWithoutSlotInput | RoutineSlotThreadUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: RoutineSlotThreadCreateManySlotInputEnvelope
    set?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    disconnect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    delete?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    connect?: RoutineSlotThreadWhereUniqueInput | RoutineSlotThreadWhereUniqueInput[]
    update?: RoutineSlotThreadUpdateWithWhereUniqueWithoutSlotInput | RoutineSlotThreadUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: RoutineSlotThreadUpdateManyWithWhereWithoutSlotInput | RoutineSlotThreadUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: RoutineSlotThreadScalarWhereInput | RoutineSlotThreadScalarWhereInput[]
  }

  export type RoutineSlotTaskUncheckedUpdateManyWithoutSlotNestedInput = {
    create?: XOR<RoutineSlotTaskCreateWithoutSlotInput, RoutineSlotTaskUncheckedCreateWithoutSlotInput> | RoutineSlotTaskCreateWithoutSlotInput[] | RoutineSlotTaskUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotTaskCreateOrConnectWithoutSlotInput | RoutineSlotTaskCreateOrConnectWithoutSlotInput[]
    upsert?: RoutineSlotTaskUpsertWithWhereUniqueWithoutSlotInput | RoutineSlotTaskUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: RoutineSlotTaskCreateManySlotInputEnvelope
    set?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    disconnect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    delete?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    connect?: RoutineSlotTaskWhereUniqueInput | RoutineSlotTaskWhereUniqueInput[]
    update?: RoutineSlotTaskUpdateWithWhereUniqueWithoutSlotInput | RoutineSlotTaskUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: RoutineSlotTaskUpdateManyWithWhereWithoutSlotInput | RoutineSlotTaskUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: RoutineSlotTaskScalarWhereInput | RoutineSlotTaskScalarWhereInput[]
  }

  export type RoutineSlotActivityUncheckedUpdateManyWithoutSlotNestedInput = {
    create?: XOR<RoutineSlotActivityCreateWithoutSlotInput, RoutineSlotActivityUncheckedCreateWithoutSlotInput> | RoutineSlotActivityCreateWithoutSlotInput[] | RoutineSlotActivityUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: RoutineSlotActivityCreateOrConnectWithoutSlotInput | RoutineSlotActivityCreateOrConnectWithoutSlotInput[]
    upsert?: RoutineSlotActivityUpsertWithWhereUniqueWithoutSlotInput | RoutineSlotActivityUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: RoutineSlotActivityCreateManySlotInputEnvelope
    set?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    disconnect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    delete?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    connect?: RoutineSlotActivityWhereUniqueInput | RoutineSlotActivityWhereUniqueInput[]
    update?: RoutineSlotActivityUpdateWithWhereUniqueWithoutSlotInput | RoutineSlotActivityUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: RoutineSlotActivityUpdateManyWithWhereWithoutSlotInput | RoutineSlotActivityUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: RoutineSlotActivityScalarWhereInput | RoutineSlotActivityScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRoutineSlotThreadInput = {
    create?: XOR<UserCreateWithoutRoutineSlotThreadInput, UserUncheckedCreateWithoutRoutineSlotThreadInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotThreadInput
    connect?: UserWhereUniqueInput
  }

  export type RoutineSlotCreateNestedOneWithoutSlotThreadsInput = {
    create?: XOR<RoutineSlotCreateWithoutSlotThreadsInput, RoutineSlotUncheckedCreateWithoutSlotThreadsInput>
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutSlotThreadsInput
    connect?: RoutineSlotWhereUniqueInput
  }

  export type UserUpdateOneWithoutRoutineSlotThreadNestedInput = {
    create?: XOR<UserCreateWithoutRoutineSlotThreadInput, UserUncheckedCreateWithoutRoutineSlotThreadInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotThreadInput
    upsert?: UserUpsertWithoutRoutineSlotThreadInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoutineSlotThreadInput, UserUpdateWithoutRoutineSlotThreadInput>, UserUncheckedUpdateWithoutRoutineSlotThreadInput>
  }

  export type RoutineSlotUpdateOneRequiredWithoutSlotThreadsNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutSlotThreadsInput, RoutineSlotUncheckedCreateWithoutSlotThreadsInput>
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutSlotThreadsInput
    upsert?: RoutineSlotUpsertWithoutSlotThreadsInput
    connect?: RoutineSlotWhereUniqueInput
    update?: XOR<XOR<RoutineSlotUpdateToOneWithWhereWithoutSlotThreadsInput, RoutineSlotUpdateWithoutSlotThreadsInput>, RoutineSlotUncheckedUpdateWithoutSlotThreadsInput>
  }

  export type UserCreateNestedOneWithoutRoutineSlotTaskInput = {
    create?: XOR<UserCreateWithoutRoutineSlotTaskInput, UserUncheckedCreateWithoutRoutineSlotTaskInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotTaskInput
    connect?: UserWhereUniqueInput
  }

  export type RoutineSlotCreateNestedOneWithoutSlotTasksInput = {
    create?: XOR<RoutineSlotCreateWithoutSlotTasksInput, RoutineSlotUncheckedCreateWithoutSlotTasksInput>
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutSlotTasksInput
    connect?: RoutineSlotWhereUniqueInput
  }

  export type UserUpdateOneWithoutRoutineSlotTaskNestedInput = {
    create?: XOR<UserCreateWithoutRoutineSlotTaskInput, UserUncheckedCreateWithoutRoutineSlotTaskInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotTaskInput
    upsert?: UserUpsertWithoutRoutineSlotTaskInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoutineSlotTaskInput, UserUpdateWithoutRoutineSlotTaskInput>, UserUncheckedUpdateWithoutRoutineSlotTaskInput>
  }

  export type RoutineSlotUpdateOneRequiredWithoutSlotTasksNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutSlotTasksInput, RoutineSlotUncheckedCreateWithoutSlotTasksInput>
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutSlotTasksInput
    upsert?: RoutineSlotUpsertWithoutSlotTasksInput
    connect?: RoutineSlotWhereUniqueInput
    update?: XOR<XOR<RoutineSlotUpdateToOneWithWhereWithoutSlotTasksInput, RoutineSlotUpdateWithoutSlotTasksInput>, RoutineSlotUncheckedUpdateWithoutSlotTasksInput>
  }

  export type UserCreateNestedOneWithoutRoutineSlotActivityInput = {
    create?: XOR<UserCreateWithoutRoutineSlotActivityInput, UserUncheckedCreateWithoutRoutineSlotActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotActivityInput
    connect?: UserWhereUniqueInput
  }

  export type RoutineSlotCreateNestedOneWithoutSlotActivitiesInput = {
    create?: XOR<RoutineSlotCreateWithoutSlotActivitiesInput, RoutineSlotUncheckedCreateWithoutSlotActivitiesInput>
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutSlotActivitiesInput
    connect?: RoutineSlotWhereUniqueInput
  }

  export type UserUpdateOneWithoutRoutineSlotActivityNestedInput = {
    create?: XOR<UserCreateWithoutRoutineSlotActivityInput, UserUncheckedCreateWithoutRoutineSlotActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutineSlotActivityInput
    upsert?: UserUpsertWithoutRoutineSlotActivityInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoutineSlotActivityInput, UserUpdateWithoutRoutineSlotActivityInput>, UserUncheckedUpdateWithoutRoutineSlotActivityInput>
  }

  export type RoutineSlotUpdateOneRequiredWithoutSlotActivitiesNestedInput = {
    create?: XOR<RoutineSlotCreateWithoutSlotActivitiesInput, RoutineSlotUncheckedCreateWithoutSlotActivitiesInput>
    connectOrCreate?: RoutineSlotCreateOrConnectWithoutSlotActivitiesInput
    upsert?: RoutineSlotUpsertWithoutSlotActivitiesInput
    connect?: RoutineSlotWhereUniqueInput
    update?: XOR<XOR<RoutineSlotUpdateToOneWithWhereWithoutSlotActivitiesInput, RoutineSlotUpdateWithoutSlotActivitiesInput>, RoutineSlotUncheckedUpdateWithoutSlotActivitiesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedEnumTermKindFilter<$PrismaModel = never> = {
    equals?: $Enums.TermKind | EnumTermKindFieldRefInput<$PrismaModel>
    in?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    not?: NestedEnumTermKindFilter<$PrismaModel> | $Enums.TermKind
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumTermKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TermKind | EnumTermKindFieldRefInput<$PrismaModel>
    in?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermKind[] | ListEnumTermKindFieldRefInput<$PrismaModel>
    not?: NestedEnumTermKindWithAggregatesFilter<$PrismaModel> | $Enums.TermKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermKindFilter<$PrismaModel>
    _max?: NestedEnumTermKindFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedEnumGoalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeFilter<$PrismaModel> | $Enums.GoalType
  }

  export type NestedEnumGoalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeWithAggregatesFilter<$PrismaModel> | $Enums.GoalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalTypeFilter<$PrismaModel>
    _max?: NestedEnumGoalTypeFilter<$PrismaModel>
  }

  export type TermCreateWithoutUserInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    derivedFrom?: TermCreateNestedOneWithoutDerivedTermsInput
    derivedTerms?: TermCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadCreateNestedManyWithoutTermInput
    paths?: PathCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutUserInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    derivedTerms?: TermUncheckedCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadUncheckedCreateNestedManyWithoutTermInput
    paths?: PathUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutUserInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutUserInput, TermUncheckedCreateWithoutUserInput>
  }

  export type TermCreateManyUserInputEnvelope = {
    data: TermCreateManyUserInput | TermCreateManyUserInput[]
  }

  export type ThreadCreateWithoutUserInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    term: TermCreateNestedOneWithoutThreadsInput
    projects?: ProjectCreateNestedManyWithoutThreadInput
  }

  export type ThreadUncheckedCreateWithoutUserInput = {
    name: string
    description?: string | null
    termId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ThreadCreateOrConnectWithoutUserInput = {
    where: ThreadWhereUniqueInput
    create: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput>
  }

  export type ThreadCreateManyUserInputEnvelope = {
    data: ThreadCreateManyUserInput | ThreadCreateManyUserInput[]
  }

  export type ProjectCreateWithoutUserInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    thread: ThreadCreateNestedOneWithoutProjectsInput
    goals?: GoalCreateNestedManyWithoutProjectInput
    teams?: TeamCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserInput = {
    name: string
    description?: string | null
    threadId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutProjectInput
    teams?: TeamUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectCreateManyUserInputEnvelope = {
    data: ProjectCreateManyUserInput | ProjectCreateManyUserInput[]
  }

  export type GoalCreateWithoutUserInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutGoalsInput
    processes?: ProcessCreateNestedManyWithoutGoalInput
    pathsFromTerm?: PathCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalUncheckedCreateWithoutUserInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    projectId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processes?: ProcessUncheckedCreateNestedManyWithoutGoalInput
    pathsFromTerm?: PathUncheckedCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalCreateOrConnectWithoutUserInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalCreateManyUserInputEnvelope = {
    data: GoalCreateManyUserInput | GoalCreateManyUserInput[]
  }

  export type ProcessCreateWithoutUserInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goal: GoalCreateNestedOneWithoutProcessesInput
    problems?: ProblemCreateNestedManyWithoutProcessInput
  }

  export type ProcessUncheckedCreateWithoutUserInput = {
    name: string
    goalId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemUncheckedCreateNestedManyWithoutProcessInput
  }

  export type ProcessCreateOrConnectWithoutUserInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutUserInput, ProcessUncheckedCreateWithoutUserInput>
  }

  export type ProcessCreateManyUserInputEnvelope = {
    data: ProcessCreateManyUserInput | ProcessCreateManyUserInput[]
  }

  export type ProblemCreateWithoutUserInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    process: ProcessCreateNestedOneWithoutProblemsInput
    tasks?: TaskCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutUserInput = {
    name: string
    processId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutUserInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput>
  }

  export type ProblemCreateManyUserInputEnvelope = {
    data: ProblemCreateManyUserInput | ProblemCreateManyUserInput[]
  }

  export type TaskCreateWithoutUserInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutTasksInput
    activities?: ActivityCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutUserInput = {
    name: string
    problemId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutUserInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput>
  }

  export type TaskCreateManyUserInputEnvelope = {
    data: TaskCreateManyUserInput | TaskCreateManyUserInput[]
  }

  export type ActivityCreateWithoutUserInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutActivitiesInput
    attempts?: AttemptCreateNestedManyWithoutActivityInput
    comments?: CommentCreateNestedManyWithoutActivityInput
    resources?: ResourceCreateNestedManyWithoutActivityInput
    reviews?: ReviewCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutUserInput = {
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptUncheckedCreateNestedManyWithoutActivityInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityInput
    resources?: ResourceUncheckedCreateNestedManyWithoutActivityInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityCreateManyUserInputEnvelope = {
    data: ActivityCreateManyUserInput | ActivityCreateManyUserInput[]
  }

  export type AttemptCreateWithoutUserInput = {
    result?: string | null
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutAttemptsInput
  }

  export type AttemptUncheckedCreateWithoutUserInput = {
    activityId: string
    result?: string | null
    createdAt?: Date | string
  }

  export type AttemptCreateOrConnectWithoutUserInput = {
    where: AttemptWhereUniqueInput
    create: XOR<AttemptCreateWithoutUserInput, AttemptUncheckedCreateWithoutUserInput>
  }

  export type AttemptCreateManyUserInputEnvelope = {
    data: AttemptCreateManyUserInput | AttemptCreateManyUserInput[]
  }

  export type CommentCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
  }

  export type ResourceCreateWithoutUserInput = {
    url: string
    title?: string | null
    activity: ActivityCreateNestedOneWithoutResourcesInput
  }

  export type ResourceUncheckedCreateWithoutUserInput = {
    activityId: string
    url: string
    title?: string | null
  }

  export type ResourceCreateOrConnectWithoutUserInput = {
    where: ResourceWhereUniqueInput
    create: XOR<ResourceCreateWithoutUserInput, ResourceUncheckedCreateWithoutUserInput>
  }

  export type ResourceCreateManyUserInputEnvelope = {
    data: ResourceCreateManyUserInput | ResourceCreateManyUserInput[]
  }

  export type ReviewCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
  }

  export type TeamCreateWithoutUserInput = {
    name: string
    details?: InputJsonValue | null
    project: ProjectCreateNestedOneWithoutTeamsInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutUserInput = {
    projectId: string
    name: string
    details?: InputJsonValue | null
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutUserInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput>
  }

  export type TeamCreateManyUserInputEnvelope = {
    data: TeamCreateManyUserInput | TeamCreateManyUserInput[]
  }

  export type TeamMemberCreateWithoutUserInput = {
    id?: string
    role?: string | null
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type TeamMemberUncheckedCreateWithoutUserInput = {
    id?: string
    teamId: string
    role?: string | null
  }

  export type TeamMemberCreateOrConnectWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberCreateManyUserInputEnvelope = {
    data: TeamMemberCreateManyUserInput | TeamMemberCreateManyUserInput[]
  }

  export type PathCreateWithoutUserInput = {
    steps?: InputJsonValue | null
    createdAt?: Date | string
    term: TermCreateNestedOneWithoutPathsInput
    learningGoal: GoalCreateNestedOneWithoutPathsFromTermInput
  }

  export type PathUncheckedCreateWithoutUserInput = {
    termId: string
    learningGoalId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type PathCreateOrConnectWithoutUserInput = {
    where: PathWhereUniqueInput
    create: XOR<PathCreateWithoutUserInput, PathUncheckedCreateWithoutUserInput>
  }

  export type PathCreateManyUserInputEnvelope = {
    data: PathCreateManyUserInput | PathCreateManyUserInput[]
  }

  export type RoutineCreateWithoutUserInput = {
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slots?: RoutineSlotCreateNestedManyWithoutRoutineInput
  }

  export type RoutineUncheckedCreateWithoutUserInput = {
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slots?: RoutineSlotUncheckedCreateNestedManyWithoutRoutineInput
  }

  export type RoutineCreateOrConnectWithoutUserInput = {
    where: RoutineWhereUniqueInput
    create: XOR<RoutineCreateWithoutUserInput, RoutineUncheckedCreateWithoutUserInput>
  }

  export type RoutineCreateManyUserInputEnvelope = {
    data: RoutineCreateManyUserInput | RoutineCreateManyUserInput[]
  }

  export type RoutineSlotCreateWithoutUserInput = {
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    routine: RoutineCreateNestedOneWithoutSlotsInput
    slotThreads?: RoutineSlotThreadCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUncheckedCreateWithoutUserInput = {
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slotThreads?: RoutineSlotThreadUncheckedCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskUncheckedCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityUncheckedCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotCreateOrConnectWithoutUserInput = {
    where: RoutineSlotWhereUniqueInput
    create: XOR<RoutineSlotCreateWithoutUserInput, RoutineSlotUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotCreateManyUserInputEnvelope = {
    data: RoutineSlotCreateManyUserInput | RoutineSlotCreateManyUserInput[]
  }

  export type RoutineSlotThreadCreateWithoutUserInput = {
    threadId: string
    slot: RoutineSlotCreateNestedOneWithoutSlotThreadsInput
  }

  export type RoutineSlotThreadUncheckedCreateWithoutUserInput = {
    slotId: string
    threadId: string
  }

  export type RoutineSlotThreadCreateOrConnectWithoutUserInput = {
    where: RoutineSlotThreadWhereUniqueInput
    create: XOR<RoutineSlotThreadCreateWithoutUserInput, RoutineSlotThreadUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotThreadCreateManyUserInputEnvelope = {
    data: RoutineSlotThreadCreateManyUserInput | RoutineSlotThreadCreateManyUserInput[]
  }

  export type RoutineSlotTaskCreateWithoutUserInput = {
    taskId: string
    slot: RoutineSlotCreateNestedOneWithoutSlotTasksInput
  }

  export type RoutineSlotTaskUncheckedCreateWithoutUserInput = {
    slotId: string
    taskId: string
  }

  export type RoutineSlotTaskCreateOrConnectWithoutUserInput = {
    where: RoutineSlotTaskWhereUniqueInput
    create: XOR<RoutineSlotTaskCreateWithoutUserInput, RoutineSlotTaskUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotTaskCreateManyUserInputEnvelope = {
    data: RoutineSlotTaskCreateManyUserInput | RoutineSlotTaskCreateManyUserInput[]
  }

  export type RoutineSlotActivityCreateWithoutUserInput = {
    activityId: string
    slot: RoutineSlotCreateNestedOneWithoutSlotActivitiesInput
  }

  export type RoutineSlotActivityUncheckedCreateWithoutUserInput = {
    slotId: string
    activityId: string
  }

  export type RoutineSlotActivityCreateOrConnectWithoutUserInput = {
    where: RoutineSlotActivityWhereUniqueInput
    create: XOR<RoutineSlotActivityCreateWithoutUserInput, RoutineSlotActivityUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotActivityCreateManyUserInputEnvelope = {
    data: RoutineSlotActivityCreateManyUserInput | RoutineSlotActivityCreateManyUserInput[]
  }

  export type TermUpsertWithWhereUniqueWithoutUserInput = {
    where: TermWhereUniqueInput
    update: XOR<TermUpdateWithoutUserInput, TermUncheckedUpdateWithoutUserInput>
    create: XOR<TermCreateWithoutUserInput, TermUncheckedCreateWithoutUserInput>
  }

  export type TermUpdateWithWhereUniqueWithoutUserInput = {
    where: TermWhereUniqueInput
    data: XOR<TermUpdateWithoutUserInput, TermUncheckedUpdateWithoutUserInput>
  }

  export type TermUpdateManyWithWhereWithoutUserInput = {
    where: TermScalarWhereInput
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyWithoutUserInput>
  }

  export type TermScalarWhereInput = {
    AND?: TermScalarWhereInput | TermScalarWhereInput[]
    OR?: TermScalarWhereInput[]
    NOT?: TermScalarWhereInput | TermScalarWhereInput[]
    id?: StringFilter<"Term"> | string
    name?: StringFilter<"Term"> | string
    description?: StringNullableFilter<"Term"> | string | null
    type?: EnumTermKindFilter<"Term"> | $Enums.TermKind
    derivedFromId?: StringNullableFilter<"Term"> | string | null
    layer?: StringNullableFilter<"Term"> | string | null
    meta?: JsonNullableFilter<"Term">
    createdAt?: DateTimeFilter<"Term"> | Date | string
    updatedAt?: DateTimeFilter<"Term"> | Date | string
  }

  export type ThreadUpsertWithWhereUniqueWithoutUserInput = {
    where: ThreadWhereUniqueInput
    update: XOR<ThreadUpdateWithoutUserInput, ThreadUncheckedUpdateWithoutUserInput>
    create: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput>
  }

  export type ThreadUpdateWithWhereUniqueWithoutUserInput = {
    where: ThreadWhereUniqueInput
    data: XOR<ThreadUpdateWithoutUserInput, ThreadUncheckedUpdateWithoutUserInput>
  }

  export type ThreadUpdateManyWithWhereWithoutUserInput = {
    where: ThreadScalarWhereInput
    data: XOR<ThreadUpdateManyMutationInput, ThreadUncheckedUpdateManyWithoutUserInput>
  }

  export type ThreadScalarWhereInput = {
    AND?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
    OR?: ThreadScalarWhereInput[]
    NOT?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
    id?: StringFilter<"Thread"> | string
    name?: StringFilter<"Thread"> | string
    description?: StringNullableFilter<"Thread"> | string | null
    termId?: StringFilter<"Thread"> | string
    meta?: JsonNullableFilter<"Thread">
    lastWorkedAt?: DateTimeNullableFilter<"Thread"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Thread">
    threadRoutine?: JsonNullableFilter<"Thread">
    createdAt?: DateTimeFilter<"Thread"> | Date | string
    updatedAt?: DateTimeFilter<"Thread"> | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    threadId?: StringFilter<"Project"> | string
    meta?: JsonNullableFilter<"Project">
    lastWorkedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Project">
    threadRoutine?: JsonNullableFilter<"Project">
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type GoalUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
  }

  export type GoalUpdateManyWithWhereWithoutUserInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    type?: EnumGoalTypeFilter<"Goal"> | $Enums.GoalType
    projectId?: StringFilter<"Goal"> | string
    meta?: JsonNullableFilter<"Goal">
    lastWorkedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Goal">
    threadRoutine?: JsonNullableFilter<"Goal">
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
  }

  export type ProcessUpsertWithWhereUniqueWithoutUserInput = {
    where: ProcessWhereUniqueInput
    update: XOR<ProcessUpdateWithoutUserInput, ProcessUncheckedUpdateWithoutUserInput>
    create: XOR<ProcessCreateWithoutUserInput, ProcessUncheckedCreateWithoutUserInput>
  }

  export type ProcessUpdateWithWhereUniqueWithoutUserInput = {
    where: ProcessWhereUniqueInput
    data: XOR<ProcessUpdateWithoutUserInput, ProcessUncheckedUpdateWithoutUserInput>
  }

  export type ProcessUpdateManyWithWhereWithoutUserInput = {
    where: ProcessScalarWhereInput
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyWithoutUserInput>
  }

  export type ProcessScalarWhereInput = {
    AND?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
    OR?: ProcessScalarWhereInput[]
    NOT?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
    id?: StringFilter<"Process"> | string
    name?: StringFilter<"Process"> | string
    goalId?: StringFilter<"Process"> | string
    meta?: JsonNullableFilter<"Process">
    lastWorkedAt?: DateTimeNullableFilter<"Process"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Process">
    threadRoutine?: JsonNullableFilter<"Process">
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
  }

  export type ProblemUpsertWithWhereUniqueWithoutUserInput = {
    where: ProblemWhereUniqueInput
    update: XOR<ProblemUpdateWithoutUserInput, ProblemUncheckedUpdateWithoutUserInput>
    create: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput>
  }

  export type ProblemUpdateWithWhereUniqueWithoutUserInput = {
    where: ProblemWhereUniqueInput
    data: XOR<ProblemUpdateWithoutUserInput, ProblemUncheckedUpdateWithoutUserInput>
  }

  export type ProblemUpdateManyWithWhereWithoutUserInput = {
    where: ProblemScalarWhereInput
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyWithoutUserInput>
  }

  export type ProblemScalarWhereInput = {
    AND?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
    OR?: ProblemScalarWhereInput[]
    NOT?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
    id?: StringFilter<"Problem"> | string
    name?: StringFilter<"Problem"> | string
    processId?: StringFilter<"Problem"> | string
    meta?: JsonNullableFilter<"Problem">
    lastWorkedAt?: DateTimeNullableFilter<"Problem"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Problem">
    threadRoutine?: JsonNullableFilter<"Problem">
    createdAt?: DateTimeFilter<"Problem"> | Date | string
    updatedAt?: DateTimeFilter<"Problem"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>
    create: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>
  }

  export type TaskUpdateManyWithWhereWithoutUserInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutUserInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    problemId?: StringFilter<"Task"> | string
    meta?: JsonNullableFilter<"Task">
    lastWorkedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Task">
    threadRoutine?: JsonNullableFilter<"Task">
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: StringFilter<"Activity"> | string
    name?: StringFilter<"Activity"> | string
    taskId?: StringFilter<"Activity"> | string
    meta?: JsonNullableFilter<"Activity">
    lastWorkedAt?: DateTimeNullableFilter<"Activity"> | Date | string | null
    daytimeRoutine?: JsonNullableFilter<"Activity">
    threadRoutine?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
  }

  export type AttemptUpsertWithWhereUniqueWithoutUserInput = {
    where: AttemptWhereUniqueInput
    update: XOR<AttemptUpdateWithoutUserInput, AttemptUncheckedUpdateWithoutUserInput>
    create: XOR<AttemptCreateWithoutUserInput, AttemptUncheckedCreateWithoutUserInput>
  }

  export type AttemptUpdateWithWhereUniqueWithoutUserInput = {
    where: AttemptWhereUniqueInput
    data: XOR<AttemptUpdateWithoutUserInput, AttemptUncheckedUpdateWithoutUserInput>
  }

  export type AttemptUpdateManyWithWhereWithoutUserInput = {
    where: AttemptScalarWhereInput
    data: XOR<AttemptUpdateManyMutationInput, AttemptUncheckedUpdateManyWithoutUserInput>
  }

  export type AttemptScalarWhereInput = {
    AND?: AttemptScalarWhereInput | AttemptScalarWhereInput[]
    OR?: AttemptScalarWhereInput[]
    NOT?: AttemptScalarWhereInput | AttemptScalarWhereInput[]
    id?: StringFilter<"Attempt"> | string
    activityId?: StringFilter<"Attempt"> | string
    result?: StringNullableFilter<"Attempt"> | string | null
    createdAt?: DateTimeFilter<"Attempt"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    activityId?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type ResourceUpsertWithWhereUniqueWithoutUserInput = {
    where: ResourceWhereUniqueInput
    update: XOR<ResourceUpdateWithoutUserInput, ResourceUncheckedUpdateWithoutUserInput>
    create: XOR<ResourceCreateWithoutUserInput, ResourceUncheckedCreateWithoutUserInput>
  }

  export type ResourceUpdateWithWhereUniqueWithoutUserInput = {
    where: ResourceWhereUniqueInput
    data: XOR<ResourceUpdateWithoutUserInput, ResourceUncheckedUpdateWithoutUserInput>
  }

  export type ResourceUpdateManyWithWhereWithoutUserInput = {
    where: ResourceScalarWhereInput
    data: XOR<ResourceUpdateManyMutationInput, ResourceUncheckedUpdateManyWithoutUserInput>
  }

  export type ResourceScalarWhereInput = {
    AND?: ResourceScalarWhereInput | ResourceScalarWhereInput[]
    OR?: ResourceScalarWhereInput[]
    NOT?: ResourceScalarWhereInput | ResourceScalarWhereInput[]
    id?: StringFilter<"Resource"> | string
    activityId?: StringFilter<"Resource"> | string
    url?: StringFilter<"Resource"> | string
    title?: StringNullableFilter<"Resource"> | string | null
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    activityId?: StringFilter<"Review"> | string
    content?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type TeamUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutUserInput, TeamUncheckedUpdateWithoutUserInput>
    create: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutUserInput, TeamUncheckedUpdateWithoutUserInput>
  }

  export type TeamUpdateManyWithWhereWithoutUserInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: StringFilter<"Team"> | string
    projectId?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    details?: JsonNullableFilter<"Team">
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamMemberScalarWhereInput = {
    AND?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    OR?: TeamMemberScalarWhereInput[]
    NOT?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    id?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    userId?: StringFilter<"TeamMember"> | string
    role?: StringNullableFilter<"TeamMember"> | string | null
  }

  export type PathUpsertWithWhereUniqueWithoutUserInput = {
    where: PathWhereUniqueInput
    update: XOR<PathUpdateWithoutUserInput, PathUncheckedUpdateWithoutUserInput>
    create: XOR<PathCreateWithoutUserInput, PathUncheckedCreateWithoutUserInput>
  }

  export type PathUpdateWithWhereUniqueWithoutUserInput = {
    where: PathWhereUniqueInput
    data: XOR<PathUpdateWithoutUserInput, PathUncheckedUpdateWithoutUserInput>
  }

  export type PathUpdateManyWithWhereWithoutUserInput = {
    where: PathScalarWhereInput
    data: XOR<PathUpdateManyMutationInput, PathUncheckedUpdateManyWithoutUserInput>
  }

  export type PathScalarWhereInput = {
    AND?: PathScalarWhereInput | PathScalarWhereInput[]
    OR?: PathScalarWhereInput[]
    NOT?: PathScalarWhereInput | PathScalarWhereInput[]
    id?: StringFilter<"Path"> | string
    termId?: StringFilter<"Path"> | string
    learningGoalId?: StringFilter<"Path"> | string
    steps?: JsonNullableFilter<"Path">
    createdAt?: DateTimeFilter<"Path"> | Date | string
  }

  export type RoutineUpsertWithWhereUniqueWithoutUserInput = {
    where: RoutineWhereUniqueInput
    update: XOR<RoutineUpdateWithoutUserInput, RoutineUncheckedUpdateWithoutUserInput>
    create: XOR<RoutineCreateWithoutUserInput, RoutineUncheckedCreateWithoutUserInput>
  }

  export type RoutineUpdateWithWhereUniqueWithoutUserInput = {
    where: RoutineWhereUniqueInput
    data: XOR<RoutineUpdateWithoutUserInput, RoutineUncheckedUpdateWithoutUserInput>
  }

  export type RoutineUpdateManyWithWhereWithoutUserInput = {
    where: RoutineScalarWhereInput
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyWithoutUserInput>
  }

  export type RoutineScalarWhereInput = {
    AND?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
    OR?: RoutineScalarWhereInput[]
    NOT?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
    id?: StringFilter<"Routine"> | string
    name?: StringFilter<"Routine"> | string
    ownerId?: StringNullableFilter<"Routine"> | string | null
    createdAt?: DateTimeFilter<"Routine"> | Date | string
    updatedAt?: DateTimeFilter<"Routine"> | Date | string
  }

  export type RoutineSlotUpsertWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotWhereUniqueInput
    update: XOR<RoutineSlotUpdateWithoutUserInput, RoutineSlotUncheckedUpdateWithoutUserInput>
    create: XOR<RoutineSlotCreateWithoutUserInput, RoutineSlotUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotUpdateWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotWhereUniqueInput
    data: XOR<RoutineSlotUpdateWithoutUserInput, RoutineSlotUncheckedUpdateWithoutUserInput>
  }

  export type RoutineSlotUpdateManyWithWhereWithoutUserInput = {
    where: RoutineSlotScalarWhereInput
    data: XOR<RoutineSlotUpdateManyMutationInput, RoutineSlotUncheckedUpdateManyWithoutUserInput>
  }

  export type RoutineSlotScalarWhereInput = {
    AND?: RoutineSlotScalarWhereInput | RoutineSlotScalarWhereInput[]
    OR?: RoutineSlotScalarWhereInput[]
    NOT?: RoutineSlotScalarWhereInput | RoutineSlotScalarWhereInput[]
    id?: StringFilter<"RoutineSlot"> | string
    routineId?: StringFilter<"RoutineSlot"> | string
    label?: StringFilter<"RoutineSlot"> | string
    startTime?: StringNullableFilter<"RoutineSlot"> | string | null
    endTime?: StringNullableFilter<"RoutineSlot"> | string | null
    todos?: JsonNullableFilter<"RoutineSlot">
    createdAt?: DateTimeFilter<"RoutineSlot"> | Date | string
    updatedAt?: DateTimeFilter<"RoutineSlot"> | Date | string
  }

  export type RoutineSlotThreadUpsertWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotThreadWhereUniqueInput
    update: XOR<RoutineSlotThreadUpdateWithoutUserInput, RoutineSlotThreadUncheckedUpdateWithoutUserInput>
    create: XOR<RoutineSlotThreadCreateWithoutUserInput, RoutineSlotThreadUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotThreadUpdateWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotThreadWhereUniqueInput
    data: XOR<RoutineSlotThreadUpdateWithoutUserInput, RoutineSlotThreadUncheckedUpdateWithoutUserInput>
  }

  export type RoutineSlotThreadUpdateManyWithWhereWithoutUserInput = {
    where: RoutineSlotThreadScalarWhereInput
    data: XOR<RoutineSlotThreadUpdateManyMutationInput, RoutineSlotThreadUncheckedUpdateManyWithoutUserInput>
  }

  export type RoutineSlotThreadScalarWhereInput = {
    AND?: RoutineSlotThreadScalarWhereInput | RoutineSlotThreadScalarWhereInput[]
    OR?: RoutineSlotThreadScalarWhereInput[]
    NOT?: RoutineSlotThreadScalarWhereInput | RoutineSlotThreadScalarWhereInput[]
    id?: StringFilter<"RoutineSlotThread"> | string
    slotId?: StringFilter<"RoutineSlotThread"> | string
    threadId?: StringFilter<"RoutineSlotThread"> | string
  }

  export type RoutineSlotTaskUpsertWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotTaskWhereUniqueInput
    update: XOR<RoutineSlotTaskUpdateWithoutUserInput, RoutineSlotTaskUncheckedUpdateWithoutUserInput>
    create: XOR<RoutineSlotTaskCreateWithoutUserInput, RoutineSlotTaskUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotTaskUpdateWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotTaskWhereUniqueInput
    data: XOR<RoutineSlotTaskUpdateWithoutUserInput, RoutineSlotTaskUncheckedUpdateWithoutUserInput>
  }

  export type RoutineSlotTaskUpdateManyWithWhereWithoutUserInput = {
    where: RoutineSlotTaskScalarWhereInput
    data: XOR<RoutineSlotTaskUpdateManyMutationInput, RoutineSlotTaskUncheckedUpdateManyWithoutUserInput>
  }

  export type RoutineSlotTaskScalarWhereInput = {
    AND?: RoutineSlotTaskScalarWhereInput | RoutineSlotTaskScalarWhereInput[]
    OR?: RoutineSlotTaskScalarWhereInput[]
    NOT?: RoutineSlotTaskScalarWhereInput | RoutineSlotTaskScalarWhereInput[]
    id?: StringFilter<"RoutineSlotTask"> | string
    slotId?: StringFilter<"RoutineSlotTask"> | string
    taskId?: StringFilter<"RoutineSlotTask"> | string
  }

  export type RoutineSlotActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotActivityWhereUniqueInput
    update: XOR<RoutineSlotActivityUpdateWithoutUserInput, RoutineSlotActivityUncheckedUpdateWithoutUserInput>
    create: XOR<RoutineSlotActivityCreateWithoutUserInput, RoutineSlotActivityUncheckedCreateWithoutUserInput>
  }

  export type RoutineSlotActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: RoutineSlotActivityWhereUniqueInput
    data: XOR<RoutineSlotActivityUpdateWithoutUserInput, RoutineSlotActivityUncheckedUpdateWithoutUserInput>
  }

  export type RoutineSlotActivityUpdateManyWithWhereWithoutUserInput = {
    where: RoutineSlotActivityScalarWhereInput
    data: XOR<RoutineSlotActivityUpdateManyMutationInput, RoutineSlotActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type RoutineSlotActivityScalarWhereInput = {
    AND?: RoutineSlotActivityScalarWhereInput | RoutineSlotActivityScalarWhereInput[]
    OR?: RoutineSlotActivityScalarWhereInput[]
    NOT?: RoutineSlotActivityScalarWhereInput | RoutineSlotActivityScalarWhereInput[]
    id?: StringFilter<"RoutineSlotActivity"> | string
    slotId?: StringFilter<"RoutineSlotActivity"> | string
    activityId?: StringFilter<"RoutineSlotActivity"> | string
  }

  export type UserCreateWithoutTermInput = {
    id?: string
    name: string
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTermInput = {
    id?: string
    name: string
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTermInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTermInput, UserUncheckedCreateWithoutTermInput>
  }

  export type TermCreateWithoutDerivedTermsInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTermInput
    derivedFrom?: TermCreateNestedOneWithoutDerivedTermsInput
    threads?: ThreadCreateNestedManyWithoutTermInput
    paths?: PathCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutDerivedTermsInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    threads?: ThreadUncheckedCreateNestedManyWithoutTermInput
    paths?: PathUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutDerivedTermsInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutDerivedTermsInput, TermUncheckedCreateWithoutDerivedTermsInput>
  }

  export type TermCreateWithoutDerivedFromInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTermInput
    derivedTerms?: TermCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadCreateNestedManyWithoutTermInput
    paths?: PathCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutDerivedFromInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    derivedTerms?: TermUncheckedCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadUncheckedCreateNestedManyWithoutTermInput
    paths?: PathUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutDerivedFromInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutDerivedFromInput, TermUncheckedCreateWithoutDerivedFromInput>
  }

  export type TermCreateManyDerivedFromInputEnvelope = {
    data: TermCreateManyDerivedFromInput | TermCreateManyDerivedFromInput[]
  }

  export type ThreadCreateWithoutTermInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutThreadInput
    projects?: ProjectCreateNestedManyWithoutThreadInput
  }

  export type ThreadUncheckedCreateWithoutTermInput = {
    id?: string
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ThreadCreateOrConnectWithoutTermInput = {
    where: ThreadWhereUniqueInput
    create: XOR<ThreadCreateWithoutTermInput, ThreadUncheckedCreateWithoutTermInput>
  }

  export type ThreadCreateManyTermInputEnvelope = {
    data: ThreadCreateManyTermInput | ThreadCreateManyTermInput[]
  }

  export type PathCreateWithoutTermInput = {
    steps?: InputJsonValue | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutPathInput
    learningGoal: GoalCreateNestedOneWithoutPathsFromTermInput
  }

  export type PathUncheckedCreateWithoutTermInput = {
    id?: string
    learningGoalId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type PathCreateOrConnectWithoutTermInput = {
    where: PathWhereUniqueInput
    create: XOR<PathCreateWithoutTermInput, PathUncheckedCreateWithoutTermInput>
  }

  export type PathCreateManyTermInputEnvelope = {
    data: PathCreateManyTermInput | PathCreateManyTermInput[]
  }

  export type UserUpsertWithoutTermInput = {
    update: XOR<UserUpdateWithoutTermInput, UserUncheckedUpdateWithoutTermInput>
    create: XOR<UserCreateWithoutTermInput, UserUncheckedCreateWithoutTermInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTermInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTermInput, UserUncheckedUpdateWithoutTermInput>
  }

  export type UserUpdateWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TermUpsertWithoutDerivedTermsInput = {
    update: XOR<TermUpdateWithoutDerivedTermsInput, TermUncheckedUpdateWithoutDerivedTermsInput>
    create: XOR<TermCreateWithoutDerivedTermsInput, TermUncheckedCreateWithoutDerivedTermsInput>
    where?: TermWhereInput
  }

  export type TermUpdateToOneWithWhereWithoutDerivedTermsInput = {
    where?: TermWhereInput
    data: XOR<TermUpdateWithoutDerivedTermsInput, TermUncheckedUpdateWithoutDerivedTermsInput>
  }

  export type TermUpdateWithoutDerivedTermsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTermNestedInput
    derivedFrom?: TermUpdateOneWithoutDerivedTermsNestedInput
    threads?: ThreadUpdateManyWithoutTermNestedInput
    paths?: PathUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutDerivedTermsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    threads?: ThreadUncheckedUpdateManyWithoutTermNestedInput
    paths?: PathUncheckedUpdateManyWithoutTermNestedInput
  }

  export type TermUpsertWithWhereUniqueWithoutDerivedFromInput = {
    where: TermWhereUniqueInput
    update: XOR<TermUpdateWithoutDerivedFromInput, TermUncheckedUpdateWithoutDerivedFromInput>
    create: XOR<TermCreateWithoutDerivedFromInput, TermUncheckedCreateWithoutDerivedFromInput>
  }

  export type TermUpdateWithWhereUniqueWithoutDerivedFromInput = {
    where: TermWhereUniqueInput
    data: XOR<TermUpdateWithoutDerivedFromInput, TermUncheckedUpdateWithoutDerivedFromInput>
  }

  export type TermUpdateManyWithWhereWithoutDerivedFromInput = {
    where: TermScalarWhereInput
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyWithoutDerivedFromInput>
  }

  export type ThreadUpsertWithWhereUniqueWithoutTermInput = {
    where: ThreadWhereUniqueInput
    update: XOR<ThreadUpdateWithoutTermInput, ThreadUncheckedUpdateWithoutTermInput>
    create: XOR<ThreadCreateWithoutTermInput, ThreadUncheckedCreateWithoutTermInput>
  }

  export type ThreadUpdateWithWhereUniqueWithoutTermInput = {
    where: ThreadWhereUniqueInput
    data: XOR<ThreadUpdateWithoutTermInput, ThreadUncheckedUpdateWithoutTermInput>
  }

  export type ThreadUpdateManyWithWhereWithoutTermInput = {
    where: ThreadScalarWhereInput
    data: XOR<ThreadUpdateManyMutationInput, ThreadUncheckedUpdateManyWithoutTermInput>
  }

  export type PathUpsertWithWhereUniqueWithoutTermInput = {
    where: PathWhereUniqueInput
    update: XOR<PathUpdateWithoutTermInput, PathUncheckedUpdateWithoutTermInput>
    create: XOR<PathCreateWithoutTermInput, PathUncheckedCreateWithoutTermInput>
  }

  export type PathUpdateWithWhereUniqueWithoutTermInput = {
    where: PathWhereUniqueInput
    data: XOR<PathUpdateWithoutTermInput, PathUncheckedUpdateWithoutTermInput>
  }

  export type PathUpdateManyWithWhereWithoutTermInput = {
    where: PathScalarWhereInput
    data: XOR<PathUpdateManyMutationInput, PathUncheckedUpdateManyWithoutTermInput>
  }

  export type UserCreateWithoutThreadInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutThreadInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutThreadInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
  }

  export type TermCreateWithoutThreadsInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTermInput
    derivedFrom?: TermCreateNestedOneWithoutDerivedTermsInput
    derivedTerms?: TermCreateNestedManyWithoutDerivedFromInput
    paths?: PathCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutThreadsInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    derivedTerms?: TermUncheckedCreateNestedManyWithoutDerivedFromInput
    paths?: PathUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutThreadsInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutThreadsInput, TermUncheckedCreateWithoutThreadsInput>
  }

  export type ProjectCreateWithoutThreadInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProjectInput
    goals?: GoalCreateNestedManyWithoutProjectInput
    teams?: TeamCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutThreadInput = {
    id?: string
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutProjectInput
    teams?: TeamUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutThreadInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutThreadInput, ProjectUncheckedCreateWithoutThreadInput>
  }

  export type ProjectCreateManyThreadInputEnvelope = {
    data: ProjectCreateManyThreadInput | ProjectCreateManyThreadInput[]
  }

  export type UserUpsertWithoutThreadInput = {
    update: XOR<UserUpdateWithoutThreadInput, UserUncheckedUpdateWithoutThreadInput>
    create: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutThreadInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutThreadInput, UserUncheckedUpdateWithoutThreadInput>
  }

  export type UserUpdateWithoutThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TermUpsertWithoutThreadsInput = {
    update: XOR<TermUpdateWithoutThreadsInput, TermUncheckedUpdateWithoutThreadsInput>
    create: XOR<TermCreateWithoutThreadsInput, TermUncheckedCreateWithoutThreadsInput>
    where?: TermWhereInput
  }

  export type TermUpdateToOneWithWhereWithoutThreadsInput = {
    where?: TermWhereInput
    data: XOR<TermUpdateWithoutThreadsInput, TermUncheckedUpdateWithoutThreadsInput>
  }

  export type TermUpdateWithoutThreadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTermNestedInput
    derivedFrom?: TermUpdateOneWithoutDerivedTermsNestedInput
    derivedTerms?: TermUpdateManyWithoutDerivedFromNestedInput
    paths?: PathUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutThreadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    derivedTerms?: TermUncheckedUpdateManyWithoutDerivedFromNestedInput
    paths?: PathUncheckedUpdateManyWithoutTermNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutThreadInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutThreadInput, ProjectUncheckedUpdateWithoutThreadInput>
    create: XOR<ProjectCreateWithoutThreadInput, ProjectUncheckedCreateWithoutThreadInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutThreadInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutThreadInput, ProjectUncheckedUpdateWithoutThreadInput>
  }

  export type ProjectUpdateManyWithWhereWithoutThreadInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutThreadInput>
  }

  export type UserCreateWithoutProjectInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
  }

  export type ThreadCreateWithoutProjectsInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutThreadInput
    term: TermCreateNestedOneWithoutThreadsInput
  }

  export type ThreadUncheckedCreateWithoutProjectsInput = {
    id?: string
    name: string
    description?: string | null
    termId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreadCreateOrConnectWithoutProjectsInput = {
    where: ThreadWhereUniqueInput
    create: XOR<ThreadCreateWithoutProjectsInput, ThreadUncheckedCreateWithoutProjectsInput>
  }

  export type GoalCreateWithoutProjectInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutGoalInput
    processes?: ProcessCreateNestedManyWithoutGoalInput
    pathsFromTerm?: PathCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processes?: ProcessUncheckedCreateNestedManyWithoutGoalInput
    pathsFromTerm?: PathUncheckedCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalCreateOrConnectWithoutProjectInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutProjectInput, GoalUncheckedCreateWithoutProjectInput>
  }

  export type GoalCreateManyProjectInputEnvelope = {
    data: GoalCreateManyProjectInput | GoalCreateManyProjectInput[]
  }

  export type TeamCreateWithoutProjectInput = {
    name: string
    details?: InputJsonValue | null
    user?: UserCreateNestedOneWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    details?: InputJsonValue | null
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutProjectInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput>
  }

  export type TeamCreateManyProjectInputEnvelope = {
    data: TeamCreateManyProjectInput | TeamCreateManyProjectInput[]
  }

  export type UserUpsertWithoutProjectInput = {
    update: XOR<UserUpdateWithoutProjectInput, UserUncheckedUpdateWithoutProjectInput>
    create: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectInput, UserUncheckedUpdateWithoutProjectInput>
  }

  export type UserUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ThreadUpsertWithoutProjectsInput = {
    update: XOR<ThreadUpdateWithoutProjectsInput, ThreadUncheckedUpdateWithoutProjectsInput>
    create: XOR<ThreadCreateWithoutProjectsInput, ThreadUncheckedCreateWithoutProjectsInput>
    where?: ThreadWhereInput
  }

  export type ThreadUpdateToOneWithWhereWithoutProjectsInput = {
    where?: ThreadWhereInput
    data: XOR<ThreadUpdateWithoutProjectsInput, ThreadUncheckedUpdateWithoutProjectsInput>
  }

  export type ThreadUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutThreadNestedInput
    term?: TermUpdateOneRequiredWithoutThreadsNestedInput
  }

  export type ThreadUncheckedUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    termId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpsertWithWhereUniqueWithoutProjectInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutProjectInput, GoalUncheckedUpdateWithoutProjectInput>
    create: XOR<GoalCreateWithoutProjectInput, GoalUncheckedCreateWithoutProjectInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutProjectInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutProjectInput, GoalUncheckedUpdateWithoutProjectInput>
  }

  export type GoalUpdateManyWithWhereWithoutProjectInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutProjectInput>
  }

  export type TeamUpsertWithWhereUniqueWithoutProjectInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutProjectInput, TeamUncheckedUpdateWithoutProjectInput>
    create: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutProjectInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutProjectInput, TeamUncheckedUpdateWithoutProjectInput>
  }

  export type TeamUpdateManyWithWhereWithoutProjectInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserCreateWithoutGoalInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalInput, UserUncheckedCreateWithoutGoalInput>
  }

  export type ProjectCreateWithoutGoalsInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProjectInput
    thread: ThreadCreateNestedOneWithoutProjectsInput
    teams?: TeamCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    description?: string | null
    threadId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutGoalsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutGoalsInput, ProjectUncheckedCreateWithoutGoalsInput>
  }

  export type ProcessCreateWithoutGoalInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProcessInput
    problems?: ProblemCreateNestedManyWithoutProcessInput
  }

  export type ProcessUncheckedCreateWithoutGoalInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemUncheckedCreateNestedManyWithoutProcessInput
  }

  export type ProcessCreateOrConnectWithoutGoalInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutGoalInput, ProcessUncheckedCreateWithoutGoalInput>
  }

  export type ProcessCreateManyGoalInputEnvelope = {
    data: ProcessCreateManyGoalInput | ProcessCreateManyGoalInput[]
  }

  export type PathCreateWithoutLearningGoalInput = {
    steps?: InputJsonValue | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutPathInput
    term: TermCreateNestedOneWithoutPathsInput
  }

  export type PathUncheckedCreateWithoutLearningGoalInput = {
    id?: string
    termId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type PathCreateOrConnectWithoutLearningGoalInput = {
    where: PathWhereUniqueInput
    create: XOR<PathCreateWithoutLearningGoalInput, PathUncheckedCreateWithoutLearningGoalInput>
  }

  export type PathCreateManyLearningGoalInputEnvelope = {
    data: PathCreateManyLearningGoalInput | PathCreateManyLearningGoalInput[]
  }

  export type UserUpsertWithoutGoalInput = {
    update: XOR<UserUpdateWithoutGoalInput, UserUncheckedUpdateWithoutGoalInput>
    create: XOR<UserCreateWithoutGoalInput, UserUncheckedCreateWithoutGoalInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalInput, UserUncheckedUpdateWithoutGoalInput>
  }

  export type UserUpdateWithoutGoalInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutGoalsInput = {
    update: XOR<ProjectUpdateWithoutGoalsInput, ProjectUncheckedUpdateWithoutGoalsInput>
    create: XOR<ProjectCreateWithoutGoalsInput, ProjectUncheckedCreateWithoutGoalsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutGoalsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutGoalsInput, ProjectUncheckedUpdateWithoutGoalsInput>
  }

  export type ProjectUpdateWithoutGoalsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProjectNestedInput
    thread?: ThreadUpdateOneRequiredWithoutProjectsNestedInput
    teams?: TeamUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutGoalsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProcessUpsertWithWhereUniqueWithoutGoalInput = {
    where: ProcessWhereUniqueInput
    update: XOR<ProcessUpdateWithoutGoalInput, ProcessUncheckedUpdateWithoutGoalInput>
    create: XOR<ProcessCreateWithoutGoalInput, ProcessUncheckedCreateWithoutGoalInput>
  }

  export type ProcessUpdateWithWhereUniqueWithoutGoalInput = {
    where: ProcessWhereUniqueInput
    data: XOR<ProcessUpdateWithoutGoalInput, ProcessUncheckedUpdateWithoutGoalInput>
  }

  export type ProcessUpdateManyWithWhereWithoutGoalInput = {
    where: ProcessScalarWhereInput
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyWithoutGoalInput>
  }

  export type PathUpsertWithWhereUniqueWithoutLearningGoalInput = {
    where: PathWhereUniqueInput
    update: XOR<PathUpdateWithoutLearningGoalInput, PathUncheckedUpdateWithoutLearningGoalInput>
    create: XOR<PathCreateWithoutLearningGoalInput, PathUncheckedCreateWithoutLearningGoalInput>
  }

  export type PathUpdateWithWhereUniqueWithoutLearningGoalInput = {
    where: PathWhereUniqueInput
    data: XOR<PathUpdateWithoutLearningGoalInput, PathUncheckedUpdateWithoutLearningGoalInput>
  }

  export type PathUpdateManyWithWhereWithoutLearningGoalInput = {
    where: PathScalarWhereInput
    data: XOR<PathUpdateManyMutationInput, PathUncheckedUpdateManyWithoutLearningGoalInput>
  }

  export type UserCreateWithoutProcessInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProcessInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProcessInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProcessInput, UserUncheckedCreateWithoutProcessInput>
  }

  export type GoalCreateWithoutProcessesInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutGoalInput
    project: ProjectCreateNestedOneWithoutGoalsInput
    pathsFromTerm?: PathCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalUncheckedCreateWithoutProcessesInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.GoalType
    projectId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pathsFromTerm?: PathUncheckedCreateNestedManyWithoutLearningGoalInput
  }

  export type GoalCreateOrConnectWithoutProcessesInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutProcessesInput, GoalUncheckedCreateWithoutProcessesInput>
  }

  export type ProblemCreateWithoutProcessInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProblemInput
    tasks?: TaskCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutProcessInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutProcessInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutProcessInput, ProblemUncheckedCreateWithoutProcessInput>
  }

  export type ProblemCreateManyProcessInputEnvelope = {
    data: ProblemCreateManyProcessInput | ProblemCreateManyProcessInput[]
  }

  export type UserUpsertWithoutProcessInput = {
    update: XOR<UserUpdateWithoutProcessInput, UserUncheckedUpdateWithoutProcessInput>
    create: XOR<UserCreateWithoutProcessInput, UserUncheckedCreateWithoutProcessInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProcessInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProcessInput, UserUncheckedUpdateWithoutProcessInput>
  }

  export type UserUpdateWithoutProcessInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProcessInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalUpsertWithoutProcessesInput = {
    update: XOR<GoalUpdateWithoutProcessesInput, GoalUncheckedUpdateWithoutProcessesInput>
    create: XOR<GoalCreateWithoutProcessesInput, GoalUncheckedCreateWithoutProcessesInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutProcessesInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutProcessesInput, GoalUncheckedUpdateWithoutProcessesInput>
  }

  export type GoalUpdateWithoutProcessesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGoalNestedInput
    project?: ProjectUpdateOneRequiredWithoutGoalsNestedInput
    pathsFromTerm?: PathUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutProcessesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    projectId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pathsFromTerm?: PathUncheckedUpdateManyWithoutLearningGoalNestedInput
  }

  export type ProblemUpsertWithWhereUniqueWithoutProcessInput = {
    where: ProblemWhereUniqueInput
    update: XOR<ProblemUpdateWithoutProcessInput, ProblemUncheckedUpdateWithoutProcessInput>
    create: XOR<ProblemCreateWithoutProcessInput, ProblemUncheckedCreateWithoutProcessInput>
  }

  export type ProblemUpdateWithWhereUniqueWithoutProcessInput = {
    where: ProblemWhereUniqueInput
    data: XOR<ProblemUpdateWithoutProcessInput, ProblemUncheckedUpdateWithoutProcessInput>
  }

  export type ProblemUpdateManyWithWhereWithoutProcessInput = {
    where: ProblemScalarWhereInput
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyWithoutProcessInput>
  }

  export type UserCreateWithoutProblemInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProblemInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProblemInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProblemInput, UserUncheckedCreateWithoutProblemInput>
  }

  export type ProcessCreateWithoutProblemsInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProcessInput
    goal: GoalCreateNestedOneWithoutProcessesInput
  }

  export type ProcessUncheckedCreateWithoutProblemsInput = {
    id?: string
    name: string
    goalId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcessCreateOrConnectWithoutProblemsInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutProblemsInput, ProcessUncheckedCreateWithoutProblemsInput>
  }

  export type TaskCreateWithoutProblemInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTaskInput
    activities?: ActivityCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutProblemInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutProblemInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProblemInput, TaskUncheckedCreateWithoutProblemInput>
  }

  export type TaskCreateManyProblemInputEnvelope = {
    data: TaskCreateManyProblemInput | TaskCreateManyProblemInput[]
  }

  export type UserUpsertWithoutProblemInput = {
    update: XOR<UserUpdateWithoutProblemInput, UserUncheckedUpdateWithoutProblemInput>
    create: XOR<UserCreateWithoutProblemInput, UserUncheckedCreateWithoutProblemInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProblemInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProblemInput, UserUncheckedUpdateWithoutProblemInput>
  }

  export type UserUpdateWithoutProblemInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProblemInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProcessUpsertWithoutProblemsInput = {
    update: XOR<ProcessUpdateWithoutProblemsInput, ProcessUncheckedUpdateWithoutProblemsInput>
    create: XOR<ProcessCreateWithoutProblemsInput, ProcessUncheckedCreateWithoutProblemsInput>
    where?: ProcessWhereInput
  }

  export type ProcessUpdateToOneWithWhereWithoutProblemsInput = {
    where?: ProcessWhereInput
    data: XOR<ProcessUpdateWithoutProblemsInput, ProcessUncheckedUpdateWithoutProblemsInput>
  }

  export type ProcessUpdateWithoutProblemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProcessNestedInput
    goal?: GoalUpdateOneRequiredWithoutProcessesNestedInput
  }

  export type ProcessUncheckedUpdateWithoutProblemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutProblemInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProblemInput, TaskUncheckedUpdateWithoutProblemInput>
    create: XOR<TaskCreateWithoutProblemInput, TaskUncheckedCreateWithoutProblemInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProblemInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProblemInput, TaskUncheckedUpdateWithoutProblemInput>
  }

  export type TaskUpdateManyWithWhereWithoutProblemInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProblemInput>
  }

  export type UserCreateWithoutTaskInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTaskInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTaskInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTaskInput, UserUncheckedCreateWithoutTaskInput>
  }

  export type ProblemCreateWithoutTasksInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProblemInput
    process: ProcessCreateNestedOneWithoutProblemsInput
  }

  export type ProblemUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    processId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemCreateOrConnectWithoutTasksInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutTasksInput, ProblemUncheckedCreateWithoutTasksInput>
  }

  export type ActivityCreateWithoutTaskInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityInput
    attempts?: AttemptCreateNestedManyWithoutActivityInput
    comments?: CommentCreateNestedManyWithoutActivityInput
    resources?: ResourceCreateNestedManyWithoutActivityInput
    reviews?: ReviewCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutTaskInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptUncheckedCreateNestedManyWithoutActivityInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityInput
    resources?: ResourceUncheckedCreateNestedManyWithoutActivityInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutTaskInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutTaskInput, ActivityUncheckedCreateWithoutTaskInput>
  }

  export type ActivityCreateManyTaskInputEnvelope = {
    data: ActivityCreateManyTaskInput | ActivityCreateManyTaskInput[]
  }

  export type UserUpsertWithoutTaskInput = {
    update: XOR<UserUpdateWithoutTaskInput, UserUncheckedUpdateWithoutTaskInput>
    create: XOR<UserCreateWithoutTaskInput, UserUncheckedCreateWithoutTaskInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTaskInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTaskInput, UserUncheckedUpdateWithoutTaskInput>
  }

  export type UserUpdateWithoutTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProblemUpsertWithoutTasksInput = {
    update: XOR<ProblemUpdateWithoutTasksInput, ProblemUncheckedUpdateWithoutTasksInput>
    create: XOR<ProblemCreateWithoutTasksInput, ProblemUncheckedCreateWithoutTasksInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutTasksInput, ProblemUncheckedUpdateWithoutTasksInput>
  }

  export type ProblemUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProblemNestedInput
    process?: ProcessUpdateOneRequiredWithoutProblemsNestedInput
  }

  export type ProblemUncheckedUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    processId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUpsertWithWhereUniqueWithoutTaskInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutTaskInput, ActivityUncheckedUpdateWithoutTaskInput>
    create: XOR<ActivityCreateWithoutTaskInput, ActivityUncheckedCreateWithoutTaskInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutTaskInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutTaskInput, ActivityUncheckedUpdateWithoutTaskInput>
  }

  export type ActivityUpdateManyWithWhereWithoutTaskInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserCreateWithoutActivityInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivityInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityInput, UserUncheckedCreateWithoutActivityInput>
  }

  export type TaskCreateWithoutActivitiesInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTaskInput
    problem: ProblemCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    problemId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutActivitiesInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutActivitiesInput, TaskUncheckedCreateWithoutActivitiesInput>
  }

  export type AttemptCreateWithoutActivityInput = {
    result?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAttemptInput
  }

  export type AttemptUncheckedCreateWithoutActivityInput = {
    id?: string
    result?: string | null
    createdAt?: Date | string
  }

  export type AttemptCreateOrConnectWithoutActivityInput = {
    where: AttemptWhereUniqueInput
    create: XOR<AttemptCreateWithoutActivityInput, AttemptUncheckedCreateWithoutActivityInput>
  }

  export type AttemptCreateManyActivityInputEnvelope = {
    data: AttemptCreateManyActivityInput | AttemptCreateManyActivityInput[]
  }

  export type CommentCreateWithoutActivityInput = {
    content: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutActivityInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutActivityInput, CommentUncheckedCreateWithoutActivityInput>
  }

  export type CommentCreateManyActivityInputEnvelope = {
    data: CommentCreateManyActivityInput | CommentCreateManyActivityInput[]
  }

  export type ResourceCreateWithoutActivityInput = {
    url: string
    title?: string | null
    user?: UserCreateNestedOneWithoutResourceInput
  }

  export type ResourceUncheckedCreateWithoutActivityInput = {
    id?: string
    url: string
    title?: string | null
  }

  export type ResourceCreateOrConnectWithoutActivityInput = {
    where: ResourceWhereUniqueInput
    create: XOR<ResourceCreateWithoutActivityInput, ResourceUncheckedCreateWithoutActivityInput>
  }

  export type ResourceCreateManyActivityInputEnvelope = {
    data: ResourceCreateManyActivityInput | ResourceCreateManyActivityInput[]
  }

  export type ReviewCreateWithoutActivityInput = {
    content: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutActivityInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutActivityInput, ReviewUncheckedCreateWithoutActivityInput>
  }

  export type ReviewCreateManyActivityInputEnvelope = {
    data: ReviewCreateManyActivityInput | ReviewCreateManyActivityInput[]
  }

  export type UserUpsertWithoutActivityInput = {
    update: XOR<UserUpdateWithoutActivityInput, UserUncheckedUpdateWithoutActivityInput>
    create: XOR<UserCreateWithoutActivityInput, UserUncheckedCreateWithoutActivityInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityInput, UserUncheckedUpdateWithoutActivityInput>
  }

  export type UserUpdateWithoutActivityInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TaskUpsertWithoutActivitiesInput = {
    update: XOR<TaskUpdateWithoutActivitiesInput, TaskUncheckedUpdateWithoutActivitiesInput>
    create: XOR<TaskCreateWithoutActivitiesInput, TaskUncheckedCreateWithoutActivitiesInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutActivitiesInput, TaskUncheckedUpdateWithoutActivitiesInput>
  }

  export type TaskUpdateWithoutActivitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTaskNestedInput
    problem?: ProblemUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutActivitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptUpsertWithWhereUniqueWithoutActivityInput = {
    where: AttemptWhereUniqueInput
    update: XOR<AttemptUpdateWithoutActivityInput, AttemptUncheckedUpdateWithoutActivityInput>
    create: XOR<AttemptCreateWithoutActivityInput, AttemptUncheckedCreateWithoutActivityInput>
  }

  export type AttemptUpdateWithWhereUniqueWithoutActivityInput = {
    where: AttemptWhereUniqueInput
    data: XOR<AttemptUpdateWithoutActivityInput, AttemptUncheckedUpdateWithoutActivityInput>
  }

  export type AttemptUpdateManyWithWhereWithoutActivityInput = {
    where: AttemptScalarWhereInput
    data: XOR<AttemptUpdateManyMutationInput, AttemptUncheckedUpdateManyWithoutActivityInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutActivityInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutActivityInput, CommentUncheckedUpdateWithoutActivityInput>
    create: XOR<CommentCreateWithoutActivityInput, CommentUncheckedCreateWithoutActivityInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutActivityInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutActivityInput, CommentUncheckedUpdateWithoutActivityInput>
  }

  export type CommentUpdateManyWithWhereWithoutActivityInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutActivityInput>
  }

  export type ResourceUpsertWithWhereUniqueWithoutActivityInput = {
    where: ResourceWhereUniqueInput
    update: XOR<ResourceUpdateWithoutActivityInput, ResourceUncheckedUpdateWithoutActivityInput>
    create: XOR<ResourceCreateWithoutActivityInput, ResourceUncheckedCreateWithoutActivityInput>
  }

  export type ResourceUpdateWithWhereUniqueWithoutActivityInput = {
    where: ResourceWhereUniqueInput
    data: XOR<ResourceUpdateWithoutActivityInput, ResourceUncheckedUpdateWithoutActivityInput>
  }

  export type ResourceUpdateManyWithWhereWithoutActivityInput = {
    where: ResourceScalarWhereInput
    data: XOR<ResourceUpdateManyMutationInput, ResourceUncheckedUpdateManyWithoutActivityInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutActivityInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutActivityInput, ReviewUncheckedUpdateWithoutActivityInput>
    create: XOR<ReviewCreateWithoutActivityInput, ReviewUncheckedCreateWithoutActivityInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutActivityInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutActivityInput, ReviewUncheckedUpdateWithoutActivityInput>
  }

  export type ReviewUpdateManyWithWhereWithoutActivityInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutActivityInput>
  }

  export type UserCreateWithoutAttemptInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttemptInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttemptInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttemptInput, UserUncheckedCreateWithoutAttemptInput>
  }

  export type ActivityCreateWithoutAttemptsInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityInput
    task: TaskCreateNestedOneWithoutActivitiesInput
    comments?: CommentCreateNestedManyWithoutActivityInput
    resources?: ResourceCreateNestedManyWithoutActivityInput
    reviews?: ReviewCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutAttemptsInput = {
    id?: string
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutActivityInput
    resources?: ResourceUncheckedCreateNestedManyWithoutActivityInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutAttemptsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutAttemptsInput, ActivityUncheckedCreateWithoutAttemptsInput>
  }

  export type UserUpsertWithoutAttemptInput = {
    update: XOR<UserUpdateWithoutAttemptInput, UserUncheckedUpdateWithoutAttemptInput>
    create: XOR<UserCreateWithoutAttemptInput, UserUncheckedCreateWithoutAttemptInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttemptInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttemptInput, UserUncheckedUpdateWithoutAttemptInput>
  }

  export type UserUpdateWithoutAttemptInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttemptInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutAttemptsInput = {
    update: XOR<ActivityUpdateWithoutAttemptsInput, ActivityUncheckedUpdateWithoutAttemptsInput>
    create: XOR<ActivityCreateWithoutAttemptsInput, ActivityUncheckedCreateWithoutAttemptsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutAttemptsInput, ActivityUncheckedUpdateWithoutAttemptsInput>
  }

  export type ActivityUpdateWithoutAttemptsInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityNestedInput
    task?: TaskUpdateOneRequiredWithoutActivitiesNestedInput
    comments?: CommentUpdateManyWithoutActivityNestedInput
    resources?: ResourceUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutAttemptsInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutActivityNestedInput
    resources?: ResourceUncheckedUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutCommentInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type ActivityCreateWithoutCommentsInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityInput
    task: TaskCreateNestedOneWithoutActivitiesInput
    attempts?: AttemptCreateNestedManyWithoutActivityInput
    resources?: ResourceCreateNestedManyWithoutActivityInput
    reviews?: ReviewCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptUncheckedCreateNestedManyWithoutActivityInput
    resources?: ResourceUncheckedCreateNestedManyWithoutActivityInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutCommentsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutCommentsInput = {
    update: XOR<ActivityUpdateWithoutCommentsInput, ActivityUncheckedUpdateWithoutCommentsInput>
    create: XOR<ActivityCreateWithoutCommentsInput, ActivityUncheckedCreateWithoutCommentsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutCommentsInput, ActivityUncheckedUpdateWithoutCommentsInput>
  }

  export type ActivityUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityNestedInput
    task?: TaskUpdateOneRequiredWithoutActivitiesNestedInput
    attempts?: AttemptUpdateManyWithoutActivityNestedInput
    resources?: ResourceUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptUncheckedUpdateManyWithoutActivityNestedInput
    resources?: ResourceUncheckedUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutResourceInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResourceInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResourceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput>
  }

  export type ActivityCreateWithoutResourcesInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityInput
    task: TaskCreateNestedOneWithoutActivitiesInput
    attempts?: AttemptCreateNestedManyWithoutActivityInput
    comments?: CommentCreateNestedManyWithoutActivityInput
    reviews?: ReviewCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutResourcesInput = {
    id?: string
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptUncheckedCreateNestedManyWithoutActivityInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutResourcesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutResourcesInput, ActivityUncheckedCreateWithoutResourcesInput>
  }

  export type UserUpsertWithoutResourceInput = {
    update: XOR<UserUpdateWithoutResourceInput, UserUncheckedUpdateWithoutResourceInput>
    create: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResourceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResourceInput, UserUncheckedUpdateWithoutResourceInput>
  }

  export type UserUpdateWithoutResourceInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResourceInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutResourcesInput = {
    update: XOR<ActivityUpdateWithoutResourcesInput, ActivityUncheckedUpdateWithoutResourcesInput>
    create: XOR<ActivityCreateWithoutResourcesInput, ActivityUncheckedCreateWithoutResourcesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutResourcesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutResourcesInput, ActivityUncheckedUpdateWithoutResourcesInput>
  }

  export type ActivityUpdateWithoutResourcesInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityNestedInput
    task?: TaskUpdateOneRequiredWithoutActivitiesNestedInput
    attempts?: AttemptUpdateManyWithoutActivityNestedInput
    comments?: CommentUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutResourcesInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptUncheckedUpdateManyWithoutActivityNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutReviewInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
  }

  export type ActivityCreateWithoutReviewsInput = {
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityInput
    task: TaskCreateNestedOneWithoutActivitiesInput
    attempts?: AttemptCreateNestedManyWithoutActivityInput
    comments?: CommentCreateNestedManyWithoutActivityInput
    resources?: ResourceCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptUncheckedCreateNestedManyWithoutActivityInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityInput
    resources?: ResourceUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutReviewsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutReviewsInput, ActivityUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewInput = {
    update: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
  }

  export type UserUpdateWithoutReviewInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutReviewsInput = {
    update: XOR<ActivityUpdateWithoutReviewsInput, ActivityUncheckedUpdateWithoutReviewsInput>
    create: XOR<ActivityCreateWithoutReviewsInput, ActivityUncheckedCreateWithoutReviewsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutReviewsInput, ActivityUncheckedUpdateWithoutReviewsInput>
  }

  export type ActivityUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityNestedInput
    task?: TaskUpdateOneRequiredWithoutActivitiesNestedInput
    attempts?: AttemptUpdateManyWithoutActivityNestedInput
    comments?: CommentUpdateManyWithoutActivityNestedInput
    resources?: ResourceUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptUncheckedUpdateManyWithoutActivityNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityNestedInput
    resources?: ResourceUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutTeamInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type ProjectCreateWithoutTeamsInput = {
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProjectInput
    thread: ThreadCreateNestedOneWithoutProjectsInput
    goals?: GoalCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTeamsInput = {
    id?: string
    name: string
    description?: string | null
    threadId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTeamsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTeamsInput, ProjectUncheckedCreateWithoutTeamsInput>
  }

  export type TeamMemberCreateWithoutTeamInput = {
    id?: string
    role?: string | null
    user?: UserCreateNestedOneWithoutTeamMemberInput
  }

  export type TeamMemberUncheckedCreateWithoutTeamInput = {
    id?: string
    userId: string
    role?: string | null
  }

  export type TeamMemberCreateOrConnectWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberCreateManyTeamInputEnvelope = {
    data: TeamMemberCreateManyTeamInput | TeamMemberCreateManyTeamInput[]
  }

  export type UserUpsertWithoutTeamInput = {
    update: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
  }

  export type UserUpdateWithoutTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutTeamsInput = {
    update: XOR<ProjectUpdateWithoutTeamsInput, ProjectUncheckedUpdateWithoutTeamsInput>
    create: XOR<ProjectCreateWithoutTeamsInput, ProjectUncheckedCreateWithoutTeamsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTeamsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTeamsInput, ProjectUncheckedUpdateWithoutTeamsInput>
  }

  export type ProjectUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProjectNestedInput
    thread?: ThreadUpdateOneRequiredWithoutProjectsNestedInput
    goals?: GoalUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutTeamInput>
  }

  export type UserCreateWithoutTeamMemberInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMemberInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
  }

  export type TeamCreateWithoutMembersInput = {
    name: string
    details?: InputJsonValue | null
    user?: UserCreateNestedOneWithoutTeamInput
    project: ProjectCreateNestedOneWithoutTeamsInput
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: string
    projectId: string
    name: string
    details?: InputJsonValue | null
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutTeamMemberInput = {
    update: XOR<UserUpdateWithoutTeamMemberInput, UserUncheckedUpdateWithoutTeamMemberInput>
    create: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMemberInput, UserUncheckedUpdateWithoutTeamMemberInput>
  }

  export type UserUpdateWithoutTeamMemberInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMemberInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamUpsertWithoutMembersInput = {
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type TeamUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    user?: UserUpdateOneWithoutTeamNestedInput
    project?: ProjectUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
  }

  export type UserCreateWithoutPathInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPathInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPathInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPathInput, UserUncheckedCreateWithoutPathInput>
  }

  export type TermCreateWithoutPathsInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTermInput
    derivedFrom?: TermCreateNestedOneWithoutDerivedTermsInput
    derivedTerms?: TermCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutPathsInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    derivedTerms?: TermUncheckedCreateNestedManyWithoutDerivedFromInput
    threads?: ThreadUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutPathsInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutPathsInput, TermUncheckedCreateWithoutPathsInput>
  }

  export type GoalCreateWithoutPathsFromTermInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutGoalInput
    project: ProjectCreateNestedOneWithoutGoalsInput
    processes?: ProcessCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutPathsFromTermInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.GoalType
    projectId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processes?: ProcessUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutPathsFromTermInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutPathsFromTermInput, GoalUncheckedCreateWithoutPathsFromTermInput>
  }

  export type UserUpsertWithoutPathInput = {
    update: XOR<UserUpdateWithoutPathInput, UserUncheckedUpdateWithoutPathInput>
    create: XOR<UserCreateWithoutPathInput, UserUncheckedCreateWithoutPathInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPathInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPathInput, UserUncheckedUpdateWithoutPathInput>
  }

  export type UserUpdateWithoutPathInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPathInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TermUpsertWithoutPathsInput = {
    update: XOR<TermUpdateWithoutPathsInput, TermUncheckedUpdateWithoutPathsInput>
    create: XOR<TermCreateWithoutPathsInput, TermUncheckedCreateWithoutPathsInput>
    where?: TermWhereInput
  }

  export type TermUpdateToOneWithWhereWithoutPathsInput = {
    where?: TermWhereInput
    data: XOR<TermUpdateWithoutPathsInput, TermUncheckedUpdateWithoutPathsInput>
  }

  export type TermUpdateWithoutPathsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTermNestedInput
    derivedFrom?: TermUpdateOneWithoutDerivedTermsNestedInput
    derivedTerms?: TermUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutPathsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    derivedTerms?: TermUncheckedUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUncheckedUpdateManyWithoutTermNestedInput
  }

  export type GoalUpsertWithoutPathsFromTermInput = {
    update: XOR<GoalUpdateWithoutPathsFromTermInput, GoalUncheckedUpdateWithoutPathsFromTermInput>
    create: XOR<GoalCreateWithoutPathsFromTermInput, GoalUncheckedCreateWithoutPathsFromTermInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutPathsFromTermInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutPathsFromTermInput, GoalUncheckedUpdateWithoutPathsFromTermInput>
  }

  export type GoalUpdateWithoutPathsFromTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGoalNestedInput
    project?: ProjectUpdateOneRequiredWithoutGoalsNestedInput
    processes?: ProcessUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutPathsFromTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    projectId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processes?: ProcessUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type UserCreateWithoutRoutineInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoutineInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoutineInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoutineInput, UserUncheckedCreateWithoutRoutineInput>
  }

  export type RoutineSlotCreateWithoutRoutineInput = {
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineSlotInput
    slotThreads?: RoutineSlotThreadCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUncheckedCreateWithoutRoutineInput = {
    id?: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slotThreads?: RoutineSlotThreadUncheckedCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskUncheckedCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityUncheckedCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotCreateOrConnectWithoutRoutineInput = {
    where: RoutineSlotWhereUniqueInput
    create: XOR<RoutineSlotCreateWithoutRoutineInput, RoutineSlotUncheckedCreateWithoutRoutineInput>
  }

  export type RoutineSlotCreateManyRoutineInputEnvelope = {
    data: RoutineSlotCreateManyRoutineInput | RoutineSlotCreateManyRoutineInput[]
  }

  export type UserUpsertWithoutRoutineInput = {
    update: XOR<UserUpdateWithoutRoutineInput, UserUncheckedUpdateWithoutRoutineInput>
    create: XOR<UserCreateWithoutRoutineInput, UserUncheckedCreateWithoutRoutineInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoutineInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoutineInput, UserUncheckedUpdateWithoutRoutineInput>
  }

  export type UserUpdateWithoutRoutineInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoutineInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoutineSlotUpsertWithWhereUniqueWithoutRoutineInput = {
    where: RoutineSlotWhereUniqueInput
    update: XOR<RoutineSlotUpdateWithoutRoutineInput, RoutineSlotUncheckedUpdateWithoutRoutineInput>
    create: XOR<RoutineSlotCreateWithoutRoutineInput, RoutineSlotUncheckedCreateWithoutRoutineInput>
  }

  export type RoutineSlotUpdateWithWhereUniqueWithoutRoutineInput = {
    where: RoutineSlotWhereUniqueInput
    data: XOR<RoutineSlotUpdateWithoutRoutineInput, RoutineSlotUncheckedUpdateWithoutRoutineInput>
  }

  export type RoutineSlotUpdateManyWithWhereWithoutRoutineInput = {
    where: RoutineSlotScalarWhereInput
    data: XOR<RoutineSlotUpdateManyMutationInput, RoutineSlotUncheckedUpdateManyWithoutRoutineInput>
  }

  export type UserCreateWithoutRoutineSlotInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoutineSlotInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoutineSlotInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoutineSlotInput, UserUncheckedCreateWithoutRoutineSlotInput>
  }

  export type RoutineCreateWithoutSlotsInput = {
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineInput
  }

  export type RoutineUncheckedCreateWithoutSlotsInput = {
    id?: string
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoutineCreateOrConnectWithoutSlotsInput = {
    where: RoutineWhereUniqueInput
    create: XOR<RoutineCreateWithoutSlotsInput, RoutineUncheckedCreateWithoutSlotsInput>
  }

  export type RoutineSlotThreadCreateWithoutSlotInput = {
    threadId: string
    user?: UserCreateNestedOneWithoutRoutineSlotThreadInput
  }

  export type RoutineSlotThreadUncheckedCreateWithoutSlotInput = {
    id?: string
    threadId: string
  }

  export type RoutineSlotThreadCreateOrConnectWithoutSlotInput = {
    where: RoutineSlotThreadWhereUniqueInput
    create: XOR<RoutineSlotThreadCreateWithoutSlotInput, RoutineSlotThreadUncheckedCreateWithoutSlotInput>
  }

  export type RoutineSlotThreadCreateManySlotInputEnvelope = {
    data: RoutineSlotThreadCreateManySlotInput | RoutineSlotThreadCreateManySlotInput[]
  }

  export type RoutineSlotTaskCreateWithoutSlotInput = {
    taskId: string
    user?: UserCreateNestedOneWithoutRoutineSlotTaskInput
  }

  export type RoutineSlotTaskUncheckedCreateWithoutSlotInput = {
    id?: string
    taskId: string
  }

  export type RoutineSlotTaskCreateOrConnectWithoutSlotInput = {
    where: RoutineSlotTaskWhereUniqueInput
    create: XOR<RoutineSlotTaskCreateWithoutSlotInput, RoutineSlotTaskUncheckedCreateWithoutSlotInput>
  }

  export type RoutineSlotTaskCreateManySlotInputEnvelope = {
    data: RoutineSlotTaskCreateManySlotInput | RoutineSlotTaskCreateManySlotInput[]
  }

  export type RoutineSlotActivityCreateWithoutSlotInput = {
    activityId: string
    user?: UserCreateNestedOneWithoutRoutineSlotActivityInput
  }

  export type RoutineSlotActivityUncheckedCreateWithoutSlotInput = {
    id?: string
    activityId: string
  }

  export type RoutineSlotActivityCreateOrConnectWithoutSlotInput = {
    where: RoutineSlotActivityWhereUniqueInput
    create: XOR<RoutineSlotActivityCreateWithoutSlotInput, RoutineSlotActivityUncheckedCreateWithoutSlotInput>
  }

  export type RoutineSlotActivityCreateManySlotInputEnvelope = {
    data: RoutineSlotActivityCreateManySlotInput | RoutineSlotActivityCreateManySlotInput[]
  }

  export type UserUpsertWithoutRoutineSlotInput = {
    update: XOR<UserUpdateWithoutRoutineSlotInput, UserUncheckedUpdateWithoutRoutineSlotInput>
    create: XOR<UserCreateWithoutRoutineSlotInput, UserUncheckedCreateWithoutRoutineSlotInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoutineSlotInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoutineSlotInput, UserUncheckedUpdateWithoutRoutineSlotInput>
  }

  export type UserUpdateWithoutRoutineSlotInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoutineSlotInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoutineUpsertWithoutSlotsInput = {
    update: XOR<RoutineUpdateWithoutSlotsInput, RoutineUncheckedUpdateWithoutSlotsInput>
    create: XOR<RoutineCreateWithoutSlotsInput, RoutineUncheckedCreateWithoutSlotsInput>
    where?: RoutineWhereInput
  }

  export type RoutineUpdateToOneWithWhereWithoutSlotsInput = {
    where?: RoutineWhereInput
    data: XOR<RoutineUpdateWithoutSlotsInput, RoutineUncheckedUpdateWithoutSlotsInput>
  }

  export type RoutineUpdateWithoutSlotsInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineNestedInput
  }

  export type RoutineUncheckedUpdateWithoutSlotsInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotThreadUpsertWithWhereUniqueWithoutSlotInput = {
    where: RoutineSlotThreadWhereUniqueInput
    update: XOR<RoutineSlotThreadUpdateWithoutSlotInput, RoutineSlotThreadUncheckedUpdateWithoutSlotInput>
    create: XOR<RoutineSlotThreadCreateWithoutSlotInput, RoutineSlotThreadUncheckedCreateWithoutSlotInput>
  }

  export type RoutineSlotThreadUpdateWithWhereUniqueWithoutSlotInput = {
    where: RoutineSlotThreadWhereUniqueInput
    data: XOR<RoutineSlotThreadUpdateWithoutSlotInput, RoutineSlotThreadUncheckedUpdateWithoutSlotInput>
  }

  export type RoutineSlotThreadUpdateManyWithWhereWithoutSlotInput = {
    where: RoutineSlotThreadScalarWhereInput
    data: XOR<RoutineSlotThreadUpdateManyMutationInput, RoutineSlotThreadUncheckedUpdateManyWithoutSlotInput>
  }

  export type RoutineSlotTaskUpsertWithWhereUniqueWithoutSlotInput = {
    where: RoutineSlotTaskWhereUniqueInput
    update: XOR<RoutineSlotTaskUpdateWithoutSlotInput, RoutineSlotTaskUncheckedUpdateWithoutSlotInput>
    create: XOR<RoutineSlotTaskCreateWithoutSlotInput, RoutineSlotTaskUncheckedCreateWithoutSlotInput>
  }

  export type RoutineSlotTaskUpdateWithWhereUniqueWithoutSlotInput = {
    where: RoutineSlotTaskWhereUniqueInput
    data: XOR<RoutineSlotTaskUpdateWithoutSlotInput, RoutineSlotTaskUncheckedUpdateWithoutSlotInput>
  }

  export type RoutineSlotTaskUpdateManyWithWhereWithoutSlotInput = {
    where: RoutineSlotTaskScalarWhereInput
    data: XOR<RoutineSlotTaskUpdateManyMutationInput, RoutineSlotTaskUncheckedUpdateManyWithoutSlotInput>
  }

  export type RoutineSlotActivityUpsertWithWhereUniqueWithoutSlotInput = {
    where: RoutineSlotActivityWhereUniqueInput
    update: XOR<RoutineSlotActivityUpdateWithoutSlotInput, RoutineSlotActivityUncheckedUpdateWithoutSlotInput>
    create: XOR<RoutineSlotActivityCreateWithoutSlotInput, RoutineSlotActivityUncheckedCreateWithoutSlotInput>
  }

  export type RoutineSlotActivityUpdateWithWhereUniqueWithoutSlotInput = {
    where: RoutineSlotActivityWhereUniqueInput
    data: XOR<RoutineSlotActivityUpdateWithoutSlotInput, RoutineSlotActivityUncheckedUpdateWithoutSlotInput>
  }

  export type RoutineSlotActivityUpdateManyWithWhereWithoutSlotInput = {
    where: RoutineSlotActivityScalarWhereInput
    data: XOR<RoutineSlotActivityUpdateManyMutationInput, RoutineSlotActivityUncheckedUpdateManyWithoutSlotInput>
  }

  export type UserCreateWithoutRoutineSlotThreadInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoutineSlotThreadInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoutineSlotThreadInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoutineSlotThreadInput, UserUncheckedCreateWithoutRoutineSlotThreadInput>
  }

  export type RoutineSlotCreateWithoutSlotThreadsInput = {
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineSlotInput
    routine: RoutineCreateNestedOneWithoutSlotsInput
    slotTasks?: RoutineSlotTaskCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUncheckedCreateWithoutSlotThreadsInput = {
    id?: string
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slotTasks?: RoutineSlotTaskUncheckedCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityUncheckedCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotCreateOrConnectWithoutSlotThreadsInput = {
    where: RoutineSlotWhereUniqueInput
    create: XOR<RoutineSlotCreateWithoutSlotThreadsInput, RoutineSlotUncheckedCreateWithoutSlotThreadsInput>
  }

  export type UserUpsertWithoutRoutineSlotThreadInput = {
    update: XOR<UserUpdateWithoutRoutineSlotThreadInput, UserUncheckedUpdateWithoutRoutineSlotThreadInput>
    create: XOR<UserCreateWithoutRoutineSlotThreadInput, UserUncheckedCreateWithoutRoutineSlotThreadInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoutineSlotThreadInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoutineSlotThreadInput, UserUncheckedUpdateWithoutRoutineSlotThreadInput>
  }

  export type UserUpdateWithoutRoutineSlotThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoutineSlotThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoutineSlotUpsertWithoutSlotThreadsInput = {
    update: XOR<RoutineSlotUpdateWithoutSlotThreadsInput, RoutineSlotUncheckedUpdateWithoutSlotThreadsInput>
    create: XOR<RoutineSlotCreateWithoutSlotThreadsInput, RoutineSlotUncheckedCreateWithoutSlotThreadsInput>
    where?: RoutineSlotWhereInput
  }

  export type RoutineSlotUpdateToOneWithWhereWithoutSlotThreadsInput = {
    where?: RoutineSlotWhereInput
    data: XOR<RoutineSlotUpdateWithoutSlotThreadsInput, RoutineSlotUncheckedUpdateWithoutSlotThreadsInput>
  }

  export type RoutineSlotUpdateWithoutSlotThreadsInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineSlotNestedInput
    routine?: RoutineUpdateOneRequiredWithoutSlotsNestedInput
    slotTasks?: RoutineSlotTaskUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateWithoutSlotThreadsInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slotTasks?: RoutineSlotTaskUncheckedUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type UserCreateWithoutRoutineSlotTaskInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoutineSlotTaskInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoutineSlotTaskInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoutineSlotTaskInput, UserUncheckedCreateWithoutRoutineSlotTaskInput>
  }

  export type RoutineSlotCreateWithoutSlotTasksInput = {
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineSlotInput
    routine: RoutineCreateNestedOneWithoutSlotsInput
    slotThreads?: RoutineSlotThreadCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUncheckedCreateWithoutSlotTasksInput = {
    id?: string
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slotThreads?: RoutineSlotThreadUncheckedCreateNestedManyWithoutSlotInput
    slotActivities?: RoutineSlotActivityUncheckedCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotCreateOrConnectWithoutSlotTasksInput = {
    where: RoutineSlotWhereUniqueInput
    create: XOR<RoutineSlotCreateWithoutSlotTasksInput, RoutineSlotUncheckedCreateWithoutSlotTasksInput>
  }

  export type UserUpsertWithoutRoutineSlotTaskInput = {
    update: XOR<UserUpdateWithoutRoutineSlotTaskInput, UserUncheckedUpdateWithoutRoutineSlotTaskInput>
    create: XOR<UserCreateWithoutRoutineSlotTaskInput, UserUncheckedCreateWithoutRoutineSlotTaskInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoutineSlotTaskInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoutineSlotTaskInput, UserUncheckedUpdateWithoutRoutineSlotTaskInput>
  }

  export type UserUpdateWithoutRoutineSlotTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoutineSlotTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotActivity?: RoutineSlotActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoutineSlotUpsertWithoutSlotTasksInput = {
    update: XOR<RoutineSlotUpdateWithoutSlotTasksInput, RoutineSlotUncheckedUpdateWithoutSlotTasksInput>
    create: XOR<RoutineSlotCreateWithoutSlotTasksInput, RoutineSlotUncheckedCreateWithoutSlotTasksInput>
    where?: RoutineSlotWhereInput
  }

  export type RoutineSlotUpdateToOneWithWhereWithoutSlotTasksInput = {
    where?: RoutineSlotWhereInput
    data: XOR<RoutineSlotUpdateWithoutSlotTasksInput, RoutineSlotUncheckedUpdateWithoutSlotTasksInput>
  }

  export type RoutineSlotUpdateWithoutSlotTasksInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineSlotNestedInput
    routine?: RoutineUpdateOneRequiredWithoutSlotsNestedInput
    slotThreads?: RoutineSlotThreadUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateWithoutSlotTasksInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slotThreads?: RoutineSlotThreadUncheckedUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type UserCreateWithoutRoutineSlotActivityInput = {
    id?: string
    name: string
    Term?: TermCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
    Project?: ProjectCreateNestedManyWithoutUserInput
    Goal?: GoalCreateNestedManyWithoutUserInput
    Process?: ProcessCreateNestedManyWithoutUserInput
    Problem?: ProblemCreateNestedManyWithoutUserInput
    Task?: TaskCreateNestedManyWithoutUserInput
    Activity?: ActivityCreateNestedManyWithoutUserInput
    Attempt?: AttemptCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Resource?: ResourceCreateNestedManyWithoutUserInput
    Review?: ReviewCreateNestedManyWithoutUserInput
    Team?: TeamCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Path?: PathCreateNestedManyWithoutUserInput
    Routine?: RoutineCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoutineSlotActivityInput = {
    id?: string
    name: string
    Term?: TermUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
    Project?: ProjectUncheckedCreateNestedManyWithoutUserInput
    Goal?: GoalUncheckedCreateNestedManyWithoutUserInput
    Process?: ProcessUncheckedCreateNestedManyWithoutUserInput
    Problem?: ProblemUncheckedCreateNestedManyWithoutUserInput
    Task?: TaskUncheckedCreateNestedManyWithoutUserInput
    Activity?: ActivityUncheckedCreateNestedManyWithoutUserInput
    Attempt?: AttemptUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Resource?: ResourceUncheckedCreateNestedManyWithoutUserInput
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Team?: TeamUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Path?: PathUncheckedCreateNestedManyWithoutUserInput
    Routine?: RoutineUncheckedCreateNestedManyWithoutUserInput
    RoutineSlot?: RoutineSlotUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedCreateNestedManyWithoutUserInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoutineSlotActivityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoutineSlotActivityInput, UserUncheckedCreateWithoutRoutineSlotActivityInput>
  }

  export type RoutineSlotCreateWithoutSlotActivitiesInput = {
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutRoutineSlotInput
    routine: RoutineCreateNestedOneWithoutSlotsInput
    slotThreads?: RoutineSlotThreadCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotUncheckedCreateWithoutSlotActivitiesInput = {
    id?: string
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    slotThreads?: RoutineSlotThreadUncheckedCreateNestedManyWithoutSlotInput
    slotTasks?: RoutineSlotTaskUncheckedCreateNestedManyWithoutSlotInput
  }

  export type RoutineSlotCreateOrConnectWithoutSlotActivitiesInput = {
    where: RoutineSlotWhereUniqueInput
    create: XOR<RoutineSlotCreateWithoutSlotActivitiesInput, RoutineSlotUncheckedCreateWithoutSlotActivitiesInput>
  }

  export type UserUpsertWithoutRoutineSlotActivityInput = {
    update: XOR<UserUpdateWithoutRoutineSlotActivityInput, UserUncheckedUpdateWithoutRoutineSlotActivityInput>
    create: XOR<UserCreateWithoutRoutineSlotActivityInput, UserUncheckedCreateWithoutRoutineSlotActivityInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoutineSlotActivityInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoutineSlotActivityInput, UserUncheckedUpdateWithoutRoutineSlotActivityInput>
  }

  export type UserUpdateWithoutRoutineSlotActivityInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
    Project?: ProjectUpdateManyWithoutUserNestedInput
    Goal?: GoalUpdateManyWithoutUserNestedInput
    Process?: ProcessUpdateManyWithoutUserNestedInput
    Problem?: ProblemUpdateManyWithoutUserNestedInput
    Task?: TaskUpdateManyWithoutUserNestedInput
    Activity?: ActivityUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Resource?: ResourceUpdateManyWithoutUserNestedInput
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Team?: TeamUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Path?: PathUpdateManyWithoutUserNestedInput
    Routine?: RoutineUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoutineSlotActivityInput = {
    name?: StringFieldUpdateOperationsInput | string
    Term?: TermUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    Goal?: GoalUncheckedUpdateManyWithoutUserNestedInput
    Process?: ProcessUncheckedUpdateManyWithoutUserNestedInput
    Problem?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    Task?: TaskUncheckedUpdateManyWithoutUserNestedInput
    Activity?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    Attempt?: AttemptUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Resource?: ResourceUncheckedUpdateManyWithoutUserNestedInput
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Team?: TeamUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Path?: PathUncheckedUpdateManyWithoutUserNestedInput
    Routine?: RoutineUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlot?: RoutineSlotUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotThread?: RoutineSlotThreadUncheckedUpdateManyWithoutUserNestedInput
    RoutineSlotTask?: RoutineSlotTaskUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoutineSlotUpsertWithoutSlotActivitiesInput = {
    update: XOR<RoutineSlotUpdateWithoutSlotActivitiesInput, RoutineSlotUncheckedUpdateWithoutSlotActivitiesInput>
    create: XOR<RoutineSlotCreateWithoutSlotActivitiesInput, RoutineSlotUncheckedCreateWithoutSlotActivitiesInput>
    where?: RoutineSlotWhereInput
  }

  export type RoutineSlotUpdateToOneWithWhereWithoutSlotActivitiesInput = {
    where?: RoutineSlotWhereInput
    data: XOR<RoutineSlotUpdateWithoutSlotActivitiesInput, RoutineSlotUncheckedUpdateWithoutSlotActivitiesInput>
  }

  export type RoutineSlotUpdateWithoutSlotActivitiesInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineSlotNestedInput
    routine?: RoutineUpdateOneRequiredWithoutSlotsNestedInput
    slotThreads?: RoutineSlotThreadUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateWithoutSlotActivitiesInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slotThreads?: RoutineSlotThreadUncheckedUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type TermCreateManyUserInput = {
    name: string
    description?: string | null
    type: $Enums.TermKind
    derivedFromId?: string | null
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreadCreateManyUserInput = {
    name: string
    description?: string | null
    termId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyUserInput = {
    name: string
    description?: string | null
    threadId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalCreateManyUserInput = {
    name: string
    description?: string | null
    type?: $Enums.GoalType
    projectId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcessCreateManyUserInput = {
    name: string
    goalId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemCreateManyUserInput = {
    name: string
    processId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyUserInput = {
    name: string
    problemId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityCreateManyUserInput = {
    name: string
    taskId: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttemptCreateManyUserInput = {
    activityId: string
    result?: string | null
    createdAt?: Date | string
  }

  export type CommentCreateManyUserInput = {
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type ResourceCreateManyUserInput = {
    activityId: string
    url: string
    title?: string | null
  }

  export type ReviewCreateManyUserInput = {
    activityId: string
    content: string
    createdAt?: Date | string
  }

  export type TeamCreateManyUserInput = {
    projectId: string
    name: string
    details?: InputJsonValue | null
  }

  export type TeamMemberCreateManyUserInput = {
    id?: string
    teamId: string
    role?: string | null
  }

  export type PathCreateManyUserInput = {
    termId: string
    learningGoalId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type RoutineCreateManyUserInput = {
    name: string
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoutineSlotCreateManyUserInput = {
    routineId: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoutineSlotThreadCreateManyUserInput = {
    slotId: string
    threadId: string
  }

  export type RoutineSlotTaskCreateManyUserInput = {
    slotId: string
    taskId: string
  }

  export type RoutineSlotActivityCreateManyUserInput = {
    slotId: string
    activityId: string
  }

  export type TermUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    derivedFrom?: TermUpdateOneWithoutDerivedTermsNestedInput
    derivedTerms?: TermUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUpdateManyWithoutTermNestedInput
    paths?: PathUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    derivedTerms?: TermUncheckedUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUncheckedUpdateManyWithoutTermNestedInput
    paths?: PathUncheckedUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    derivedFromId?: NullableStringFieldUpdateOperationsInput | string | null
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreadUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: TermUpdateOneRequiredWithoutThreadsNestedInput
    projects?: ProjectUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    termId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    termId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thread?: ThreadUpdateOneRequiredWithoutProjectsNestedInput
    goals?: GoalUpdateManyWithoutProjectNestedInput
    teams?: TeamUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutProjectNestedInput
    teams?: TeamUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutGoalsNestedInput
    processes?: ProcessUpdateManyWithoutGoalNestedInput
    pathsFromTerm?: PathUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    projectId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processes?: ProcessUncheckedUpdateManyWithoutGoalNestedInput
    pathsFromTerm?: PathUncheckedUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    projectId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutProcessesNestedInput
    problems?: ProblemUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemUncheckedUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    process?: ProcessUpdateOneRequiredWithoutProblemsNestedInput
    tasks?: TaskUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    processId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    processId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutTasksNestedInput
    activities?: ActivityUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutActivitiesNestedInput
    attempts?: AttemptUpdateManyWithoutActivityNestedInput
    comments?: CommentUpdateManyWithoutActivityNestedInput
    resources?: ResourceUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptUncheckedUpdateManyWithoutActivityNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityNestedInput
    resources?: ResourceUncheckedUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptUpdateWithoutUserInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type AttemptUncheckedUpdateWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptUncheckedUpdateManyWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceUpdateWithoutUserInput = {
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: ActivityUpdateOneRequiredWithoutResourcesNestedInput
  }

  export type ResourceUncheckedUpdateWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResourceUncheckedUpdateManyWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    project?: ProjectUpdateOneRequiredWithoutTeamsNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
  }

  export type TeamMemberUpdateWithoutUserInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutUserInput = {
    teamId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserInput = {
    teamId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PathUpdateWithoutUserInput = {
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: TermUpdateOneRequiredWithoutPathsNestedInput
    learningGoal?: GoalUpdateOneRequiredWithoutPathsFromTermNestedInput
  }

  export type PathUncheckedUpdateWithoutUserInput = {
    termId?: StringFieldUpdateOperationsInput | string
    learningGoalId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathUncheckedUpdateManyWithoutUserInput = {
    termId?: StringFieldUpdateOperationsInput | string
    learningGoalId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slots?: RoutineSlotUpdateManyWithoutRoutineNestedInput
  }

  export type RoutineUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slots?: RoutineSlotUncheckedUpdateManyWithoutRoutineNestedInput
  }

  export type RoutineUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotUpdateWithoutUserInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routine?: RoutineUpdateOneRequiredWithoutSlotsNestedInput
    slotThreads?: RoutineSlotThreadUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateWithoutUserInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slotThreads?: RoutineSlotThreadUncheckedUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUncheckedUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateManyWithoutUserInput = {
    routineId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotThreadUpdateWithoutUserInput = {
    threadId?: StringFieldUpdateOperationsInput | string
    slot?: RoutineSlotUpdateOneRequiredWithoutSlotThreadsNestedInput
  }

  export type RoutineSlotThreadUncheckedUpdateWithoutUserInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotThreadUncheckedUpdateManyWithoutUserInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskUpdateWithoutUserInput = {
    taskId?: StringFieldUpdateOperationsInput | string
    slot?: RoutineSlotUpdateOneRequiredWithoutSlotTasksNestedInput
  }

  export type RoutineSlotTaskUncheckedUpdateWithoutUserInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskUncheckedUpdateManyWithoutUserInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityUpdateWithoutUserInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    slot?: RoutineSlotUpdateOneRequiredWithoutSlotActivitiesNestedInput
  }

  export type RoutineSlotActivityUncheckedUpdateWithoutUserInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityUncheckedUpdateManyWithoutUserInput = {
    slotId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type TermCreateManyDerivedFromInput = {
    id?: string
    name: string
    description?: string | null
    type: $Enums.TermKind
    layer?: string | null
    meta?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreadCreateManyTermInput = {
    id?: string
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PathCreateManyTermInput = {
    id?: string
    learningGoalId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type TermUpdateWithoutDerivedFromInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTermNestedInput
    derivedTerms?: TermUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUpdateManyWithoutTermNestedInput
    paths?: PathUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutDerivedFromInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    derivedTerms?: TermUncheckedUpdateManyWithoutDerivedFromNestedInput
    threads?: ThreadUncheckedUpdateManyWithoutTermNestedInput
    paths?: PathUncheckedUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateManyWithoutDerivedFromInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTermKindFieldUpdateOperationsInput | $Enums.TermKind
    layer?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreadUpdateWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutThreadNestedInput
    projects?: ProjectUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateManyWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathUpdateWithoutTermInput = {
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutPathNestedInput
    learningGoal?: GoalUpdateOneRequiredWithoutPathsFromTermNestedInput
  }

  export type PathUncheckedUpdateWithoutTermInput = {
    learningGoalId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathUncheckedUpdateManyWithoutTermInput = {
    learningGoalId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyThreadInput = {
    id?: string
    name: string
    description?: string | null
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProjectNestedInput
    goals?: GoalUpdateManyWithoutProjectNestedInput
    teams?: TeamUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutProjectNestedInput
    teams?: TeamUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.GoalType
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCreateManyProjectInput = {
    id?: string
    name: string
    details?: InputJsonValue | null
  }

  export type GoalUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGoalNestedInput
    processes?: ProcessUpdateManyWithoutGoalNestedInput
    pathsFromTerm?: PathUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processes?: ProcessUncheckedUpdateManyWithoutGoalNestedInput
    pathsFromTerm?: PathUncheckedUpdateManyWithoutLearningGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    user?: UserUpdateOneWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    details?: InputJsonValue | InputJsonValue | null
  }

  export type ProcessCreateManyGoalInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PathCreateManyLearningGoalInput = {
    id?: string
    termId: string
    steps?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type ProcessUpdateWithoutGoalInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProcessNestedInput
    problems?: ProblemUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateWithoutGoalInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemUncheckedUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateManyWithoutGoalInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathUpdateWithoutLearningGoalInput = {
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutPathNestedInput
    term?: TermUpdateOneRequiredWithoutPathsNestedInput
  }

  export type PathUncheckedUpdateWithoutLearningGoalInput = {
    termId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PathUncheckedUpdateManyWithoutLearningGoalInput = {
    termId?: StringFieldUpdateOperationsInput | string
    steps?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCreateManyProcessInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemUpdateWithoutProcessInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProblemNestedInput
    tasks?: TaskUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutProcessInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateManyWithoutProcessInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyProblemInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateWithoutProblemInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTaskNestedInput
    activities?: ActivityUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutProblemInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutProblemInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateManyTaskInput = {
    id?: string
    name: string
    meta?: InputJsonValue | null
    lastWorkedAt?: Date | string | null
    daytimeRoutine?: InputJsonValue | null
    threadRoutine?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityUpdateWithoutTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityNestedInput
    attempts?: AttemptUpdateManyWithoutActivityNestedInput
    comments?: CommentUpdateManyWithoutActivityNestedInput
    resources?: ResourceUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptUncheckedUpdateManyWithoutActivityNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityNestedInput
    resources?: ResourceUncheckedUpdateManyWithoutActivityNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    meta?: InputJsonValue | InputJsonValue | null
    lastWorkedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    daytimeRoutine?: InputJsonValue | InputJsonValue | null
    threadRoutine?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptCreateManyActivityInput = {
    id?: string
    result?: string | null
    createdAt?: Date | string
  }

  export type CommentCreateManyActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
  }

  export type ResourceCreateManyActivityInput = {
    id?: string
    url: string
    title?: string | null
  }

  export type ReviewCreateManyActivityInput = {
    id?: string
    content: string
    createdAt?: Date | string
  }

  export type AttemptUpdateWithoutActivityInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAttemptNestedInput
  }

  export type AttemptUncheckedUpdateWithoutActivityInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptUncheckedUpdateManyWithoutActivityInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutActivityInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutActivityInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutActivityInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceUpdateWithoutActivityInput = {
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutResourceNestedInput
  }

  export type ResourceUncheckedUpdateWithoutActivityInput = {
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResourceUncheckedUpdateManyWithoutActivityInput = {
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutActivityInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutActivityInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutActivityInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberCreateManyTeamInput = {
    id?: string
    userId: string
    role?: string | null
  }

  export type TeamMemberUpdateWithoutTeamInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTeamMemberNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutTeamInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoutineSlotCreateManyRoutineInput = {
    id?: string
    label: string
    startTime?: string | null
    endTime?: string | null
    todos?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoutineSlotUpdateWithoutRoutineInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRoutineSlotNestedInput
    slotThreads?: RoutineSlotThreadUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateWithoutRoutineInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slotThreads?: RoutineSlotThreadUncheckedUpdateManyWithoutSlotNestedInput
    slotTasks?: RoutineSlotTaskUncheckedUpdateManyWithoutSlotNestedInput
    slotActivities?: RoutineSlotActivityUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type RoutineSlotUncheckedUpdateManyWithoutRoutineInput = {
    label?: StringFieldUpdateOperationsInput | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    todos?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoutineSlotThreadCreateManySlotInput = {
    id?: string
    threadId: string
  }

  export type RoutineSlotTaskCreateManySlotInput = {
    id?: string
    taskId: string
  }

  export type RoutineSlotActivityCreateManySlotInput = {
    id?: string
    activityId: string
  }

  export type RoutineSlotThreadUpdateWithoutSlotInput = {
    threadId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutRoutineSlotThreadNestedInput
  }

  export type RoutineSlotThreadUncheckedUpdateWithoutSlotInput = {
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotThreadUncheckedUpdateManyWithoutSlotInput = {
    threadId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskUpdateWithoutSlotInput = {
    taskId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutRoutineSlotTaskNestedInput
  }

  export type RoutineSlotTaskUncheckedUpdateWithoutSlotInput = {
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotTaskUncheckedUpdateManyWithoutSlotInput = {
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityUpdateWithoutSlotInput = {
    activityId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutRoutineSlotActivityNestedInput
  }

  export type RoutineSlotActivityUncheckedUpdateWithoutSlotInput = {
    activityId?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSlotActivityUncheckedUpdateManyWithoutSlotInput = {
    activityId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}