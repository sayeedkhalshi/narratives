
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TermScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  derivedFromId: 'derivedFromId',
  layer: 'layer',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ThreadScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  termId: 'termId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  threadId: 'threadId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  projectId: 'projectId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  goalId: 'goalId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProblemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  processId: 'processId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  problemId: 'problemId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  taskId: 'taskId',
  meta: 'meta',
  lastWorkedAt: 'lastWorkedAt',
  daytimeRoutine: 'daytimeRoutine',
  threadRoutine: 'threadRoutine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttemptScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  result: 'result',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  url: 'url',
  title: 'title'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  details: 'details'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.PathScalarFieldEnum = {
  id: 'id',
  termId: 'termId',
  learningGoalId: 'learningGoalId',
  steps: 'steps',
  createdAt: 'createdAt'
};

exports.Prisma.RoutineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoutineSlotScalarFieldEnum = {
  id: 'id',
  routineId: 'routineId',
  label: 'label',
  startTime: 'startTime',
  endTime: 'endTime',
  todos: 'todos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoutineSlotThreadScalarFieldEnum = {
  id: 'id',
  slotId: 'slotId',
  threadId: 'threadId'
};

exports.Prisma.RoutineSlotTaskScalarFieldEnum = {
  id: 'id',
  slotId: 'slotId',
  taskId: 'taskId'
};

exports.Prisma.RoutineSlotActivityScalarFieldEnum = {
  id: 'id',
  slotId: 'slotId',
  activityId: 'activityId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.TermKind = exports.$Enums.TermKind = {
  GENUINE: 'GENUINE',
  PERSPECTIVE: 'PERSPECTIVE'
};

exports.GoalType = exports.$Enums.GoalType = {
  NORMAL: 'NORMAL',
  LEARNING: 'LEARNING'
};

exports.Prisma.ModelName = {
  User: 'User',
  Term: 'Term',
  Thread: 'Thread',
  Project: 'Project',
  Goal: 'Goal',
  Process: 'Process',
  Problem: 'Problem',
  Task: 'Task',
  Activity: 'Activity',
  Attempt: 'Attempt',
  Comment: 'Comment',
  Resource: 'Resource',
  Review: 'Review',
  Team: 'Team',
  TeamMember: 'TeamMember',
  Path: 'Path',
  Routine: 'Routine',
  RoutineSlot: 'RoutineSlot',
  RoutineSlotThread: 'RoutineSlotThread',
  RoutineSlotTask: 'RoutineSlotTask',
  RoutineSlotActivity: 'RoutineSlotActivity'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
